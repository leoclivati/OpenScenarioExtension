/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.openScenario.impl;

import de.bmwgroup.openscenario.openScenario.ArgumentListSpecification;
import de.bmwgroup.openscenario.openScenario.EventDeclaration;
import de.bmwgroup.openscenario.openScenario.EventSpecification;
import de.bmwgroup.openscenario.openScenario.OpenScenarioPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Event Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.EventDeclarationImpl#getEventName <em>Event Name</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.EventDeclarationImpl#getParams <em>Params</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.EventDeclarationImpl#getEventSpecification <em>Event Specification</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EventDeclarationImpl extends MemberDeclarationImpl implements EventDeclaration
{
  /**
   * The default value of the '{@link #getEventName() <em>Event Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventName()
   * @generated
   * @ordered
   */
  protected static final String EVENT_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEventName() <em>Event Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventName()
   * @generated
   * @ordered
   */
  protected String eventName = EVENT_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getParams() <em>Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParams()
   * @generated
   * @ordered
   */
  protected EList<ArgumentListSpecification> params;

  /**
   * The cached value of the '{@link #getEventSpecification() <em>Event Specification</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventSpecification()
   * @generated
   * @ordered
   */
  protected EventSpecification eventSpecification;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EventDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.EVENT_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEventName()
  {
    return eventName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEventName(String newEventName)
  {
    String oldEventName = eventName;
    eventName = newEventName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.EVENT_DECLARATION__EVENT_NAME, oldEventName, eventName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ArgumentListSpecification> getParams()
  {
    if (params == null)
    {
      params = new EObjectContainmentEList<ArgumentListSpecification>(ArgumentListSpecification.class, this, OpenScenarioPackage.EVENT_DECLARATION__PARAMS);
    }
    return params;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventSpecification getEventSpecification()
  {
    return eventSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEventSpecification(EventSpecification newEventSpecification, NotificationChain msgs)
  {
    EventSpecification oldEventSpecification = eventSpecification;
    eventSpecification = newEventSpecification;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.EVENT_DECLARATION__EVENT_SPECIFICATION, oldEventSpecification, newEventSpecification);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEventSpecification(EventSpecification newEventSpecification)
  {
    if (newEventSpecification != eventSpecification)
    {
      NotificationChain msgs = null;
      if (eventSpecification != null)
        msgs = ((InternalEObject)eventSpecification).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.EVENT_DECLARATION__EVENT_SPECIFICATION, null, msgs);
      if (newEventSpecification != null)
        msgs = ((InternalEObject)newEventSpecification).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.EVENT_DECLARATION__EVENT_SPECIFICATION, null, msgs);
      msgs = basicSetEventSpecification(newEventSpecification, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.EVENT_DECLARATION__EVENT_SPECIFICATION, newEventSpecification, newEventSpecification));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVENT_DECLARATION__PARAMS:
        return ((InternalEList<?>)getParams()).basicRemove(otherEnd, msgs);
      case OpenScenarioPackage.EVENT_DECLARATION__EVENT_SPECIFICATION:
        return basicSetEventSpecification(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVENT_DECLARATION__EVENT_NAME:
        return getEventName();
      case OpenScenarioPackage.EVENT_DECLARATION__PARAMS:
        return getParams();
      case OpenScenarioPackage.EVENT_DECLARATION__EVENT_SPECIFICATION:
        return getEventSpecification();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVENT_DECLARATION__EVENT_NAME:
        setEventName((String)newValue);
        return;
      case OpenScenarioPackage.EVENT_DECLARATION__PARAMS:
        getParams().clear();
        getParams().addAll((Collection<? extends ArgumentListSpecification>)newValue);
        return;
      case OpenScenarioPackage.EVENT_DECLARATION__EVENT_SPECIFICATION:
        setEventSpecification((EventSpecification)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVENT_DECLARATION__EVENT_NAME:
        setEventName(EVENT_NAME_EDEFAULT);
        return;
      case OpenScenarioPackage.EVENT_DECLARATION__PARAMS:
        getParams().clear();
        return;
      case OpenScenarioPackage.EVENT_DECLARATION__EVENT_SPECIFICATION:
        setEventSpecification((EventSpecification)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVENT_DECLARATION__EVENT_NAME:
        return EVENT_NAME_EDEFAULT == null ? eventName != null : !EVENT_NAME_EDEFAULT.equals(eventName);
      case OpenScenarioPackage.EVENT_DECLARATION__PARAMS:
        return params != null && !params.isEmpty();
      case OpenScenarioPackage.EVENT_DECLARATION__EVENT_SPECIFICATION:
        return eventSpecification != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (eventName: ");
    result.append(eventName);
    result.append(')');
    return result.toString();
  }

} //EventDeclarationImpl
