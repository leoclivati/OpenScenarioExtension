/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.openScenario.impl;

import de.bmwgroup.openscenario.openScenario.Expression;
import de.bmwgroup.openscenario.openScenario.OpenScenarioPackage;
import de.bmwgroup.openscenario.openScenario.RiseExpression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rise Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.RiseExpressionImpl#getBoolExpression <em>Bool Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RiseExpressionImpl extends EventConditionImpl implements RiseExpression
{
  /**
   * The cached value of the '{@link #getBoolExpression() <em>Bool Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBoolExpression()
   * @generated
   * @ordered
   */
  protected Expression boolExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RiseExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.RISE_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getBoolExpression()
  {
    return boolExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBoolExpression(Expression newBoolExpression, NotificationChain msgs)
  {
    Expression oldBoolExpression = boolExpression;
    boolExpression = newBoolExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.RISE_EXPRESSION__BOOL_EXPRESSION, oldBoolExpression, newBoolExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBoolExpression(Expression newBoolExpression)
  {
    if (newBoolExpression != boolExpression)
    {
      NotificationChain msgs = null;
      if (boolExpression != null)
        msgs = ((InternalEObject)boolExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.RISE_EXPRESSION__BOOL_EXPRESSION, null, msgs);
      if (newBoolExpression != null)
        msgs = ((InternalEObject)newBoolExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.RISE_EXPRESSION__BOOL_EXPRESSION, null, msgs);
      msgs = basicSetBoolExpression(newBoolExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.RISE_EXPRESSION__BOOL_EXPRESSION, newBoolExpression, newBoolExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.RISE_EXPRESSION__BOOL_EXPRESSION:
        return basicSetBoolExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.RISE_EXPRESSION__BOOL_EXPRESSION:
        return getBoolExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.RISE_EXPRESSION__BOOL_EXPRESSION:
        setBoolExpression((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.RISE_EXPRESSION__BOOL_EXPRESSION:
        setBoolExpression((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.RISE_EXPRESSION__BOOL_EXPRESSION:
        return boolExpression != null;
    }
    return super.eIsSet(featureID);
  }

} //RiseExpressionImpl
