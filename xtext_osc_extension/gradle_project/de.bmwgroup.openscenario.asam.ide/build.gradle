plugins {
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

dependencies {
	api project(':de.bmwgroup.openscenario.asam')
	api "org.eclipse.xtext:org.eclipse.xtext.ide:${xtextVersion}"
	api "org.eclipse.xtext:org.eclipse.xtext.xbase.ide:${xtextVersion}"
}

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
application {
	mainClass = "de.bmwgroup.openscenario.asam.ide.RunServer"
	startScripts {
		applicationName = 'osc-socket'
	}
}

shadowJar {
	from(project.extensions.findByType(JavaPluginExtension.class).sourceSets.main.output)
	configurations = [project.configurations.runtimeClasspath]
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA','schema/*',
		'.options', '.api_description', '*.profile', '*.html', 'about.*', 'about_files/*',
		'plugin.xml', 'systembundle.properties', 'profile.list')
	archiveClassifier = 'ls'
	append('plugin.properties')
	mergeServiceFiles()
}

task standaloneStartScript(type: CreateStartScripts) {
	mainClass = 'de.bmwgroup.openscenario.asam.ide.ServerLauncher'
	applicationName = 'osc-standalone'
	def t = project.tasks.getByPath('startScripts');
    classpath = t.classpath;
    outputDir = t.outputDir;
}

def t = project.tasks.getByPath('startScripts')
t.dependsOn(standaloneStartScript) // trigger 'secondaryStartScript' execution automatically
