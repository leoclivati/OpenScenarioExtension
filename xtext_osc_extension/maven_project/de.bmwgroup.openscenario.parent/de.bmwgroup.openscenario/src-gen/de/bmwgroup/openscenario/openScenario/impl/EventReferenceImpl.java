/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.openScenario.impl;

import de.bmwgroup.openscenario.openScenario.EventPath;
import de.bmwgroup.openscenario.openScenario.EventReference;
import de.bmwgroup.openscenario.openScenario.OpenScenarioPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Event Reference</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.EventReferenceImpl#getEventPath <em>Event Path</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EventReferenceImpl extends MinimalEObjectImpl.Container implements EventReference
{
  /**
   * The cached value of the '{@link #getEventPath() <em>Event Path</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventPath()
   * @generated
   * @ordered
   */
  protected EventPath eventPath;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EventReferenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.EVENT_REFERENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventPath getEventPath()
  {
    return eventPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEventPath(EventPath newEventPath, NotificationChain msgs)
  {
    EventPath oldEventPath = eventPath;
    eventPath = newEventPath;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.EVENT_REFERENCE__EVENT_PATH, oldEventPath, newEventPath);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEventPath(EventPath newEventPath)
  {
    if (newEventPath != eventPath)
    {
      NotificationChain msgs = null;
      if (eventPath != null)
        msgs = ((InternalEObject)eventPath).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.EVENT_REFERENCE__EVENT_PATH, null, msgs);
      if (newEventPath != null)
        msgs = ((InternalEObject)newEventPath).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.EVENT_REFERENCE__EVENT_PATH, null, msgs);
      msgs = basicSetEventPath(newEventPath, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.EVENT_REFERENCE__EVENT_PATH, newEventPath, newEventPath));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVENT_REFERENCE__EVENT_PATH:
        return basicSetEventPath(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVENT_REFERENCE__EVENT_PATH:
        return getEventPath();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVENT_REFERENCE__EVENT_PATH:
        setEventPath((EventPath)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVENT_REFERENCE__EVENT_PATH:
        setEventPath((EventPath)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVENT_REFERENCE__EVENT_PATH:
        return eventPath != null;
    }
    return super.eIsSet(featureID);
  }

} //EventReferenceImpl
