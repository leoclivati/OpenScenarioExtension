/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.asam.openScenario.impl;

import de.bmwgroup.openscenario.asam.openScenario.ArgumentSpecification;
import de.bmwgroup.openscenario.asam.openScenario.Expression;
import de.bmwgroup.openscenario.asam.openScenario.OpenScenarioPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Argument Specification</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.ArgumentSpecificationImpl#getArgumentName <em>Argument Name</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.ArgumentSpecificationImpl#getTypeDeclarator <em>Type Declarator</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.ArgumentSpecificationImpl#getDefaultValue <em>Default Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ArgumentSpecificationImpl extends MinimalEObjectImpl.Container implements ArgumentSpecification
{
  /**
   * The default value of the '{@link #getArgumentName() <em>Argument Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgumentName()
   * @generated
   * @ordered
   */
  protected static final String ARGUMENT_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getArgumentName() <em>Argument Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgumentName()
   * @generated
   * @ordered
   */
  protected String argumentName = ARGUMENT_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getTypeDeclarator() <em>Type Declarator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeDeclarator()
   * @generated
   * @ordered
   */
  protected static final String TYPE_DECLARATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTypeDeclarator() <em>Type Declarator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeDeclarator()
   * @generated
   * @ordered
   */
  protected String typeDeclarator = TYPE_DECLARATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getDefaultValue() <em>Default Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultValue()
   * @generated
   * @ordered
   */
  protected Expression defaultValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ArgumentSpecificationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.ARGUMENT_SPECIFICATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getArgumentName()
  {
    return argumentName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArgumentName(String newArgumentName)
  {
    String oldArgumentName = argumentName;
    argumentName = newArgumentName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.ARGUMENT_SPECIFICATION__ARGUMENT_NAME, oldArgumentName, argumentName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTypeDeclarator()
  {
    return typeDeclarator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTypeDeclarator(String newTypeDeclarator)
  {
    String oldTypeDeclarator = typeDeclarator;
    typeDeclarator = newTypeDeclarator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.ARGUMENT_SPECIFICATION__TYPE_DECLARATOR, oldTypeDeclarator, typeDeclarator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getDefaultValue()
  {
    return defaultValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDefaultValue(Expression newDefaultValue, NotificationChain msgs)
  {
    Expression oldDefaultValue = defaultValue;
    defaultValue = newDefaultValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.ARGUMENT_SPECIFICATION__DEFAULT_VALUE, oldDefaultValue, newDefaultValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefaultValue(Expression newDefaultValue)
  {
    if (newDefaultValue != defaultValue)
    {
      NotificationChain msgs = null;
      if (defaultValue != null)
        msgs = ((InternalEObject)defaultValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.ARGUMENT_SPECIFICATION__DEFAULT_VALUE, null, msgs);
      if (newDefaultValue != null)
        msgs = ((InternalEObject)newDefaultValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.ARGUMENT_SPECIFICATION__DEFAULT_VALUE, null, msgs);
      msgs = basicSetDefaultValue(newDefaultValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.ARGUMENT_SPECIFICATION__DEFAULT_VALUE, newDefaultValue, newDefaultValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.ARGUMENT_SPECIFICATION__DEFAULT_VALUE:
        return basicSetDefaultValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.ARGUMENT_SPECIFICATION__ARGUMENT_NAME:
        return getArgumentName();
      case OpenScenarioPackage.ARGUMENT_SPECIFICATION__TYPE_DECLARATOR:
        return getTypeDeclarator();
      case OpenScenarioPackage.ARGUMENT_SPECIFICATION__DEFAULT_VALUE:
        return getDefaultValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.ARGUMENT_SPECIFICATION__ARGUMENT_NAME:
        setArgumentName((String)newValue);
        return;
      case OpenScenarioPackage.ARGUMENT_SPECIFICATION__TYPE_DECLARATOR:
        setTypeDeclarator((String)newValue);
        return;
      case OpenScenarioPackage.ARGUMENT_SPECIFICATION__DEFAULT_VALUE:
        setDefaultValue((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.ARGUMENT_SPECIFICATION__ARGUMENT_NAME:
        setArgumentName(ARGUMENT_NAME_EDEFAULT);
        return;
      case OpenScenarioPackage.ARGUMENT_SPECIFICATION__TYPE_DECLARATOR:
        setTypeDeclarator(TYPE_DECLARATOR_EDEFAULT);
        return;
      case OpenScenarioPackage.ARGUMENT_SPECIFICATION__DEFAULT_VALUE:
        setDefaultValue((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.ARGUMENT_SPECIFICATION__ARGUMENT_NAME:
        return ARGUMENT_NAME_EDEFAULT == null ? argumentName != null : !ARGUMENT_NAME_EDEFAULT.equals(argumentName);
      case OpenScenarioPackage.ARGUMENT_SPECIFICATION__TYPE_DECLARATOR:
        return TYPE_DECLARATOR_EDEFAULT == null ? typeDeclarator != null : !TYPE_DECLARATOR_EDEFAULT.equals(typeDeclarator);
      case OpenScenarioPackage.ARGUMENT_SPECIFICATION__DEFAULT_VALUE:
        return defaultValue != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (argumentName: ");
    result.append(argumentName);
    result.append(", typeDeclarator: ");
    result.append(typeDeclarator);
    result.append(')');
    return result.toString();
  }

} //ArgumentSpecificationImpl
