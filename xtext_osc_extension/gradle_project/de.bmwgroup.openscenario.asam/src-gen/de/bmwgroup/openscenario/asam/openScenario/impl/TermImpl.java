/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.asam.openScenario.impl;

import de.bmwgroup.openscenario.asam.openScenario.OpenScenarioPackage;
import de.bmwgroup.openscenario.asam.openScenario.Term;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.TermImpl#getAdditiveOp <em>Additive Op</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.TermImpl#getNextTerm <em>Next Term</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TermImpl extends SumImpl implements Term
{
  /**
   * The cached value of the '{@link #getAdditiveOp() <em>Additive Op</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAdditiveOp()
   * @generated
   * @ordered
   */
  protected EList<String> additiveOp;

  /**
   * The cached value of the '{@link #getNextTerm() <em>Next Term</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNextTerm()
   * @generated
   * @ordered
   */
  protected EList<Term> nextTerm;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TermImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.TERM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getAdditiveOp()
  {
    if (additiveOp == null)
    {
      additiveOp = new EDataTypeEList<String>(String.class, this, OpenScenarioPackage.TERM__ADDITIVE_OP);
    }
    return additiveOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Term> getNextTerm()
  {
    if (nextTerm == null)
    {
      nextTerm = new EObjectContainmentEList<Term>(Term.class, this, OpenScenarioPackage.TERM__NEXT_TERM);
    }
    return nextTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.TERM__NEXT_TERM:
        return ((InternalEList<?>)getNextTerm()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.TERM__ADDITIVE_OP:
        return getAdditiveOp();
      case OpenScenarioPackage.TERM__NEXT_TERM:
        return getNextTerm();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.TERM__ADDITIVE_OP:
        getAdditiveOp().clear();
        getAdditiveOp().addAll((Collection<? extends String>)newValue);
        return;
      case OpenScenarioPackage.TERM__NEXT_TERM:
        getNextTerm().clear();
        getNextTerm().addAll((Collection<? extends Term>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.TERM__ADDITIVE_OP:
        getAdditiveOp().clear();
        return;
      case OpenScenarioPackage.TERM__NEXT_TERM:
        getNextTerm().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.TERM__ADDITIVE_OP:
        return additiveOp != null && !additiveOp.isEmpty();
      case OpenScenarioPackage.TERM__NEXT_TERM:
        return nextTerm != null && !nextTerm.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (additiveOp: ");
    result.append(additiveOp);
    result.append(')');
    return result.toString();
  }

} //TermImpl
