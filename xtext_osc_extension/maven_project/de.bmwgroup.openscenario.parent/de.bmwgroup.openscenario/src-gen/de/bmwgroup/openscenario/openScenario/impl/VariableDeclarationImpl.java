/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.openScenario.impl;

import de.bmwgroup.openscenario.openScenario.OpenScenarioPackage;
import de.bmwgroup.openscenario.openScenario.SampleExpression;
import de.bmwgroup.openscenario.openScenario.VariableDeclaration;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Variable Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.VariableDeclarationImpl#getSampleExpression <em>Sample Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VariableDeclarationImpl extends FieldDeclarationImpl implements VariableDeclaration
{
  /**
   * The cached value of the '{@link #getSampleExpression() <em>Sample Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSampleExpression()
   * @generated
   * @ordered
   */
  protected SampleExpression sampleExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VariableDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.VARIABLE_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SampleExpression getSampleExpression()
  {
    return sampleExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSampleExpression(SampleExpression newSampleExpression, NotificationChain msgs)
  {
    SampleExpression oldSampleExpression = sampleExpression;
    sampleExpression = newSampleExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.VARIABLE_DECLARATION__SAMPLE_EXPRESSION, oldSampleExpression, newSampleExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSampleExpression(SampleExpression newSampleExpression)
  {
    if (newSampleExpression != sampleExpression)
    {
      NotificationChain msgs = null;
      if (sampleExpression != null)
        msgs = ((InternalEObject)sampleExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.VARIABLE_DECLARATION__SAMPLE_EXPRESSION, null, msgs);
      if (newSampleExpression != null)
        msgs = ((InternalEObject)newSampleExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.VARIABLE_DECLARATION__SAMPLE_EXPRESSION, null, msgs);
      msgs = basicSetSampleExpression(newSampleExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.VARIABLE_DECLARATION__SAMPLE_EXPRESSION, newSampleExpression, newSampleExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.VARIABLE_DECLARATION__SAMPLE_EXPRESSION:
        return basicSetSampleExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.VARIABLE_DECLARATION__SAMPLE_EXPRESSION:
        return getSampleExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.VARIABLE_DECLARATION__SAMPLE_EXPRESSION:
        setSampleExpression((SampleExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.VARIABLE_DECLARATION__SAMPLE_EXPRESSION:
        setSampleExpression((SampleExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.VARIABLE_DECLARATION__SAMPLE_EXPRESSION:
        return sampleExpression != null;
    }
    return super.eIsSet(featureID);
  }

} //VariableDeclarationImpl
