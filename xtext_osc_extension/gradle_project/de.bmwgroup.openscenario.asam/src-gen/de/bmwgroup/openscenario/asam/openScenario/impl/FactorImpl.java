/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.asam.openScenario.impl;

import de.bmwgroup.openscenario.asam.openScenario.Factor;
import de.bmwgroup.openscenario.asam.openScenario.OpenScenarioPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Factor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.FactorImpl#getMultiplicativeOp <em>Multiplicative Op</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.FactorImpl#getNextFactor <em>Next Factor</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FactorImpl extends TermImpl implements Factor
{
  /**
   * The cached value of the '{@link #getMultiplicativeOp() <em>Multiplicative Op</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultiplicativeOp()
   * @generated
   * @ordered
   */
  protected EList<String> multiplicativeOp;

  /**
   * The cached value of the '{@link #getNextFactor() <em>Next Factor</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNextFactor()
   * @generated
   * @ordered
   */
  protected EList<Factor> nextFactor;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FactorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.FACTOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getMultiplicativeOp()
  {
    if (multiplicativeOp == null)
    {
      multiplicativeOp = new EDataTypeEList<String>(String.class, this, OpenScenarioPackage.FACTOR__MULTIPLICATIVE_OP);
    }
    return multiplicativeOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Factor> getNextFactor()
  {
    if (nextFactor == null)
    {
      nextFactor = new EObjectContainmentEList<Factor>(Factor.class, this, OpenScenarioPackage.FACTOR__NEXT_FACTOR);
    }
    return nextFactor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.FACTOR__NEXT_FACTOR:
        return ((InternalEList<?>)getNextFactor()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.FACTOR__MULTIPLICATIVE_OP:
        return getMultiplicativeOp();
      case OpenScenarioPackage.FACTOR__NEXT_FACTOR:
        return getNextFactor();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.FACTOR__MULTIPLICATIVE_OP:
        getMultiplicativeOp().clear();
        getMultiplicativeOp().addAll((Collection<? extends String>)newValue);
        return;
      case OpenScenarioPackage.FACTOR__NEXT_FACTOR:
        getNextFactor().clear();
        getNextFactor().addAll((Collection<? extends Factor>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.FACTOR__MULTIPLICATIVE_OP:
        getMultiplicativeOp().clear();
        return;
      case OpenScenarioPackage.FACTOR__NEXT_FACTOR:
        getNextFactor().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.FACTOR__MULTIPLICATIVE_OP:
        return multiplicativeOp != null && !multiplicativeOp.isEmpty();
      case OpenScenarioPackage.FACTOR__NEXT_FACTOR:
        return nextFactor != null && !nextFactor.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (multiplicativeOp: ");
    result.append(multiplicativeOp);
    result.append(')');
    return result.toString();
  }

} //FactorImpl
