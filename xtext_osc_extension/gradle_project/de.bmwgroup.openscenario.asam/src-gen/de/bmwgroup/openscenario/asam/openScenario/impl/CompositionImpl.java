/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.asam.openScenario.impl;

import de.bmwgroup.openscenario.asam.openScenario.ArgumentList;
import de.bmwgroup.openscenario.asam.openScenario.BehaviorWithDeclaration;
import de.bmwgroup.openscenario.asam.openScenario.Composition;
import de.bmwgroup.openscenario.asam.openScenario.DoDirectiveMember;
import de.bmwgroup.openscenario.asam.openScenario.OpenScenarioPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Composition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.CompositionImpl#getCompositionOp <em>Composition Op</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.CompositionImpl#getArgumentList <em>Argument List</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.CompositionImpl#getDoMembers <em>Do Members</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.CompositionImpl#getWithDeclaration <em>With Declaration</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CompositionImpl extends MinimalEObjectImpl.Container implements Composition
{
  /**
   * The default value of the '{@link #getCompositionOp() <em>Composition Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompositionOp()
   * @generated
   * @ordered
   */
  protected static final String COMPOSITION_OP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCompositionOp() <em>Composition Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompositionOp()
   * @generated
   * @ordered
   */
  protected String compositionOp = COMPOSITION_OP_EDEFAULT;

  /**
   * The cached value of the '{@link #getArgumentList() <em>Argument List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgumentList()
   * @generated
   * @ordered
   */
  protected ArgumentList argumentList;

  /**
   * The cached value of the '{@link #getDoMembers() <em>Do Members</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDoMembers()
   * @generated
   * @ordered
   */
  protected EList<DoDirectiveMember> doMembers;

  /**
   * The cached value of the '{@link #getWithDeclaration() <em>With Declaration</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWithDeclaration()
   * @generated
   * @ordered
   */
  protected EList<BehaviorWithDeclaration> withDeclaration;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompositionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.COMPOSITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCompositionOp()
  {
    return compositionOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCompositionOp(String newCompositionOp)
  {
    String oldCompositionOp = compositionOp;
    compositionOp = newCompositionOp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.COMPOSITION__COMPOSITION_OP, oldCompositionOp, compositionOp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArgumentList getArgumentList()
  {
    return argumentList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArgumentList(ArgumentList newArgumentList, NotificationChain msgs)
  {
    ArgumentList oldArgumentList = argumentList;
    argumentList = newArgumentList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.COMPOSITION__ARGUMENT_LIST, oldArgumentList, newArgumentList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArgumentList(ArgumentList newArgumentList)
  {
    if (newArgumentList != argumentList)
    {
      NotificationChain msgs = null;
      if (argumentList != null)
        msgs = ((InternalEObject)argumentList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.COMPOSITION__ARGUMENT_LIST, null, msgs);
      if (newArgumentList != null)
        msgs = ((InternalEObject)newArgumentList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.COMPOSITION__ARGUMENT_LIST, null, msgs);
      msgs = basicSetArgumentList(newArgumentList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.COMPOSITION__ARGUMENT_LIST, newArgumentList, newArgumentList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DoDirectiveMember> getDoMembers()
  {
    if (doMembers == null)
    {
      doMembers = new EObjectContainmentEList<DoDirectiveMember>(DoDirectiveMember.class, this, OpenScenarioPackage.COMPOSITION__DO_MEMBERS);
    }
    return doMembers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BehaviorWithDeclaration> getWithDeclaration()
  {
    if (withDeclaration == null)
    {
      withDeclaration = new EObjectContainmentEList<BehaviorWithDeclaration>(BehaviorWithDeclaration.class, this, OpenScenarioPackage.COMPOSITION__WITH_DECLARATION);
    }
    return withDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.COMPOSITION__ARGUMENT_LIST:
        return basicSetArgumentList(null, msgs);
      case OpenScenarioPackage.COMPOSITION__DO_MEMBERS:
        return ((InternalEList<?>)getDoMembers()).basicRemove(otherEnd, msgs);
      case OpenScenarioPackage.COMPOSITION__WITH_DECLARATION:
        return ((InternalEList<?>)getWithDeclaration()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.COMPOSITION__COMPOSITION_OP:
        return getCompositionOp();
      case OpenScenarioPackage.COMPOSITION__ARGUMENT_LIST:
        return getArgumentList();
      case OpenScenarioPackage.COMPOSITION__DO_MEMBERS:
        return getDoMembers();
      case OpenScenarioPackage.COMPOSITION__WITH_DECLARATION:
        return getWithDeclaration();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.COMPOSITION__COMPOSITION_OP:
        setCompositionOp((String)newValue);
        return;
      case OpenScenarioPackage.COMPOSITION__ARGUMENT_LIST:
        setArgumentList((ArgumentList)newValue);
        return;
      case OpenScenarioPackage.COMPOSITION__DO_MEMBERS:
        getDoMembers().clear();
        getDoMembers().addAll((Collection<? extends DoDirectiveMember>)newValue);
        return;
      case OpenScenarioPackage.COMPOSITION__WITH_DECLARATION:
        getWithDeclaration().clear();
        getWithDeclaration().addAll((Collection<? extends BehaviorWithDeclaration>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.COMPOSITION__COMPOSITION_OP:
        setCompositionOp(COMPOSITION_OP_EDEFAULT);
        return;
      case OpenScenarioPackage.COMPOSITION__ARGUMENT_LIST:
        setArgumentList((ArgumentList)null);
        return;
      case OpenScenarioPackage.COMPOSITION__DO_MEMBERS:
        getDoMembers().clear();
        return;
      case OpenScenarioPackage.COMPOSITION__WITH_DECLARATION:
        getWithDeclaration().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.COMPOSITION__COMPOSITION_OP:
        return COMPOSITION_OP_EDEFAULT == null ? compositionOp != null : !COMPOSITION_OP_EDEFAULT.equals(compositionOp);
      case OpenScenarioPackage.COMPOSITION__ARGUMENT_LIST:
        return argumentList != null;
      case OpenScenarioPackage.COMPOSITION__DO_MEMBERS:
        return doMembers != null && !doMembers.isEmpty();
      case OpenScenarioPackage.COMPOSITION__WITH_DECLARATION:
        return withDeclaration != null && !withDeclaration.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (compositionOp: ");
    result.append(compositionOp);
    result.append(')');
    return result.toString();
  }

} //CompositionImpl
