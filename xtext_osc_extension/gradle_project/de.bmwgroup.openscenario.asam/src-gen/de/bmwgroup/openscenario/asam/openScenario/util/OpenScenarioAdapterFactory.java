/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.asam.openScenario.util;

import de.bmwgroup.openscenario.asam.openScenario.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see de.bmwgroup.openscenario.asam.openScenario.OpenScenarioPackage
 * @generated
 */
public class OpenScenarioAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static OpenScenarioPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OpenScenarioAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = OpenScenarioPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OpenScenarioSwitch<Adapter> modelSwitch =
    new OpenScenarioSwitch<Adapter>()
    {
      @Override
      public Adapter caseOscFile(OscFile object)
      {
        return createOscFileAdapter();
      }
      @Override
      public Adapter casePreludeStatement(PreludeStatement object)
      {
        return createPreludeStatementAdapter();
      }
      @Override
      public Adapter caseImportStatement(ImportStatement object)
      {
        return createImportStatementAdapter();
      }
      @Override
      public Adapter caseImportReference(ImportReference object)
      {
        return createImportReferenceAdapter();
      }
      @Override
      public Adapter caseStructuredID(StructuredID object)
      {
        return createStructuredIDAdapter();
      }
      @Override
      public Adapter caseOscDeclaration(OscDeclaration object)
      {
        return createOscDeclarationAdapter();
      }
      @Override
      public Adapter casePhysicalTypeDeclaration(PhysicalTypeDeclaration object)
      {
        return createPhysicalTypeDeclarationAdapter();
      }
      @Override
      public Adapter caseUnitDeclaration(UnitDeclaration object)
      {
        return createUnitDeclarationAdapter();
      }
      @Override
      public Adapter caseSIBaseUnitSpecifier(SIBaseUnitSpecifier object)
      {
        return createSIBaseUnitSpecifierAdapter();
      }
      @Override
      public Adapter caseSIBaseExponentList(SIBaseExponentList object)
      {
        return createSIBaseExponentListAdapter();
      }
      @Override
      public Adapter caseSIBaseExponent(SIBaseExponent object)
      {
        return createSIBaseExponentAdapter();
      }
      @Override
      public Adapter caseSIUnitSpecifier(SIUnitSpecifier object)
      {
        return createSIUnitSpecifierAdapter();
      }
      @Override
      public Adapter caseTypeExtension(TypeExtension object)
      {
        return createTypeExtensionAdapter();
      }
      @Override
      public Adapter caseEnumTypeExtension(EnumTypeExtension object)
      {
        return createEnumTypeExtensionAdapter();
      }
      @Override
      public Adapter caseStructuredTypeExtension(StructuredTypeExtension object)
      {
        return createStructuredTypeExtensionAdapter();
      }
      @Override
      public Adapter caseExtensionMemberDeclaration(ExtensionMemberDeclaration object)
      {
        return createExtensionMemberDeclarationAdapter();
      }
      @Override
      public Adapter caseGlobalParameterDeclaration(GlobalParameterDeclaration object)
      {
        return createGlobalParameterDeclarationAdapter();
      }
      @Override
      public Adapter caseParameterDeclaration(ParameterDeclaration object)
      {
        return createParameterDeclarationAdapter();
      }
      @Override
      public Adapter caseEnumDeclaration(EnumDeclaration object)
      {
        return createEnumDeclarationAdapter();
      }
      @Override
      public Adapter caseEnumMemberDeclaration(EnumMemberDeclaration object)
      {
        return createEnumMemberDeclarationAdapter();
      }
      @Override
      public Adapter caseEnumValueReference(EnumValueReference object)
      {
        return createEnumValueReferenceAdapter();
      }
      @Override
      public Adapter caseModifierDeclaration(ModifierDeclaration object)
      {
        return createModifierDeclarationAdapter();
      }
      @Override
      public Adapter caseActionDeclaration(ActionDeclaration object)
      {
        return createActionDeclarationAdapter();
      }
      @Override
      public Adapter caseActorDeclaration(ActorDeclaration object)
      {
        return createActorDeclarationAdapter();
      }
      @Override
      public Adapter caseStructDeclaration(StructDeclaration object)
      {
        return createStructDeclarationAdapter();
      }
      @Override
      public Adapter caseScenarioDeclaration(ScenarioDeclaration object)
      {
        return createScenarioDeclarationAdapter();
      }
      @Override
      public Adapter caseMemberDeclaration(MemberDeclaration object)
      {
        return createMemberDeclarationAdapter();
      }
      @Override
      public Adapter caseCoverageDeclaration(CoverageDeclaration object)
      {
        return createCoverageDeclarationAdapter();
      }
      @Override
      public Adapter caseMethodDeclaration(MethodDeclaration object)
      {
        return createMethodDeclarationAdapter();
      }
      @Override
      public Adapter caseMethodImplementation(MethodImplementation object)
      {
        return createMethodImplementationAdapter();
      }
      @Override
      public Adapter caseEventDeclaration(EventDeclaration object)
      {
        return createEventDeclarationAdapter();
      }
      @Override
      public Adapter caseEventSpecification(EventSpecification object)
      {
        return createEventSpecificationAdapter();
      }
      @Override
      public Adapter caseEventReference(EventReference object)
      {
        return createEventReferenceAdapter();
      }
      @Override
      public Adapter caseEventPath(EventPath object)
      {
        return createEventPathAdapter();
      }
      @Override
      public Adapter caseEventCondition(EventCondition object)
      {
        return createEventConditionAdapter();
      }
      @Override
      public Adapter caseRiseExpression(RiseExpression object)
      {
        return createRiseExpressionAdapter();
      }
      @Override
      public Adapter caseFallExpression(FallExpression object)
      {
        return createFallExpressionAdapter();
      }
      @Override
      public Adapter caseElapsedExpression(ElapsedExpression object)
      {
        return createElapsedExpressionAdapter();
      }
      @Override
      public Adapter caseEveryExpression(EveryExpression object)
      {
        return createEveryExpressionAdapter();
      }
      @Override
      public Adapter caseFieldDeclaration(FieldDeclaration object)
      {
        return createFieldDeclarationAdapter();
      }
      @Override
      public Adapter caseVariableDeclaration(VariableDeclaration object)
      {
        return createVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseSampleExpression(SampleExpression object)
      {
        return createSampleExpressionAdapter();
      }
      @Override
      public Adapter caseBehaviorSpecification(BehaviorSpecification object)
      {
        return createBehaviorSpecificationAdapter();
      }
      @Override
      public Adapter caseOnDirective(OnDirective object)
      {
        return createOnDirectiveAdapter();
      }
      @Override
      public Adapter caseOnDirectiveMember(OnDirectiveMember object)
      {
        return createOnDirectiveMemberAdapter();
      }
      @Override
      public Adapter caseCallDirective(CallDirective object)
      {
        return createCallDirectiveAdapter();
      }
      @Override
      public Adapter caseEmitDirective(EmitDirective object)
      {
        return createEmitDirectiveAdapter();
      }
      @Override
      public Adapter caseWaitDirective(WaitDirective object)
      {
        return createWaitDirectiveAdapter();
      }
      @Override
      public Adapter caseDoDirective(DoDirective object)
      {
        return createDoDirectiveAdapter();
      }
      @Override
      public Adapter caseDoDirectiveMember(DoDirectiveMember object)
      {
        return createDoDirectiveMemberAdapter();
      }
      @Override
      public Adapter caseComposition(Composition object)
      {
        return createCompositionAdapter();
      }
      @Override
      public Adapter caseBehaviorInvocation(BehaviorInvocation object)
      {
        return createBehaviorInvocationAdapter();
      }
      @Override
      public Adapter caseParameterWithDeclaration(ParameterWithDeclaration object)
      {
        return createParameterWithDeclarationAdapter();
      }
      @Override
      public Adapter caseBehaviorWithDeclaration(BehaviorWithDeclaration object)
      {
        return createBehaviorWithDeclarationAdapter();
      }
      @Override
      public Adapter caseBehaviorWithMember(BehaviorWithMember object)
      {
        return createBehaviorWithMemberAdapter();
      }
      @Override
      public Adapter caseConstraintDeclaration(ConstraintDeclaration object)
      {
        return createConstraintDeclarationAdapter();
      }
      @Override
      public Adapter caseKeepConstraintDeclaration(KeepConstraintDeclaration object)
      {
        return createKeepConstraintDeclarationAdapter();
      }
      @Override
      public Adapter caseRemoveDefaultDeclaration(RemoveDefaultDeclaration object)
      {
        return createRemoveDefaultDeclarationAdapter();
      }
      @Override
      public Adapter caseUntilDirective(UntilDirective object)
      {
        return createUntilDirectiveAdapter();
      }
      @Override
      public Adapter caseArgumentListSpecification(ArgumentListSpecification object)
      {
        return createArgumentListSpecificationAdapter();
      }
      @Override
      public Adapter caseArgumentSpecification(ArgumentSpecification object)
      {
        return createArgumentSpecificationAdapter();
      }
      @Override
      public Adapter caseArgumentList(ArgumentList object)
      {
        return createArgumentListAdapter();
      }
      @Override
      public Adapter caseNamedArgument(NamedArgument object)
      {
        return createNamedArgumentAdapter();
      }
      @Override
      public Adapter casePostfixExp(PostfixExp object)
      {
        return createPostfixExpAdapter();
      }
      @Override
      public Adapter casePostfixExpTail(PostfixExpTail object)
      {
        return createPostfixExpTailAdapter();
      }
      @Override
      public Adapter caseCastExpTail(CastExpTail object)
      {
        return createCastExpTailAdapter();
      }
      @Override
      public Adapter caseTypeTestTail(TypeTestTail object)
      {
        return createTypeTestTailAdapter();
      }
      @Override
      public Adapter caseElementAccessTail(ElementAccessTail object)
      {
        return createElementAccessTailAdapter();
      }
      @Override
      public Adapter caseFieldAccessTail(FieldAccessTail object)
      {
        return createFieldAccessTailAdapter();
      }
      @Override
      public Adapter caseMethodInvocation(MethodInvocation object)
      {
        return createMethodInvocationAdapter();
      }
      @Override
      public Adapter caseParameterReference(ParameterReference object)
      {
        return createParameterReferenceAdapter();
      }
      @Override
      public Adapter casePrimaryExp(PrimaryExp object)
      {
        return createPrimaryExpAdapter();
      }
      @Override
      public Adapter caseValueExp(ValueExp object)
      {
        return createValueExpAdapter();
      }
      @Override
      public Adapter casePhysicalType(PhysicalType object)
      {
        return createPhysicalTypeAdapter();
      }
      @Override
      public Adapter caseListConstructor(ListConstructor object)
      {
        return createListConstructorAdapter();
      }
      @Override
      public Adapter caseRangeConstructor(RangeConstructor object)
      {
        return createRangeConstructorAdapter();
      }
      @Override
      public Adapter caseCondition(Condition object)
      {
        return createConditionAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseRelation(Relation object)
      {
        return createRelationAdapter();
      }
      @Override
      public Adapter caseSum(Sum object)
      {
        return createSumAdapter();
      }
      @Override
      public Adapter caseTerm(Term object)
      {
        return createTermAdapter();
      }
      @Override
      public Adapter caseFactor(Factor object)
      {
        return createFactorAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.OscFile <em>Osc File</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.OscFile
   * @generated
   */
  public Adapter createOscFileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.PreludeStatement <em>Prelude Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.PreludeStatement
   * @generated
   */
  public Adapter createPreludeStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ImportStatement <em>Import Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ImportStatement
   * @generated
   */
  public Adapter createImportStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ImportReference <em>Import Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ImportReference
   * @generated
   */
  public Adapter createImportReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.StructuredID <em>Structured ID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.StructuredID
   * @generated
   */
  public Adapter createStructuredIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.OscDeclaration <em>Osc Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.OscDeclaration
   * @generated
   */
  public Adapter createOscDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.PhysicalTypeDeclaration <em>Physical Type Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.PhysicalTypeDeclaration
   * @generated
   */
  public Adapter createPhysicalTypeDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.UnitDeclaration <em>Unit Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.UnitDeclaration
   * @generated
   */
  public Adapter createUnitDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.SIBaseUnitSpecifier <em>SI Base Unit Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.SIBaseUnitSpecifier
   * @generated
   */
  public Adapter createSIBaseUnitSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.SIBaseExponentList <em>SI Base Exponent List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.SIBaseExponentList
   * @generated
   */
  public Adapter createSIBaseExponentListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.SIBaseExponent <em>SI Base Exponent</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.SIBaseExponent
   * @generated
   */
  public Adapter createSIBaseExponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.SIUnitSpecifier <em>SI Unit Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.SIUnitSpecifier
   * @generated
   */
  public Adapter createSIUnitSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.TypeExtension <em>Type Extension</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.TypeExtension
   * @generated
   */
  public Adapter createTypeExtensionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.EnumTypeExtension <em>Enum Type Extension</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.EnumTypeExtension
   * @generated
   */
  public Adapter createEnumTypeExtensionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.StructuredTypeExtension <em>Structured Type Extension</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.StructuredTypeExtension
   * @generated
   */
  public Adapter createStructuredTypeExtensionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ExtensionMemberDeclaration <em>Extension Member Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ExtensionMemberDeclaration
   * @generated
   */
  public Adapter createExtensionMemberDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.GlobalParameterDeclaration <em>Global Parameter Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.GlobalParameterDeclaration
   * @generated
   */
  public Adapter createGlobalParameterDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ParameterDeclaration <em>Parameter Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ParameterDeclaration
   * @generated
   */
  public Adapter createParameterDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.EnumDeclaration <em>Enum Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.EnumDeclaration
   * @generated
   */
  public Adapter createEnumDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.EnumMemberDeclaration <em>Enum Member Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.EnumMemberDeclaration
   * @generated
   */
  public Adapter createEnumMemberDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.EnumValueReference <em>Enum Value Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.EnumValueReference
   * @generated
   */
  public Adapter createEnumValueReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ModifierDeclaration <em>Modifier Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ModifierDeclaration
   * @generated
   */
  public Adapter createModifierDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ActionDeclaration <em>Action Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ActionDeclaration
   * @generated
   */
  public Adapter createActionDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ActorDeclaration <em>Actor Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ActorDeclaration
   * @generated
   */
  public Adapter createActorDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.StructDeclaration <em>Struct Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.StructDeclaration
   * @generated
   */
  public Adapter createStructDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ScenarioDeclaration <em>Scenario Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ScenarioDeclaration
   * @generated
   */
  public Adapter createScenarioDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.MemberDeclaration <em>Member Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.MemberDeclaration
   * @generated
   */
  public Adapter createMemberDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.CoverageDeclaration <em>Coverage Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.CoverageDeclaration
   * @generated
   */
  public Adapter createCoverageDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.MethodDeclaration <em>Method Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.MethodDeclaration
   * @generated
   */
  public Adapter createMethodDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.MethodImplementation <em>Method Implementation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.MethodImplementation
   * @generated
   */
  public Adapter createMethodImplementationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.EventDeclaration <em>Event Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.EventDeclaration
   * @generated
   */
  public Adapter createEventDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.EventSpecification <em>Event Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.EventSpecification
   * @generated
   */
  public Adapter createEventSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.EventReference <em>Event Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.EventReference
   * @generated
   */
  public Adapter createEventReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.EventPath <em>Event Path</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.EventPath
   * @generated
   */
  public Adapter createEventPathAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.EventCondition <em>Event Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.EventCondition
   * @generated
   */
  public Adapter createEventConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.RiseExpression <em>Rise Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.RiseExpression
   * @generated
   */
  public Adapter createRiseExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.FallExpression <em>Fall Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.FallExpression
   * @generated
   */
  public Adapter createFallExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ElapsedExpression <em>Elapsed Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ElapsedExpression
   * @generated
   */
  public Adapter createElapsedExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.EveryExpression <em>Every Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.EveryExpression
   * @generated
   */
  public Adapter createEveryExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.FieldDeclaration <em>Field Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.FieldDeclaration
   * @generated
   */
  public Adapter createFieldDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.VariableDeclaration <em>Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.VariableDeclaration
   * @generated
   */
  public Adapter createVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.SampleExpression <em>Sample Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.SampleExpression
   * @generated
   */
  public Adapter createSampleExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.BehaviorSpecification <em>Behavior Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.BehaviorSpecification
   * @generated
   */
  public Adapter createBehaviorSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.OnDirective <em>On Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.OnDirective
   * @generated
   */
  public Adapter createOnDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.OnDirectiveMember <em>On Directive Member</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.OnDirectiveMember
   * @generated
   */
  public Adapter createOnDirectiveMemberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.CallDirective <em>Call Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.CallDirective
   * @generated
   */
  public Adapter createCallDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.EmitDirective <em>Emit Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.EmitDirective
   * @generated
   */
  public Adapter createEmitDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.WaitDirective <em>Wait Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.WaitDirective
   * @generated
   */
  public Adapter createWaitDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.DoDirective <em>Do Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.DoDirective
   * @generated
   */
  public Adapter createDoDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.DoDirectiveMember <em>Do Directive Member</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.DoDirectiveMember
   * @generated
   */
  public Adapter createDoDirectiveMemberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.Composition <em>Composition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.Composition
   * @generated
   */
  public Adapter createCompositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.BehaviorInvocation <em>Behavior Invocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.BehaviorInvocation
   * @generated
   */
  public Adapter createBehaviorInvocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ParameterWithDeclaration <em>Parameter With Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ParameterWithDeclaration
   * @generated
   */
  public Adapter createParameterWithDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.BehaviorWithDeclaration <em>Behavior With Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.BehaviorWithDeclaration
   * @generated
   */
  public Adapter createBehaviorWithDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.BehaviorWithMember <em>Behavior With Member</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.BehaviorWithMember
   * @generated
   */
  public Adapter createBehaviorWithMemberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ConstraintDeclaration <em>Constraint Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ConstraintDeclaration
   * @generated
   */
  public Adapter createConstraintDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.KeepConstraintDeclaration <em>Keep Constraint Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.KeepConstraintDeclaration
   * @generated
   */
  public Adapter createKeepConstraintDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.RemoveDefaultDeclaration <em>Remove Default Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.RemoveDefaultDeclaration
   * @generated
   */
  public Adapter createRemoveDefaultDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.UntilDirective <em>Until Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.UntilDirective
   * @generated
   */
  public Adapter createUntilDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ArgumentListSpecification <em>Argument List Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ArgumentListSpecification
   * @generated
   */
  public Adapter createArgumentListSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ArgumentSpecification <em>Argument Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ArgumentSpecification
   * @generated
   */
  public Adapter createArgumentSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ArgumentList <em>Argument List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ArgumentList
   * @generated
   */
  public Adapter createArgumentListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.NamedArgument <em>Named Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.NamedArgument
   * @generated
   */
  public Adapter createNamedArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.PostfixExp <em>Postfix Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.PostfixExp
   * @generated
   */
  public Adapter createPostfixExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.PostfixExpTail <em>Postfix Exp Tail</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.PostfixExpTail
   * @generated
   */
  public Adapter createPostfixExpTailAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.CastExpTail <em>Cast Exp Tail</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.CastExpTail
   * @generated
   */
  public Adapter createCastExpTailAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.TypeTestTail <em>Type Test Tail</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.TypeTestTail
   * @generated
   */
  public Adapter createTypeTestTailAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ElementAccessTail <em>Element Access Tail</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ElementAccessTail
   * @generated
   */
  public Adapter createElementAccessTailAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.FieldAccessTail <em>Field Access Tail</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.FieldAccessTail
   * @generated
   */
  public Adapter createFieldAccessTailAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.MethodInvocation <em>Method Invocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.MethodInvocation
   * @generated
   */
  public Adapter createMethodInvocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ParameterReference <em>Parameter Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ParameterReference
   * @generated
   */
  public Adapter createParameterReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.PrimaryExp <em>Primary Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.PrimaryExp
   * @generated
   */
  public Adapter createPrimaryExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ValueExp <em>Value Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ValueExp
   * @generated
   */
  public Adapter createValueExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.PhysicalType <em>Physical Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.PhysicalType
   * @generated
   */
  public Adapter createPhysicalTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.ListConstructor <em>List Constructor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.ListConstructor
   * @generated
   */
  public Adapter createListConstructorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.RangeConstructor <em>Range Constructor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.RangeConstructor
   * @generated
   */
  public Adapter createRangeConstructorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.Condition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.Condition
   * @generated
   */
  public Adapter createConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.Relation <em>Relation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.Relation
   * @generated
   */
  public Adapter createRelationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.Sum <em>Sum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.Sum
   * @generated
   */
  public Adapter createSumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.Term <em>Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.Term
   * @generated
   */
  public Adapter createTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.bmwgroup.openscenario.asam.openScenario.Factor <em>Factor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.bmwgroup.openscenario.asam.openScenario.Factor
   * @generated
   */
  public Adapter createFactorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //OpenScenarioAdapterFactory
