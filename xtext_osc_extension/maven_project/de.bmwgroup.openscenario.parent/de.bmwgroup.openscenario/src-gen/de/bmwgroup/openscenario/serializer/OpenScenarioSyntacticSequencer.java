/*
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.serializer;

import com.google.inject.Inject;
import de.bmwgroup.openscenario.services.OpenScenarioGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class OpenScenarioSyntacticSequencer extends AbstractSyntacticSequencer {

	protected OpenScenarioGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ActorDeclaration___ColonKeyword_3_0_BEGINTerminalRuleCall_3_1_ENDTerminalRuleCall_3_3__q;
	protected AbstractElementAlias match_CoverageDeclaration_CoverKeyword_0_0_or_RecordKeyword_0_1;
	protected AbstractElementAlias match_EventDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_Factor_HyphenMinusKeyword_0_q;
	protected AbstractElementAlias match_MethodImplementation_OnlyKeyword_1_q;
	protected AbstractElementAlias match_NamedArgument___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q;
	protected AbstractElementAlias match_PrimaryExp_ValueExp_BOOLTerminalRuleCall_0_or_ItKeyword_0_or_STRINGTerminalRuleCall_2;
	protected AbstractElementAlias match_Relation_NotKeyword_0_q;
	protected AbstractElementAlias match_ValueExp_BOOLTerminalRuleCall_0_or_STRINGTerminalRuleCall_2;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (OpenScenarioGrammarAccess) access;
		match_ActorDeclaration___ColonKeyword_3_0_BEGINTerminalRuleCall_3_1_ENDTerminalRuleCall_3_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getActorDeclarationAccess().getColonKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getActorDeclarationAccess().getBEGINTerminalRuleCall_3_1()), new TokenAlias(false, false, grammarAccess.getActorDeclarationAccess().getENDTerminalRuleCall_3_3()));
		match_CoverageDeclaration_CoverKeyword_0_0_or_RecordKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCoverageDeclarationAccess().getCoverKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getCoverageDeclarationAccess().getRecordKeyword_0_1()));
		match_EventDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getEventDeclarationAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getEventDeclarationAccess().getRightParenthesisKeyword_2_2()));
		match_Factor_HyphenMinusKeyword_0_q = new TokenAlias(false, true, grammarAccess.getFactorAccess().getHyphenMinusKeyword_0());
		match_MethodImplementation_OnlyKeyword_1_q = new TokenAlias(false, true, grammarAccess.getMethodImplementationAccess().getOnlyKeyword_1());
		match_NamedArgument___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getNamedArgumentAccess().getLeftParenthesisKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getNamedArgumentAccess().getRightParenthesisKeyword_3_2()));
		match_PrimaryExp_ValueExp_BOOLTerminalRuleCall_0_or_ItKeyword_0_or_STRINGTerminalRuleCall_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPrimaryExpAccess().getItKeyword_0()), new TokenAlias(false, false, grammarAccess.getValueExpAccess().getBOOLTerminalRuleCall_0()), new TokenAlias(false, false, grammarAccess.getValueExpAccess().getSTRINGTerminalRuleCall_2()));
		match_Relation_NotKeyword_0_q = new TokenAlias(false, true, grammarAccess.getRelationAccess().getNotKeyword_0());
		match_ValueExp_BOOLTerminalRuleCall_0_or_STRINGTerminalRuleCall_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getValueExpAccess().getBOOLTerminalRuleCall_0()), new TokenAlias(false, false, grammarAccess.getValueExpAccess().getSTRINGTerminalRuleCall_2()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBEGINRule())
			return getBEGINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBOOLRule())
			return getBOOLToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDRule())
			return getENDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getBEGINToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * terminal BOOL: 'true'|'false';
	 */
	protected String getBOOLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "true";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getENDToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * @Override
	 * terminal STRING:
	 * 			'"' ( '\\' . | !('\\'|'"') )* '"' |  
	 *     		"'" ( '\\' . | !('\\'|"'") )* "'" |  
	 *     		"'''" ( '\\' . | !('\\'|"'") )* "'''" |  
	 *     		'"""' ( '\\' . | !('\\'|'"') )* '"""'  
	 * ;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ActorDeclaration___ColonKeyword_3_0_BEGINTerminalRuleCall_3_1_ENDTerminalRuleCall_3_3__q.equals(syntax))
				emit_ActorDeclaration___ColonKeyword_3_0_BEGINTerminalRuleCall_3_1_ENDTerminalRuleCall_3_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CoverageDeclaration_CoverKeyword_0_0_or_RecordKeyword_0_1.equals(syntax))
				emit_CoverageDeclaration_CoverKeyword_0_0_or_RecordKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EventDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_EventDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Factor_HyphenMinusKeyword_0_q.equals(syntax))
				emit_Factor_HyphenMinusKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MethodImplementation_OnlyKeyword_1_q.equals(syntax))
				emit_MethodImplementation_OnlyKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NamedArgument___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q.equals(syntax))
				emit_NamedArgument___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExp_ValueExp_BOOLTerminalRuleCall_0_or_ItKeyword_0_or_STRINGTerminalRuleCall_2.equals(syntax))
				emit_PrimaryExp_ValueExp_BOOLTerminalRuleCall_0_or_ItKeyword_0_or_STRINGTerminalRuleCall_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Relation_NotKeyword_0_q.equals(syntax))
				emit_Relation_NotKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ValueExp_BOOLTerminalRuleCall_0_or_STRINGTerminalRuleCall_2.equals(syntax))
				emit_ValueExp_BOOLTerminalRuleCall_0_or_STRINGTerminalRuleCall_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (':' BEGIN END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     baseActorName=ID (ambiguity) (rule end)
	 *     enumReference=EnumValueReference ')' (ambiguity) (rule end)
	 *     fieldName=ID '==' BOOL ')' (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ActorDeclaration___ColonKeyword_3_0_BEGINTerminalRuleCall_3_1_ENDTerminalRuleCall_3_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'cover' | 'record'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' argumentList=ArgumentList
	 
	 * </pre>
	 */
	protected void emit_CoverageDeclaration_CoverKeyword_0_0_or_RecordKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     eventName=ID (ambiguity) 'is' eventSpecification=EventSpecification
	 *     eventName=ID (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_EventDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '-'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'not'? (ambiguity) primaryExp=PrimaryExp
	 *     (rule start) (ambiguity) primaryExp=PrimaryExp
	 
	 * </pre>
	 */
	protected void emit_Factor_HyphenMinusKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'only'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'is' (ambiguity) 'expression' expression=Expression
	 *     (rule start) 'is' (ambiguity) 'external' structuredID=StructuredID
	 *     (rule start) 'is' (ambiguity) 'undefined' (rule start)
	 
	 * </pre>
	 */
	protected void emit_MethodImplementation_OnlyKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     expression=Expression (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_NamedArgument___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'it' | BOOL | STRING
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_PrimaryExp_ValueExp_BOOLTerminalRuleCall_0_or_ItKeyword_0_or_STRINGTerminalRuleCall_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'not'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '-'? primaryExp=PrimaryExp
	 
	 * </pre>
	 */
	protected void emit_Relation_NotKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     BOOL | STRING
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_ValueExp_BOOLTerminalRuleCall_0_or_STRINGTerminalRuleCall_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
