/*
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OpenScenarioGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class OscFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.OscFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPreludeStatementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPreludeStatementsPreludeStatementParserRuleCall_0_0 = (RuleCall)cPreludeStatementsAssignment_0.eContents().get(0);
		private final Assignment cOscDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOscDeclarationsOscDeclarationParserRuleCall_1_0 = (RuleCall)cOscDeclarationsAssignment_1.eContents().get(0);
		
		//OscFile:
		//    preludeStatements+=PreludeStatement*
		//    oscDeclarations+=OscDeclaration*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//preludeStatements+=PreludeStatement*
		//oscDeclarations+=OscDeclaration*
		public Group getGroup() { return cGroup; }
		
		//preludeStatements+=PreludeStatement*
		public Assignment getPreludeStatementsAssignment_0() { return cPreludeStatementsAssignment_0; }
		
		//PreludeStatement
		public RuleCall getPreludeStatementsPreludeStatementParserRuleCall_0_0() { return cPreludeStatementsPreludeStatementParserRuleCall_0_0; }
		
		//oscDeclarations+=OscDeclaration*
		public Assignment getOscDeclarationsAssignment_1() { return cOscDeclarationsAssignment_1; }
		
		//OscDeclaration
		public RuleCall getOscDeclarationsOscDeclarationParserRuleCall_1_0() { return cOscDeclarationsOscDeclarationParserRuleCall_1_0; }
	}
	public class PreludeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.PreludeStatement");
		private final RuleCall cImportStatementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PreludeStatement:
		//    ImportStatement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ImportStatement
		public RuleCall getImportStatementParserRuleCall() { return cImportStatementParserRuleCall; }
	}
	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportReferenceImportReferenceParserRuleCall_1_0 = (RuleCall)cImportReferenceAssignment_1.eContents().get(0);
		
		//ImportStatement:
		//    'import' importReference=ImportReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importReference=ImportReference
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importReference=ImportReference
		public Assignment getImportReferenceAssignment_1() { return cImportReferenceAssignment_1; }
		
		//ImportReference
		public RuleCall getImportReferenceImportReferenceParserRuleCall_1_0() { return cImportReferenceImportReferenceParserRuleCall_1_0; }
	}
	public class ImportReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ImportReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructuredIDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ImportReference:
		//    STRING | StructuredID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | StructuredID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//StructuredID
		public RuleCall getStructuredIDParserRuleCall_1() { return cStructuredIDParserRuleCall_1; }
	}
	public class StructuredIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.StructuredID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_1_0 = (RuleCall)cIdentifierAssignment_1_1.eContents().get(0);
		
		//StructuredID:
		//    identifier+=ID ('.' identifier+=ID)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier+=ID ('.' identifier+=ID)*
		public Group getGroup() { return cGroup; }
		
		//identifier+=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }
		
		//('.' identifier+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//identifier+=ID
		public Assignment getIdentifierAssignment_1_1() { return cIdentifierAssignment_1_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_1_0() { return cIdentifierIDTerminalRuleCall_1_1_0; }
	}
	public class OscDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.OscDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScenarioDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActorDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cActionDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cModifierDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEnumDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cGlobalParameterDeclarationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTypeExtensionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cUnitDeclarationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cPhysicalTypeDeclarationParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//OscDeclaration:
		//    ScenarioDeclaration | StructDeclaration | ActorDeclaration | ActionDeclaration
		//    | ModifierDeclaration | EnumDeclaration | GlobalParameterDeclaration | TypeExtension
		//    | UnitDeclaration | PhysicalTypeDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ScenarioDeclaration | StructDeclaration | ActorDeclaration | ActionDeclaration
		//| ModifierDeclaration | EnumDeclaration | GlobalParameterDeclaration | TypeExtension
		//| UnitDeclaration | PhysicalTypeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ScenarioDeclaration
		public RuleCall getScenarioDeclarationParserRuleCall_0() { return cScenarioDeclarationParserRuleCall_0; }
		
		//StructDeclaration
		public RuleCall getStructDeclarationParserRuleCall_1() { return cStructDeclarationParserRuleCall_1; }
		
		//ActorDeclaration
		public RuleCall getActorDeclarationParserRuleCall_2() { return cActorDeclarationParserRuleCall_2; }
		
		//ActionDeclaration
		public RuleCall getActionDeclarationParserRuleCall_3() { return cActionDeclarationParserRuleCall_3; }
		
		//ModifierDeclaration
		public RuleCall getModifierDeclarationParserRuleCall_4() { return cModifierDeclarationParserRuleCall_4; }
		
		//EnumDeclaration
		public RuleCall getEnumDeclarationParserRuleCall_5() { return cEnumDeclarationParserRuleCall_5; }
		
		//GlobalParameterDeclaration
		public RuleCall getGlobalParameterDeclarationParserRuleCall_6() { return cGlobalParameterDeclarationParserRuleCall_6; }
		
		//TypeExtension
		public RuleCall getTypeExtensionParserRuleCall_7() { return cTypeExtensionParserRuleCall_7; }
		
		//UnitDeclaration
		public RuleCall getUnitDeclarationParserRuleCall_8() { return cUnitDeclarationParserRuleCall_8; }
		
		//PhysicalTypeDeclaration
		public RuleCall getPhysicalTypeDeclarationParserRuleCall_9() { return cPhysicalTypeDeclarationParserRuleCall_9; }
	}
	public class PhysicalTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.PhysicalTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPhysicalTypeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPhysicalTypeNameIDTerminalRuleCall_1_0 = (RuleCall)cPhysicalTypeNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBaseUnitSpecifierAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBaseUnitSpecifierSIBaseUnitSpecifierParserRuleCall_3_0 = (RuleCall)cBaseUnitSpecifierAssignment_3.eContents().get(0);
		
		////PhysicalTypeDeclaration
		//PhysicalTypeDeclaration:
		//    'type' physicalTypeName=ID 'is' baseUnitSpecifier=SIBaseUnitSpecifier
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' physicalTypeName=ID 'is' baseUnitSpecifier=SIBaseUnitSpecifier
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//physicalTypeName=ID
		public Assignment getPhysicalTypeNameAssignment_1() { return cPhysicalTypeNameAssignment_1; }
		
		//ID
		public RuleCall getPhysicalTypeNameIDTerminalRuleCall_1_0() { return cPhysicalTypeNameIDTerminalRuleCall_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//baseUnitSpecifier=SIBaseUnitSpecifier
		public Assignment getBaseUnitSpecifierAssignment_3() { return cBaseUnitSpecifierAssignment_3; }
		
		//SIBaseUnitSpecifier
		public RuleCall getBaseUnitSpecifierSIBaseUnitSpecifierParserRuleCall_3_0() { return cBaseUnitSpecifierSIBaseUnitSpecifierParserRuleCall_3_0; }
	}
	public class UnitDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.UnitDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUnitNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitNameIDTerminalRuleCall_1_0 = (RuleCall)cUnitNameAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPhysicalTypeNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPhysicalTypeNameIDTerminalRuleCall_3_0 = (RuleCall)cPhysicalTypeNameAssignment_3.eContents().get(0);
		private final Keyword cIsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cUnitSpecifierAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUnitSpecifierSIUnitSpecifierParserRuleCall_5_0 = (RuleCall)cUnitSpecifierAssignment_5.eContents().get(0);
		
		//// Unit declaration
		//UnitDeclaration:
		//    'unit' unitName=ID 'of' physicalTypeName=ID 'is' unitSpecifier=SIUnitSpecifier;
		@Override public ParserRule getRule() { return rule; }
		
		//'unit' unitName=ID 'of' physicalTypeName=ID 'is' unitSpecifier=SIUnitSpecifier
		public Group getGroup() { return cGroup; }
		
		//'unit'
		public Keyword getUnitKeyword_0() { return cUnitKeyword_0; }
		
		//unitName=ID
		public Assignment getUnitNameAssignment_1() { return cUnitNameAssignment_1; }
		
		//ID
		public RuleCall getUnitNameIDTerminalRuleCall_1_0() { return cUnitNameIDTerminalRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//physicalTypeName=ID
		public Assignment getPhysicalTypeNameAssignment_3() { return cPhysicalTypeNameAssignment_3; }
		
		//ID
		public RuleCall getPhysicalTypeNameIDTerminalRuleCall_3_0() { return cPhysicalTypeNameIDTerminalRuleCall_3_0; }
		
		//'is'
		public Keyword getIsKeyword_4() { return cIsKeyword_4; }
		
		//unitSpecifier=SIUnitSpecifier
		public Assignment getUnitSpecifierAssignment_5() { return cUnitSpecifierAssignment_5; }
		
		//SIUnitSpecifier
		public RuleCall getUnitSpecifierSIUnitSpecifierParserRuleCall_5_0() { return cUnitSpecifierSIUnitSpecifierParserRuleCall_5_0; }
	}
	public class SIBaseUnitSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.SIBaseUnitSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSIKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSIBaseExponentListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSIBaseExponentListSIBaseExponentListParserRuleCall_2_0 = (RuleCall)cSIBaseExponentListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SIBaseUnitSpecifier:
		//    'SI' '(' SIBaseExponentList=SIBaseExponentList ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'SI' '(' SIBaseExponentList=SIBaseExponentList ')'
		public Group getGroup() { return cGroup; }
		
		//'SI'
		public Keyword getSIKeyword_0() { return cSIKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//SIBaseExponentList=SIBaseExponentList
		public Assignment getSIBaseExponentListAssignment_2() { return cSIBaseExponentListAssignment_2; }
		
		//SIBaseExponentList
		public RuleCall getSIBaseExponentListSIBaseExponentListParserRuleCall_2_0() { return cSIBaseExponentListSIBaseExponentListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SIBaseExponentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.SIBaseExponentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSIBaseExponentListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSIBaseExponentListSIBaseExponentParserRuleCall_0_0 = (RuleCall)cSIBaseExponentListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNextSIBaseExponentListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextSIBaseExponentListSIBaseExponentParserRuleCall_1_1_0 = (RuleCall)cNextSIBaseExponentListAssignment_1_1.eContents().get(0);
		
		//SIBaseExponentList:
		//    SIBaseExponentList=SIBaseExponent (',' NextSIBaseExponentList+=SIBaseExponent)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SIBaseExponentList=SIBaseExponent (',' NextSIBaseExponentList+=SIBaseExponent)*
		public Group getGroup() { return cGroup; }
		
		//SIBaseExponentList=SIBaseExponent
		public Assignment getSIBaseExponentListAssignment_0() { return cSIBaseExponentListAssignment_0; }
		
		//SIBaseExponent
		public RuleCall getSIBaseExponentListSIBaseExponentParserRuleCall_0_0() { return cSIBaseExponentListSIBaseExponentParserRuleCall_0_0; }
		
		//(',' NextSIBaseExponentList+=SIBaseExponent)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//NextSIBaseExponentList+=SIBaseExponent
		public Assignment getNextSIBaseExponentListAssignment_1_1() { return cNextSIBaseExponentListAssignment_1_1; }
		
		//SIBaseExponent
		public RuleCall getNextSIBaseExponentListSIBaseExponentParserRuleCall_1_1_0() { return cNextSIBaseExponentListSIBaseExponentParserRuleCall_1_1_0; }
	}
	public class SIBaseExponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.SIBaseExponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnitSIBaseUnitNameParserRuleCall_0_0 = (RuleCall)cUnitAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNumberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNumberINTEGERTerminalRuleCall_2_0 = (RuleCall)cNumberAssignment_2.eContents().get(0);
		
		//SIBaseExponent:
		//    unit=SIBaseUnitName ':' number=INTEGER;
		@Override public ParserRule getRule() { return rule; }
		
		//unit=SIBaseUnitName ':' number=INTEGER
		public Group getGroup() { return cGroup; }
		
		//unit=SIBaseUnitName
		public Assignment getUnitAssignment_0() { return cUnitAssignment_0; }
		
		//SIBaseUnitName
		public RuleCall getUnitSIBaseUnitNameParserRuleCall_0_0() { return cUnitSIBaseUnitNameParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//number=INTEGER
		public Assignment getNumberAssignment_2() { return cNumberAssignment_2; }
		
		//INTEGER
		public RuleCall getNumberINTEGERTerminalRuleCall_2_0() { return cNumberINTEGERTerminalRuleCall_2_0; }
	}
	public class SIUnitSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.SIUnitSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSIKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSIBaseExponentListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSIBaseExponentListSIBaseExponentListParserRuleCall_2_0 = (RuleCall)cSIBaseExponentListAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSIfactorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSIfactorSIUnitFactorParserRuleCall_3_1_0 = (RuleCall)cSIfactorAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSIUnitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSIUnitSIUnitOffsetParserRuleCall_4_1_0 = (RuleCall)cSIUnitAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SIUnitSpecifier:
		//    'SI' '(' SIBaseExponentList=SIBaseExponentList (',' SIfactor=SIUnitFactor)? (',' SIUnit=SIUnitOffset)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'SI' '(' SIBaseExponentList=SIBaseExponentList (',' SIfactor=SIUnitFactor)? (',' SIUnit=SIUnitOffset)? ')'
		public Group getGroup() { return cGroup; }
		
		//'SI'
		public Keyword getSIKeyword_0() { return cSIKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//SIBaseExponentList=SIBaseExponentList
		public Assignment getSIBaseExponentListAssignment_2() { return cSIBaseExponentListAssignment_2; }
		
		//SIBaseExponentList
		public RuleCall getSIBaseExponentListSIBaseExponentListParserRuleCall_2_0() { return cSIBaseExponentListSIBaseExponentListParserRuleCall_2_0; }
		
		//(',' SIfactor=SIUnitFactor)?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//SIfactor=SIUnitFactor
		public Assignment getSIfactorAssignment_3_1() { return cSIfactorAssignment_3_1; }
		
		//SIUnitFactor
		public RuleCall getSIfactorSIUnitFactorParserRuleCall_3_1_0() { return cSIfactorSIUnitFactorParserRuleCall_3_1_0; }
		
		//(',' SIUnit=SIUnitOffset)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//SIUnit=SIUnitOffset
		public Assignment getSIUnitAssignment_4_1() { return cSIUnitAssignment_4_1; }
		
		//SIUnitOffset
		public RuleCall getSIUnitSIUnitOffsetParserRuleCall_4_1_0() { return cSIUnitSIUnitOffsetParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class SIUnitFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.SIUnitFactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFactorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cFLOATTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cINTEGERTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//SIUnitFactor:
		//    'factor' ':' (FLOAT | INTEGER);
		@Override public ParserRule getRule() { return rule; }
		
		//'factor' ':' (FLOAT | INTEGER)
		public Group getGroup() { return cGroup; }
		
		//'factor'
		public Keyword getFactorKeyword_0() { return cFactorKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(FLOAT | INTEGER)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_2_0() { return cFLOATTerminalRuleCall_2_0; }
		
		//INTEGER
		public RuleCall getINTEGERTerminalRuleCall_2_1() { return cINTEGERTerminalRuleCall_2_1; }
	}
	public class SIUnitOffsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.SIUnitOffset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOffsetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cFLOATTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cINTEGERTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//SIUnitOffset:
		//    'offset' ':' (FLOAT | INTEGER);
		@Override public ParserRule getRule() { return rule; }
		
		//'offset' ':' (FLOAT | INTEGER)
		public Group getGroup() { return cGroup; }
		
		//'offset'
		public Keyword getOffsetKeyword_0() { return cOffsetKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(FLOAT | INTEGER)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_2_0() { return cFLOATTerminalRuleCall_2_0; }
		
		//INTEGER
		public RuleCall getINTEGERTerminalRuleCall_2_1() { return cINTEGERTerminalRuleCall_2_1; }
	}
	public class SIBaseUnitNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.SIBaseUnitName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cKgKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cKKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMolKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cCdKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cRadKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cKphKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//SIBaseUnitName:
		//    'kg' | 'm' | 's' | 'A' | 'K' | 'mol' | 'cd' | 'rad' | 'kph';
		@Override public ParserRule getRule() { return rule; }
		
		//'kg' | 'm' | 's' | 'A' | 'K' | 'mol' | 'cd' | 'rad' | 'kph'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'kg'
		public Keyword getKgKeyword_0() { return cKgKeyword_0; }
		
		//'m'
		public Keyword getMKeyword_1() { return cMKeyword_1; }
		
		//'s'
		public Keyword getSKeyword_2() { return cSKeyword_2; }
		
		//'A'
		public Keyword getAKeyword_3() { return cAKeyword_3; }
		
		//'K'
		public Keyword getKKeyword_4() { return cKKeyword_4; }
		
		//'mol'
		public Keyword getMolKeyword_5() { return cMolKeyword_5; }
		
		//'cd'
		public Keyword getCdKeyword_6() { return cCdKeyword_6; }
		
		//'rad'
		public Keyword getRadKeyword_7() { return cRadKeyword_7; }
		
		//'kph'
		public Keyword getKphKeyword_8() { return cKphKeyword_8; }
	}
	public class TypeExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.TypeExtension");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumTypeExtensionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructuredTypeExtensionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Type extension
		//TypeExtension:
		//    EnumTypeExtension | StructuredTypeExtension;
		@Override public ParserRule getRule() { return rule; }
		
		//EnumTypeExtension | StructuredTypeExtension
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EnumTypeExtension
		public RuleCall getEnumTypeExtensionParserRuleCall_0() { return cEnumTypeExtensionParserRuleCall_0; }
		
		//StructuredTypeExtension
		public RuleCall getStructuredTypeExtensionParserRuleCall_1() { return cStructuredTypeExtensionParserRuleCall_1; }
	}
	public class EnumTypeExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.EnumTypeExtension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnumNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnumNameIDTerminalRuleCall_1_0 = (RuleCall)cEnumNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEnumMemberDeclsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEnumMemberDeclsEnumMemberDeclarationParserRuleCall_4_0 = (RuleCall)cEnumMemberDeclsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cEnumMemberDeclsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEnumMemberDeclsEnumMemberDeclarationParserRuleCall_5_1_0 = (RuleCall)cEnumMemberDeclsAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EnumTypeExtension:
		//    'extend' enumName=ID ':' '[' enumMemberDecls+=EnumMemberDeclaration (',' enumMemberDecls+=EnumMemberDeclaration)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'extend' enumName=ID ':' '[' enumMemberDecls+=EnumMemberDeclaration (',' enumMemberDecls+=EnumMemberDeclaration)* ']'
		public Group getGroup() { return cGroup; }
		
		//'extend'
		public Keyword getExtendKeyword_0() { return cExtendKeyword_0; }
		
		//enumName=ID
		public Assignment getEnumNameAssignment_1() { return cEnumNameAssignment_1; }
		
		//ID
		public RuleCall getEnumNameIDTerminalRuleCall_1_0() { return cEnumNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//enumMemberDecls+=EnumMemberDeclaration
		public Assignment getEnumMemberDeclsAssignment_4() { return cEnumMemberDeclsAssignment_4; }
		
		//EnumMemberDeclaration
		public RuleCall getEnumMemberDeclsEnumMemberDeclarationParserRuleCall_4_0() { return cEnumMemberDeclsEnumMemberDeclarationParserRuleCall_4_0; }
		
		//(',' enumMemberDecls+=EnumMemberDeclaration)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//enumMemberDecls+=EnumMemberDeclaration
		public Assignment getEnumMemberDeclsAssignment_5_1() { return cEnumMemberDeclsAssignment_5_1; }
		
		//EnumMemberDeclaration
		public RuleCall getEnumMemberDeclsEnumMemberDeclarationParserRuleCall_5_1_0() { return cEnumMemberDeclsEnumMemberDeclarationParserRuleCall_5_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class StructuredTypeExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.StructuredTypeExtension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExtendableTypeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExtendableTypeNameIDTerminalRuleCall_1_0 = (RuleCall)cExtendableTypeNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cExtensionMemberDeclsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExtensionMemberDeclsExtensionMemberDeclarationParserRuleCall_4_0 = (RuleCall)cExtensionMemberDeclsAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//StructuredTypeExtension:
		//    'extend' extendableTypeName=ID ':'
		//    BEGIN
		//        (extensionMemberDecls+=ExtensionMemberDeclaration)*
		//    END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'extend' extendableTypeName=ID ':'
		//BEGIN
		//    (extensionMemberDecls+=ExtensionMemberDeclaration)*
		//END
		public Group getGroup() { return cGroup; }
		
		//'extend'
		public Keyword getExtendKeyword_0() { return cExtendKeyword_0; }
		
		//extendableTypeName=ID
		public Assignment getExtendableTypeNameAssignment_1() { return cExtendableTypeNameAssignment_1; }
		
		//ID
		public RuleCall getExtendableTypeNameIDTerminalRuleCall_1_0() { return cExtendableTypeNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//(extensionMemberDecls+=ExtensionMemberDeclaration)*
		public Assignment getExtensionMemberDeclsAssignment_4() { return cExtensionMemberDeclsAssignment_4; }
		
		//ExtensionMemberDeclaration
		public RuleCall getExtensionMemberDeclsExtensionMemberDeclarationParserRuleCall_4_0() { return cExtensionMemberDeclsExtensionMemberDeclarationParserRuleCall_4_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class ExtensionMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ExtensionMemberDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMemberDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBehaviorSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExtensionMemberDeclaration:
		//     MemberDeclaration | BehaviorSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//MemberDeclaration | BehaviorSpecification
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MemberDeclaration
		public RuleCall getMemberDeclarationParserRuleCall_0() { return cMemberDeclarationParserRuleCall_0; }
		
		//BehaviorSpecification
		public RuleCall getBehaviorSpecificationParserRuleCall_1() { return cBehaviorSpecificationParserRuleCall_1; }
	}
	public class GlobalParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.GlobalParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParameterDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterDeclarationParameterDeclarationParserRuleCall_1_0 = (RuleCall)cParameterDeclarationAssignment_1.eContents().get(0);
		
		////GlobalParameterDeclaration
		//GlobalParameterDeclaration:
		//    'global' parameterDeclaration=ParameterDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'global' parameterDeclaration=ParameterDeclaration
		public Group getGroup() { return cGroup; }
		
		//'global'
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }
		
		//parameterDeclaration=ParameterDeclaration
		public Assignment getParameterDeclarationAssignment_1() { return cParameterDeclarationAssignment_1; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationParameterDeclarationParserRuleCall_1_0() { return cParameterDeclarationParameterDeclarationParserRuleCall_1_0; }
	}
	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFieldNameIDTerminalRuleCall_0_0 = (RuleCall)cFieldNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNextfieldNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextfieldNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNextfieldNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeDeclaratorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDeclaratorTypeDeclaratorParserRuleCall_3_0 = (RuleCall)cTypeDeclaratorAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_4_1_0 = (RuleCall)cDefaultValueAssignment_4_1.eContents().get(0);
		private final Assignment cWithDeclarationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWithDeclarationParameterWithDeclarationParserRuleCall_5_0 = (RuleCall)cWithDeclarationAssignment_5.eContents().get(0);
		
		//ParameterDeclaration:
		//    fieldName=ID (',' NextfieldName+=ID)* ':' typeDeclarator=TypeDeclarator
		//    ('=' defaultValue=Expression)? (withDeclaration=ParameterWithDeclaration)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//fieldName=ID (',' NextfieldName+=ID)* ':' typeDeclarator=TypeDeclarator
		//('=' defaultValue=Expression)? (withDeclaration=ParameterWithDeclaration)?
		public Group getGroup() { return cGroup; }
		
		//fieldName=ID
		public Assignment getFieldNameAssignment_0() { return cFieldNameAssignment_0; }
		
		//ID
		public RuleCall getFieldNameIDTerminalRuleCall_0_0() { return cFieldNameIDTerminalRuleCall_0_0; }
		
		//(',' NextfieldName+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//NextfieldName+=ID
		public Assignment getNextfieldNameAssignment_1_1() { return cNextfieldNameAssignment_1_1; }
		
		//ID
		public RuleCall getNextfieldNameIDTerminalRuleCall_1_1_0() { return cNextfieldNameIDTerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//typeDeclarator=TypeDeclarator
		public Assignment getTypeDeclaratorAssignment_3() { return cTypeDeclaratorAssignment_3; }
		
		//TypeDeclarator
		public RuleCall getTypeDeclaratorTypeDeclaratorParserRuleCall_3_0() { return cTypeDeclaratorTypeDeclaratorParserRuleCall_3_0; }
		
		//('=' defaultValue=Expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_4_1() { return cDefaultValueAssignment_4_1; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_4_1_0() { return cDefaultValueExpressionParserRuleCall_4_1_0; }
		
		//(withDeclaration=ParameterWithDeclaration)?
		public Assignment getWithDeclarationAssignment_5() { return cWithDeclarationAssignment_5; }
		
		//ParameterWithDeclaration
		public RuleCall getWithDeclarationParameterWithDeclarationParserRuleCall_5_0() { return cWithDeclarationParameterWithDeclarationParserRuleCall_5_0; }
	}
	public class TypeDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.TypeDeclarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNonAggregateTypeDeclaratorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListTypeDeclaratorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeDeclarator:
		//    NonAggregateTypeDeclarator | ListTypeDeclarator
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NonAggregateTypeDeclarator | ListTypeDeclarator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NonAggregateTypeDeclarator
		public RuleCall getNonAggregateTypeDeclaratorParserRuleCall_0() { return cNonAggregateTypeDeclaratorParserRuleCall_0; }
		
		//ListTypeDeclarator
		public RuleCall getListTypeDeclaratorParserRuleCall_1() { return cListTypeDeclaratorParserRuleCall_1; }
	}
	public class NonAggregateTypeDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.NonAggregateTypeDeclarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NonAggregateTypeDeclarator:
		//    PrimitiveType | ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveType | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ListTypeDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ListTypeDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNonAggregateTypeDeclaratorParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ListTypeDeclarator:
		//    'list' 'of' NonAggregateTypeDeclarator
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'list' 'of' NonAggregateTypeDeclarator
		public Group getGroup() { return cGroup; }
		
		//'list'
		public Keyword getListKeyword_0() { return cListKeyword_0; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//NonAggregateTypeDeclarator
		public RuleCall getNonAggregateTypeDeclaratorParserRuleCall_2() { return cNonAggregateTypeDeclaratorParserRuleCall_2; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUintKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFloatKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBoolKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cStringKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//PrimitiveType:
		//    'int' | 'uint' | 'float' | 'bool' | 'string'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'int' | 'uint' | 'float' | 'bool' | 'string'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//'uint'
		public Keyword getUintKeyword_1() { return cUintKeyword_1; }
		
		//'float'
		public Keyword getFloatKeyword_2() { return cFloatKeyword_2; }
		
		//'bool'
		public Keyword getBoolKeyword_3() { return cBoolKeyword_3; }
		
		//'string'
		public Keyword getStringKeyword_4() { return cStringKeyword_4; }
	}
	public class EnumDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.EnumDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnumNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnumNameIDTerminalRuleCall_1_0 = (RuleCall)cEnumNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEnumMemberDeclsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEnumMemberDeclsEnumMemberDeclarationParserRuleCall_4_0 = (RuleCall)cEnumMemberDeclsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cEnumMemberDeclsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEnumMemberDeclsEnumMemberDeclarationParserRuleCall_5_1_0 = (RuleCall)cEnumMemberDeclsAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////EnumDeclaration
		//EnumDeclaration:
		//    'enum' enumName=ID ':' '[' enumMemberDecls+=EnumMemberDeclaration (',' enumMemberDecls+=EnumMemberDeclaration)* ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' enumName=ID ':' '[' enumMemberDecls+=EnumMemberDeclaration (',' enumMemberDecls+=EnumMemberDeclaration)* ']'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//enumName=ID
		public Assignment getEnumNameAssignment_1() { return cEnumNameAssignment_1; }
		
		//ID
		public RuleCall getEnumNameIDTerminalRuleCall_1_0() { return cEnumNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//enumMemberDecls+=EnumMemberDeclaration
		public Assignment getEnumMemberDeclsAssignment_4() { return cEnumMemberDeclsAssignment_4; }
		
		//EnumMemberDeclaration
		public RuleCall getEnumMemberDeclsEnumMemberDeclarationParserRuleCall_4_0() { return cEnumMemberDeclsEnumMemberDeclarationParserRuleCall_4_0; }
		
		//(',' enumMemberDecls+=EnumMemberDeclaration)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//enumMemberDecls+=EnumMemberDeclaration
		public Assignment getEnumMemberDeclsAssignment_5_1() { return cEnumMemberDeclsAssignment_5_1; }
		
		//EnumMemberDeclaration
		public RuleCall getEnumMemberDeclsEnumMemberDeclarationParserRuleCall_5_1_0() { return cEnumMemberDeclsEnumMemberDeclarationParserRuleCall_5_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class EnumMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.EnumMemberDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnumMemberNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEnumMemberNameIDTerminalRuleCall_0_0 = (RuleCall)cEnumMemberNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEnumMemberValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEnumMemberValueINTEGERTerminalRuleCall_1_1_0 = (RuleCall)cEnumMemberValueAssignment_1_1.eContents().get(0);
		
		//EnumMemberDeclaration:
		//    enumMemberName=ID ( '=' enumMemberValue= INTEGER )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//enumMemberName=ID ( '=' enumMemberValue= INTEGER )?
		public Group getGroup() { return cGroup; }
		
		//enumMemberName=ID
		public Assignment getEnumMemberNameAssignment_0() { return cEnumMemberNameAssignment_0; }
		
		//ID
		public RuleCall getEnumMemberNameIDTerminalRuleCall_0_0() { return cEnumMemberNameIDTerminalRuleCall_0_0; }
		
		//( '=' enumMemberValue= INTEGER )?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//enumMemberValue= INTEGER
		public Assignment getEnumMemberValueAssignment_1_1() { return cEnumMemberValueAssignment_1_1; }
		
		//INTEGER
		public RuleCall getEnumMemberValueINTEGERTerminalRuleCall_1_1_0() { return cEnumMemberValueINTEGERTerminalRuleCall_1_1_0; }
	}
	public class EnumValueReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.EnumValueReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cEnumNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cEnumNameIDTerminalRuleCall_0_0_0 = (RuleCall)cEnumNameAssignment_0_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cEnumMemberNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnumMemberNameIDTerminalRuleCall_1_0 = (RuleCall)cEnumMemberNameAssignment_1.eContents().get(0);
		
		//EnumValueReference:
		//    (enumName=ID '!')? enumMemberName=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(enumName=ID '!')? enumMemberName=ID
		public Group getGroup() { return cGroup; }
		
		//(enumName=ID '!')?
		public Group getGroup_0() { return cGroup_0; }
		
		//enumName=ID
		public Assignment getEnumNameAssignment_0_0() { return cEnumNameAssignment_0_0; }
		
		//ID
		public RuleCall getEnumNameIDTerminalRuleCall_0_0_0() { return cEnumNameIDTerminalRuleCall_0_0_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0_1() { return cExclamationMarkKeyword_0_1; }
		
		//enumMemberName=ID
		public Assignment getEnumMemberNameAssignment_1() { return cEnumMemberNameAssignment_1; }
		
		//ID
		public RuleCall getEnumMemberNameIDTerminalRuleCall_1_0() { return cEnumMemberNameIDTerminalRuleCall_1_0; }
	}
	public class ModifierDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ModifierDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModifierKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cActorNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cActorNameIDTerminalRuleCall_1_0_0 = (RuleCall)cActorNameAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cModifierNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModifierNameIDTerminalRuleCall_2_0 = (RuleCall)cModifierNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cQualifiedBehaviorNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cQualifiedBehaviorNameIDTerminalRuleCall_3_1_0 = (RuleCall)cQualifiedBehaviorNameAssignment_3_1.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cBEGINTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cScenarioMemberDeclAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cScenarioMemberDeclMemberDeclarationParserRuleCall_6_0_0 = (RuleCall)cScenarioMemberDeclAssignment_6_0.eContents().get(0);
		private final Assignment cBehaviorSpecificationAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cBehaviorSpecificationOnDirectiveParserRuleCall_6_1_0 = (RuleCall)cBehaviorSpecificationAssignment_6_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		////ModifierDeclaration
		//ModifierDeclaration:
		//    'modifier' (actorName=ID '.')? modifierName=ID
		//    ('of' qualifiedBehaviorName=ID)? ':'
		//    BEGIN
		//        (ScenarioMemberDecl+=MemberDeclaration | BehaviorSpecification+=OnDirective)*
		//    END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'modifier' (actorName=ID '.')? modifierName=ID
		//('of' qualifiedBehaviorName=ID)? ':'
		//BEGIN
		//    (ScenarioMemberDecl+=MemberDeclaration | BehaviorSpecification+=OnDirective)*
		//END
		public Group getGroup() { return cGroup; }
		
		//'modifier'
		public Keyword getModifierKeyword_0() { return cModifierKeyword_0; }
		
		//(actorName=ID '.')?
		public Group getGroup_1() { return cGroup_1; }
		
		//actorName=ID
		public Assignment getActorNameAssignment_1_0() { return cActorNameAssignment_1_0; }
		
		//ID
		public RuleCall getActorNameIDTerminalRuleCall_1_0_0() { return cActorNameIDTerminalRuleCall_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//modifierName=ID
		public Assignment getModifierNameAssignment_2() { return cModifierNameAssignment_2; }
		
		//ID
		public RuleCall getModifierNameIDTerminalRuleCall_2_0() { return cModifierNameIDTerminalRuleCall_2_0; }
		
		//('of' qualifiedBehaviorName=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'of'
		public Keyword getOfKeyword_3_0() { return cOfKeyword_3_0; }
		
		//qualifiedBehaviorName=ID
		public Assignment getQualifiedBehaviorNameAssignment_3_1() { return cQualifiedBehaviorNameAssignment_3_1; }
		
		//ID
		public RuleCall getQualifiedBehaviorNameIDTerminalRuleCall_3_1_0() { return cQualifiedBehaviorNameIDTerminalRuleCall_3_1_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_5() { return cBEGINTerminalRuleCall_5; }
		
		//(ScenarioMemberDecl+=MemberDeclaration | BehaviorSpecification+=OnDirective)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//ScenarioMemberDecl+=MemberDeclaration
		public Assignment getScenarioMemberDeclAssignment_6_0() { return cScenarioMemberDeclAssignment_6_0; }
		
		//MemberDeclaration
		public RuleCall getScenarioMemberDeclMemberDeclarationParserRuleCall_6_0_0() { return cScenarioMemberDeclMemberDeclarationParserRuleCall_6_0_0; }
		
		//BehaviorSpecification+=OnDirective
		public Assignment getBehaviorSpecificationAssignment_6_1() { return cBehaviorSpecificationAssignment_6_1; }
		
		//OnDirective
		public RuleCall getBehaviorSpecificationOnDirectiveParserRuleCall_6_1_0() { return cBehaviorSpecificationOnDirectiveParserRuleCall_6_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_7() { return cENDTerminalRuleCall_7; }
	}
	public class ActionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ActionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInheritsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBaseActionNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBaseActionNameIDTerminalRuleCall_2_1_0 = (RuleCall)cBaseActionNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cFieldNameAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cFieldNameIDTerminalRuleCall_2_2_1_0 = (RuleCall)cFieldNameAssignment_2_2_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Alternatives cAlternatives_2_2_3 = (Alternatives)cGroup_2_2.eContents().get(3);
		private final Assignment cEnumReferenceAssignment_2_2_3_0 = (Assignment)cAlternatives_2_2_3.eContents().get(0);
		private final RuleCall cEnumReferenceEnumValueReferenceParserRuleCall_2_2_3_0_0 = (RuleCall)cEnumReferenceAssignment_2_2_3_0.eContents().get(0);
		private final RuleCall cBOOLTerminalRuleCall_2_2_3_1 = (RuleCall)cAlternatives_2_2_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2_4 = (Keyword)cGroup_2_2.eContents().get(4);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cBEGINTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cActionMemberDeclAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionMemberDeclMemberDeclarationParserRuleCall_5_0 = (RuleCall)cActionMemberDeclAssignment_5.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		////ActionDeclaration
		//ActionDeclaration:
		//    'action' name=ID
		//    ('inherits' baseActionName=ID
		//     ('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?)? ':'
		//     BEGIN
		//         (ActionMemberDecl+=MemberDeclaration)*
		//     END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'action' name=ID
		//('inherits' baseActionName=ID
		// ('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?)? ':'
		// BEGIN
		//     (ActionMemberDecl+=MemberDeclaration)*
		// END
		public Group getGroup() { return cGroup; }
		
		//'action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('inherits' baseActionName=ID
		// ('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'inherits'
		public Keyword getInheritsKeyword_2_0() { return cInheritsKeyword_2_0; }
		
		//baseActionName=ID
		public Assignment getBaseActionNameAssignment_2_1() { return cBaseActionNameAssignment_2_1; }
		
		//ID
		public RuleCall getBaseActionNameIDTerminalRuleCall_2_1_0() { return cBaseActionNameIDTerminalRuleCall_2_1_0; }
		
		//('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2_0() { return cLeftParenthesisKeyword_2_2_0; }
		
		//fieldName=ID
		public Assignment getFieldNameAssignment_2_2_1() { return cFieldNameAssignment_2_2_1; }
		
		//ID
		public RuleCall getFieldNameIDTerminalRuleCall_2_2_1_0() { return cFieldNameIDTerminalRuleCall_2_2_1_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2_2_2() { return cEqualsSignEqualsSignKeyword_2_2_2; }
		
		//(enumReference = EnumValueReference | BOOL)
		public Alternatives getAlternatives_2_2_3() { return cAlternatives_2_2_3; }
		
		//enumReference = EnumValueReference
		public Assignment getEnumReferenceAssignment_2_2_3_0() { return cEnumReferenceAssignment_2_2_3_0; }
		
		//EnumValueReference
		public RuleCall getEnumReferenceEnumValueReferenceParserRuleCall_2_2_3_0_0() { return cEnumReferenceEnumValueReferenceParserRuleCall_2_2_3_0_0; }
		
		//BOOL
		public RuleCall getBOOLTerminalRuleCall_2_2_3_1() { return cBOOLTerminalRuleCall_2_2_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2_4() { return cRightParenthesisKeyword_2_2_4; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4() { return cBEGINTerminalRuleCall_4; }
		
		//(ActionMemberDecl+=MemberDeclaration)*
		public Assignment getActionMemberDeclAssignment_5() { return cActionMemberDeclAssignment_5; }
		
		//MemberDeclaration
		public RuleCall getActionMemberDeclMemberDeclarationParserRuleCall_5_0() { return cActionMemberDeclMemberDeclarationParserRuleCall_5_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class ActorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ActorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInheritsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBaseActorNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBaseActorNameIDTerminalRuleCall_2_1_0 = (RuleCall)cBaseActorNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cFieldNameAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cFieldNameIDTerminalRuleCall_2_2_1_0 = (RuleCall)cFieldNameAssignment_2_2_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Alternatives cAlternatives_2_2_3 = (Alternatives)cGroup_2_2.eContents().get(3);
		private final Assignment cEnumReferenceAssignment_2_2_3_0 = (Assignment)cAlternatives_2_2_3.eContents().get(0);
		private final RuleCall cEnumReferenceEnumValueReferenceParserRuleCall_2_2_3_0_0 = (RuleCall)cEnumReferenceAssignment_2_2_3_0.eContents().get(0);
		private final RuleCall cBOOLTerminalRuleCall_2_2_3_1 = (RuleCall)cAlternatives_2_2_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2_4 = (Keyword)cGroup_2_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cActorMemberDeclAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cActorMemberDeclMemberDeclarationParserRuleCall_3_2_0 = (RuleCall)cActorMemberDeclAssignment_3_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		
		////ActorDeclaration
		//ActorDeclaration:
		//    'actor' name=ID
		//    ('inherits' baseActorName=ID
		//     ('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?)? (':'
		//     BEGIN
		//         (ActorMemberDecl+=MemberDeclaration)*
		//     END )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'actor' name=ID
		//('inherits' baseActorName=ID
		// ('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?)? (':'
		// BEGIN
		//     (ActorMemberDecl+=MemberDeclaration)*
		// END )?
		public Group getGroup() { return cGroup; }
		
		//'actor'
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('inherits' baseActorName=ID
		// ('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'inherits'
		public Keyword getInheritsKeyword_2_0() { return cInheritsKeyword_2_0; }
		
		//baseActorName=ID
		public Assignment getBaseActorNameAssignment_2_1() { return cBaseActorNameAssignment_2_1; }
		
		//ID
		public RuleCall getBaseActorNameIDTerminalRuleCall_2_1_0() { return cBaseActorNameIDTerminalRuleCall_2_1_0; }
		
		//('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2_0() { return cLeftParenthesisKeyword_2_2_0; }
		
		//fieldName=ID
		public Assignment getFieldNameAssignment_2_2_1() { return cFieldNameAssignment_2_2_1; }
		
		//ID
		public RuleCall getFieldNameIDTerminalRuleCall_2_2_1_0() { return cFieldNameIDTerminalRuleCall_2_2_1_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2_2_2() { return cEqualsSignEqualsSignKeyword_2_2_2; }
		
		//(enumReference = EnumValueReference | BOOL)
		public Alternatives getAlternatives_2_2_3() { return cAlternatives_2_2_3; }
		
		//enumReference = EnumValueReference
		public Assignment getEnumReferenceAssignment_2_2_3_0() { return cEnumReferenceAssignment_2_2_3_0; }
		
		//EnumValueReference
		public RuleCall getEnumReferenceEnumValueReferenceParserRuleCall_2_2_3_0_0() { return cEnumReferenceEnumValueReferenceParserRuleCall_2_2_3_0_0; }
		
		//BOOL
		public RuleCall getBOOLTerminalRuleCall_2_2_3_1() { return cBOOLTerminalRuleCall_2_2_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2_4() { return cRightParenthesisKeyword_2_2_4; }
		
		//(':'
		//    BEGIN
		//        (ActorMemberDecl+=MemberDeclaration)*
		//    END )?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3_1() { return cBEGINTerminalRuleCall_3_1; }
		
		//(ActorMemberDecl+=MemberDeclaration)*
		public Assignment getActorMemberDeclAssignment_3_2() { return cActorMemberDeclAssignment_3_2; }
		
		//MemberDeclaration
		public RuleCall getActorMemberDeclMemberDeclarationParserRuleCall_3_2_0() { return cActorMemberDeclMemberDeclarationParserRuleCall_3_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3_3() { return cENDTerminalRuleCall_3_3; }
	}
	public class StructDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.StructDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInheritsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBaseStructNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBaseStructNameIDTerminalRuleCall_2_1_0 = (RuleCall)cBaseStructNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cFieldNameAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cFieldNameIDTerminalRuleCall_2_2_1_0 = (RuleCall)cFieldNameAssignment_2_2_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Alternatives cAlternatives_2_2_3 = (Alternatives)cGroup_2_2.eContents().get(3);
		private final Assignment cEnumReferenceAssignment_2_2_3_0 = (Assignment)cAlternatives_2_2_3.eContents().get(0);
		private final RuleCall cEnumReferenceEnumValueReferenceParserRuleCall_2_2_3_0_0 = (RuleCall)cEnumReferenceAssignment_2_2_3_0.eContents().get(0);
		private final RuleCall cBOOLTerminalRuleCall_2_2_3_1 = (RuleCall)cAlternatives_2_2_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2_4 = (Keyword)cGroup_2_2.eContents().get(4);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cBEGINTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cStructMemberDeclAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStructMemberDeclMemberDeclarationParserRuleCall_5_0 = (RuleCall)cStructMemberDeclAssignment_5.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		////StructDeclaration
		//StructDeclaration:
		//    'struct' name=ID
		//    ('inherits' baseStructName=ID
		//     ('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?)? ':'
		//     BEGIN
		//         (StructMemberDecl+=MemberDeclaration)*
		//     END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'struct' name=ID
		//('inherits' baseStructName=ID
		// ('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?)? ':'
		// BEGIN
		//     (StructMemberDecl+=MemberDeclaration)*
		// END
		public Group getGroup() { return cGroup; }
		
		//'struct'
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('inherits' baseStructName=ID
		// ('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'inherits'
		public Keyword getInheritsKeyword_2_0() { return cInheritsKeyword_2_0; }
		
		//baseStructName=ID
		public Assignment getBaseStructNameAssignment_2_1() { return cBaseStructNameAssignment_2_1; }
		
		//ID
		public RuleCall getBaseStructNameIDTerminalRuleCall_2_1_0() { return cBaseStructNameIDTerminalRuleCall_2_1_0; }
		
		//('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2_0() { return cLeftParenthesisKeyword_2_2_0; }
		
		//fieldName=ID
		public Assignment getFieldNameAssignment_2_2_1() { return cFieldNameAssignment_2_2_1; }
		
		//ID
		public RuleCall getFieldNameIDTerminalRuleCall_2_2_1_0() { return cFieldNameIDTerminalRuleCall_2_2_1_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2_2_2() { return cEqualsSignEqualsSignKeyword_2_2_2; }
		
		//(enumReference = EnumValueReference | BOOL)
		public Alternatives getAlternatives_2_2_3() { return cAlternatives_2_2_3; }
		
		//enumReference = EnumValueReference
		public Assignment getEnumReferenceAssignment_2_2_3_0() { return cEnumReferenceAssignment_2_2_3_0; }
		
		//EnumValueReference
		public RuleCall getEnumReferenceEnumValueReferenceParserRuleCall_2_2_3_0_0() { return cEnumReferenceEnumValueReferenceParserRuleCall_2_2_3_0_0; }
		
		//BOOL
		public RuleCall getBOOLTerminalRuleCall_2_2_3_1() { return cBOOLTerminalRuleCall_2_2_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2_4() { return cRightParenthesisKeyword_2_2_4; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4() { return cBEGINTerminalRuleCall_4; }
		
		//(StructMemberDecl+=MemberDeclaration)*
		public Assignment getStructMemberDeclAssignment_5() { return cStructMemberDeclAssignment_5; }
		
		//MemberDeclaration
		public RuleCall getStructMemberDeclMemberDeclarationParserRuleCall_5_0() { return cStructMemberDeclMemberDeclarationParserRuleCall_5_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class ScenarioDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ScenarioDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInheritsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBaseScenarioNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBaseScenarioNameIDTerminalRuleCall_2_1_0 = (RuleCall)cBaseScenarioNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cFieldNameAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cFieldNameIDTerminalRuleCall_2_2_1_0 = (RuleCall)cFieldNameAssignment_2_2_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Alternatives cAlternatives_2_2_3 = (Alternatives)cGroup_2_2.eContents().get(3);
		private final Assignment cEnumReferenceAssignment_2_2_3_0 = (Assignment)cAlternatives_2_2_3.eContents().get(0);
		private final RuleCall cEnumReferenceEnumValueReferenceParserRuleCall_2_2_3_0_0 = (RuleCall)cEnumReferenceAssignment_2_2_3_0.eContents().get(0);
		private final RuleCall cBOOLTerminalRuleCall_2_2_3_1 = (RuleCall)cAlternatives_2_2_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2_4 = (Keyword)cGroup_2_2.eContents().get(4);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cBEGINTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cScenarioMemberDeclAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cScenarioMemberDeclMemberDeclarationParserRuleCall_5_0_0 = (RuleCall)cScenarioMemberDeclAssignment_5_0.eContents().get(0);
		private final Assignment cBehaviorSpecificationAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cBehaviorSpecificationBehaviorSpecificationParserRuleCall_5_1_0 = (RuleCall)cBehaviorSpecificationAssignment_5_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		////Scenario Declaration
		//ScenarioDeclaration:
		//    'scenario' name=ID
		//    ('inherits' baseScenarioName=ID
		//     ('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?)? ':'
		//     BEGIN
		//         (ScenarioMemberDecl+=MemberDeclaration | BehaviorSpecification+=BehaviorSpecification)*
		//     END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'scenario' name=ID
		//('inherits' baseScenarioName=ID
		// ('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?)? ':'
		// BEGIN
		//     (ScenarioMemberDecl+=MemberDeclaration | BehaviorSpecification+=BehaviorSpecification)*
		// END
		public Group getGroup() { return cGroup; }
		
		//'scenario'
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('inherits' baseScenarioName=ID
		// ('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'inherits'
		public Keyword getInheritsKeyword_2_0() { return cInheritsKeyword_2_0; }
		
		//baseScenarioName=ID
		public Assignment getBaseScenarioNameAssignment_2_1() { return cBaseScenarioNameAssignment_2_1; }
		
		//ID
		public RuleCall getBaseScenarioNameIDTerminalRuleCall_2_1_0() { return cBaseScenarioNameIDTerminalRuleCall_2_1_0; }
		
		//('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2_0() { return cLeftParenthesisKeyword_2_2_0; }
		
		//fieldName=ID
		public Assignment getFieldNameAssignment_2_2_1() { return cFieldNameAssignment_2_2_1; }
		
		//ID
		public RuleCall getFieldNameIDTerminalRuleCall_2_2_1_0() { return cFieldNameIDTerminalRuleCall_2_2_1_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2_2_2() { return cEqualsSignEqualsSignKeyword_2_2_2; }
		
		//(enumReference = EnumValueReference | BOOL)
		public Alternatives getAlternatives_2_2_3() { return cAlternatives_2_2_3; }
		
		//enumReference = EnumValueReference
		public Assignment getEnumReferenceAssignment_2_2_3_0() { return cEnumReferenceAssignment_2_2_3_0; }
		
		//EnumValueReference
		public RuleCall getEnumReferenceEnumValueReferenceParserRuleCall_2_2_3_0_0() { return cEnumReferenceEnumValueReferenceParserRuleCall_2_2_3_0_0; }
		
		//BOOL
		public RuleCall getBOOLTerminalRuleCall_2_2_3_1() { return cBOOLTerminalRuleCall_2_2_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2_4() { return cRightParenthesisKeyword_2_2_4; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4() { return cBEGINTerminalRuleCall_4; }
		
		//(ScenarioMemberDecl+=MemberDeclaration | BehaviorSpecification+=BehaviorSpecification)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//ScenarioMemberDecl+=MemberDeclaration
		public Assignment getScenarioMemberDeclAssignment_5_0() { return cScenarioMemberDeclAssignment_5_0; }
		
		//MemberDeclaration
		public RuleCall getScenarioMemberDeclMemberDeclarationParserRuleCall_5_0_0() { return cScenarioMemberDeclMemberDeclarationParserRuleCall_5_0_0; }
		
		//BehaviorSpecification+=BehaviorSpecification
		public Assignment getBehaviorSpecificationAssignment_5_1() { return cBehaviorSpecificationAssignment_5_1; }
		
		//BehaviorSpecification
		public RuleCall getBehaviorSpecificationBehaviorSpecificationParserRuleCall_5_1_0() { return cBehaviorSpecificationBehaviorSpecificationParserRuleCall_5_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class MemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.MemberDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMethodDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCoverageDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstraintDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		////MemberDeclaration
		//MemberDeclaration:
		//    FieldDeclaration | EventDeclaration | MethodDeclaration |
		//    CoverageDeclaration | ConstraintDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FieldDeclaration | EventDeclaration | MethodDeclaration |
		//CoverageDeclaration | ConstraintDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FieldDeclaration
		public RuleCall getFieldDeclarationParserRuleCall_0() { return cFieldDeclarationParserRuleCall_0; }
		
		//EventDeclaration
		public RuleCall getEventDeclarationParserRuleCall_1() { return cEventDeclarationParserRuleCall_1; }
		
		//MethodDeclaration
		public RuleCall getMethodDeclarationParserRuleCall_2() { return cMethodDeclarationParserRuleCall_2; }
		
		//CoverageDeclaration
		public RuleCall getCoverageDeclarationParserRuleCall_3() { return cCoverageDeclarationParserRuleCall_3; }
		
		//ConstraintDeclaration
		public RuleCall getConstraintDeclarationParserRuleCall_4() { return cConstraintDeclarationParserRuleCall_4; }
	}
	public class CoverageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.CoverageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCoverKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRecordKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentListArgumentListParserRuleCall_2_0 = (RuleCall)cArgumentListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////CoverageDeclaration
		//CoverageDeclaration:
		//    ('cover' | 'record') '(' argumentList=ArgumentList ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('cover' | 'record') '(' argumentList=ArgumentList ')'
		public Group getGroup() { return cGroup; }
		
		//('cover' | 'record')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'cover'
		public Keyword getCoverKeyword_0_0() { return cCoverKeyword_0_0; }
		
		//'record'
		public Keyword getRecordKeyword_0_1() { return cRecordKeyword_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//argumentList=ArgumentList
		public Assignment getArgumentListAssignment_2() { return cArgumentListAssignment_2; }
		
		//ArgumentList
		public RuleCall getArgumentListArgumentListParserRuleCall_2_0() { return cArgumentListArgumentListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.MethodDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodNameIDTerminalRuleCall_1_0 = (RuleCall)cMethodNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgumentListSpecificationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentListSpecificationArgumentListSpecificationParserRuleCall_3_0 = (RuleCall)cArgumentListSpecificationAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReturnTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cReturnTypeTypeDeclaratorParserRuleCall_5_1_0 = (RuleCall)cReturnTypeAssignment_5_1.eContents().get(0);
		private final Assignment cMethodImplementationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMethodImplementationMethodImplementationParserRuleCall_6_0 = (RuleCall)cMethodImplementationAssignment_6.eContents().get(0);
		
		////MethodDeclaration
		//MethodDeclaration:
		//    'def' methodName=ID '(' (argumentListSpecification=ArgumentListSpecification)? ')'
		//    ('->' returnType=TypeDeclarator)? methodImplementation=MethodImplementation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'def' methodName=ID '(' (argumentListSpecification=ArgumentListSpecification)? ')'
		//('->' returnType=TypeDeclarator)? methodImplementation=MethodImplementation
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//methodName=ID
		public Assignment getMethodNameAssignment_1() { return cMethodNameAssignment_1; }
		
		//ID
		public RuleCall getMethodNameIDTerminalRuleCall_1_0() { return cMethodNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(argumentListSpecification=ArgumentListSpecification)?
		public Assignment getArgumentListSpecificationAssignment_3() { return cArgumentListSpecificationAssignment_3; }
		
		//ArgumentListSpecification
		public RuleCall getArgumentListSpecificationArgumentListSpecificationParserRuleCall_3_0() { return cArgumentListSpecificationArgumentListSpecificationParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//('->' returnType=TypeDeclarator)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusGreaterThanSignKeyword_5_0; }
		
		//returnType=TypeDeclarator
		public Assignment getReturnTypeAssignment_5_1() { return cReturnTypeAssignment_5_1; }
		
		//TypeDeclarator
		public RuleCall getReturnTypeTypeDeclaratorParserRuleCall_5_1_0() { return cReturnTypeTypeDeclaratorParserRuleCall_5_1_0; }
		
		//methodImplementation=MethodImplementation
		public Assignment getMethodImplementationAssignment_6() { return cMethodImplementationAssignment_6; }
		
		//MethodImplementation
		public RuleCall getMethodImplementationMethodImplementationParserRuleCall_6_0() { return cMethodImplementationMethodImplementationParserRuleCall_6_0; }
	}
	public class MethodImplementationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.MethodImplementation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnlyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cExpressionKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cExpressionAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0_1_0 = (RuleCall)cExpressionAssignment_2_0_1.eContents().get(0);
		private final Keyword cUndefinedKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Keyword cExternalKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cStructuredIDAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cStructuredIDStructuredIDParserRuleCall_2_2_1_0 = (RuleCall)cStructuredIDAssignment_2_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Assignment cArgumentListAssignment_2_2_3 = (Assignment)cGroup_2_2.eContents().get(3);
		private final RuleCall cArgumentListArgumentListParserRuleCall_2_2_3_0 = (RuleCall)cArgumentListAssignment_2_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2_4 = (Keyword)cGroup_2_2.eContents().get(4);
		
		//MethodImplementation:
		//    'is' ('only')?
		//    ('expression' expression=Expression | 'undefined' |
		//    'external' structuredID=StructuredID '(' (argumentList=ArgumentList)? ')')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'is' ('only')?
		//('expression' expression=Expression | 'undefined' |
		//'external' structuredID=StructuredID '(' (argumentList=ArgumentList)? ')')
		public Group getGroup() { return cGroup; }
		
		//'is'
		public Keyword getIsKeyword_0() { return cIsKeyword_0; }
		
		//('only')?
		public Keyword getOnlyKeyword_1() { return cOnlyKeyword_1; }
		
		//('expression' expression=Expression | 'undefined' |
		//'external' structuredID=StructuredID '(' (argumentList=ArgumentList)? ')')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'expression' expression=Expression
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'expression'
		public Keyword getExpressionKeyword_2_0_0() { return cExpressionKeyword_2_0_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_0_1() { return cExpressionAssignment_2_0_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0_1_0() { return cExpressionExpressionParserRuleCall_2_0_1_0; }
		
		//'undefined'
		public Keyword getUndefinedKeyword_2_1() { return cUndefinedKeyword_2_1; }
		
		//'external' structuredID=StructuredID '(' (argumentList=ArgumentList)? ')'
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'external'
		public Keyword getExternalKeyword_2_2_0() { return cExternalKeyword_2_2_0; }
		
		//structuredID=StructuredID
		public Assignment getStructuredIDAssignment_2_2_1() { return cStructuredIDAssignment_2_2_1; }
		
		//StructuredID
		public RuleCall getStructuredIDStructuredIDParserRuleCall_2_2_1_0() { return cStructuredIDStructuredIDParserRuleCall_2_2_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2_2() { return cLeftParenthesisKeyword_2_2_2; }
		
		//(argumentList=ArgumentList)?
		public Assignment getArgumentListAssignment_2_2_3() { return cArgumentListAssignment_2_2_3; }
		
		//ArgumentList
		public RuleCall getArgumentListArgumentListParserRuleCall_2_2_3_0() { return cArgumentListArgumentListParserRuleCall_2_2_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2_4() { return cRightParenthesisKeyword_2_2_4; }
	}
	public class EventDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.EventDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventNameIDTerminalRuleCall_1_0 = (RuleCall)cEventNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParamsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParamsArgumentListSpecificationParserRuleCall_2_1_0_0 = (RuleCall)cParamsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParamsArgumentListSpecificationParserRuleCall_2_1_1_1_0 = (RuleCall)cParamsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEventSpecificationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEventSpecificationEventSpecificationParserRuleCall_3_1_0 = (RuleCall)cEventSpecificationAssignment_3_1.eContents().get(0);
		
		////EventDeclaration
		//EventDeclaration:
		//    'event' eventName=ID
		//    ('(' (params+=ArgumentListSpecification (',' params+=ArgumentListSpecification)*)? ')')?
		//    ('is' eventSpecification=EventSpecification)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'event' eventName=ID
		//('(' (params+=ArgumentListSpecification (',' params+=ArgumentListSpecification)*)? ')')?
		//('is' eventSpecification=EventSpecification)?
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//eventName=ID
		public Assignment getEventNameAssignment_1() { return cEventNameAssignment_1; }
		
		//ID
		public RuleCall getEventNameIDTerminalRuleCall_1_0() { return cEventNameIDTerminalRuleCall_1_0; }
		
		//('(' (params+=ArgumentListSpecification (',' params+=ArgumentListSpecification)*)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(params+=ArgumentListSpecification (',' params+=ArgumentListSpecification)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//params+=ArgumentListSpecification
		public Assignment getParamsAssignment_2_1_0() { return cParamsAssignment_2_1_0; }
		
		//ArgumentListSpecification
		public RuleCall getParamsArgumentListSpecificationParserRuleCall_2_1_0_0() { return cParamsArgumentListSpecificationParserRuleCall_2_1_0_0; }
		
		//(',' params+=ArgumentListSpecification)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//params+=ArgumentListSpecification
		public Assignment getParamsAssignment_2_1_1_1() { return cParamsAssignment_2_1_1_1; }
		
		//ArgumentListSpecification
		public RuleCall getParamsArgumentListSpecificationParserRuleCall_2_1_1_1_0() { return cParamsArgumentListSpecificationParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//('is' eventSpecification=EventSpecification)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'is'
		public Keyword getIsKeyword_3_0() { return cIsKeyword_3_0; }
		
		//eventSpecification=EventSpecification
		public Assignment getEventSpecificationAssignment_3_1() { return cEventSpecificationAssignment_3_1; }
		
		//EventSpecification
		public RuleCall getEventSpecificationEventSpecificationParserRuleCall_3_1_0() { return cEventSpecificationEventSpecificationParserRuleCall_3_1_0; }
	}
	public class EventSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.EventSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cEventReferenceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cEventReferenceEventReferenceParserRuleCall_0_0_0 = (RuleCall)cEventReferenceAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cGroup_0_1.eContents().get(0);
		private final Keyword cAsKeyword_0_1_0_0 = (Keyword)cGroup_0_1_0.eContents().get(0);
		private final Assignment cEventFieldNameAssignment_0_1_0_1 = (Assignment)cGroup_0_1_0.eContents().get(1);
		private final RuleCall cEventFieldNameIDTerminalRuleCall_0_1_0_1_0 = (RuleCall)cEventFieldNameAssignment_0_1_0_1.eContents().get(0);
		private final Keyword cIfKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cEventConditionAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cEventConditionEventConditionParserRuleCall_0_1_2_0 = (RuleCall)cEventConditionAssignment_0_1_2.eContents().get(0);
		private final Assignment cEventConditionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEventConditionEventConditionParserRuleCall_1_0 = (RuleCall)cEventConditionAssignment_1.eContents().get(0);
		
		//EventSpecification:
		//    eventReference=EventReference (('as' eventFieldName=ID)? 'if' eventCondition=EventCondition)? |
		//    eventCondition=EventCondition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//eventReference=EventReference (('as' eventFieldName=ID)? 'if' eventCondition=EventCondition)? |
		//eventCondition=EventCondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//eventReference=EventReference (('as' eventFieldName=ID)? 'if' eventCondition=EventCondition)?
		public Group getGroup_0() { return cGroup_0; }
		
		//eventReference=EventReference
		public Assignment getEventReferenceAssignment_0_0() { return cEventReferenceAssignment_0_0; }
		
		//EventReference
		public RuleCall getEventReferenceEventReferenceParserRuleCall_0_0_0() { return cEventReferenceEventReferenceParserRuleCall_0_0_0; }
		
		//(('as' eventFieldName=ID)? 'if' eventCondition=EventCondition)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//('as' eventFieldName=ID)?
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//'as'
		public Keyword getAsKeyword_0_1_0_0() { return cAsKeyword_0_1_0_0; }
		
		//eventFieldName=ID
		public Assignment getEventFieldNameAssignment_0_1_0_1() { return cEventFieldNameAssignment_0_1_0_1; }
		
		//ID
		public RuleCall getEventFieldNameIDTerminalRuleCall_0_1_0_1_0() { return cEventFieldNameIDTerminalRuleCall_0_1_0_1_0; }
		
		//'if'
		public Keyword getIfKeyword_0_1_1() { return cIfKeyword_0_1_1; }
		
		//eventCondition=EventCondition
		public Assignment getEventConditionAssignment_0_1_2() { return cEventConditionAssignment_0_1_2; }
		
		//EventCondition
		public RuleCall getEventConditionEventConditionParserRuleCall_0_1_2_0() { return cEventConditionEventConditionParserRuleCall_0_1_2_0; }
		
		//eventCondition=EventCondition
		public Assignment getEventConditionAssignment_1() { return cEventConditionAssignment_1; }
		
		//EventCondition
		public RuleCall getEventConditionEventConditionParserRuleCall_1_0() { return cEventConditionEventConditionParserRuleCall_1_0; }
	}
	public class EventReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.EventReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventPathEventPathParserRuleCall_1_0 = (RuleCall)cEventPathAssignment_1.eContents().get(0);
		
		//EventReference:
		//    '@' eventPath=EventPath;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' eventPath=EventPath
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//eventPath=EventPath
		public Assignment getEventPathAssignment_1() { return cEventPathAssignment_1; }
		
		//EventPath
		public RuleCall getEventPathEventPathParserRuleCall_1_0() { return cEventPathEventPathParserRuleCall_1_0; }
	}
	public class EventPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.EventPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0_0 = (RuleCall)cExpressionAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cEventNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventNameIDTerminalRuleCall_1_0 = (RuleCall)cEventNameAssignment_1.eContents().get(0);
		
		//EventPath:
		//    (expression=Expression '.')? eventName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//(expression=Expression '.')? eventName=ID
		public Group getGroup() { return cGroup; }
		
		//(expression=Expression '.')?
		public Group getGroup_0() { return cGroup_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_0() { return cExpressionAssignment_0_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0_0() { return cExpressionExpressionParserRuleCall_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//eventName=ID
		public Assignment getEventNameAssignment_1() { return cEventNameAssignment_1; }
		
		//ID
		public RuleCall getEventNameIDTerminalRuleCall_1_0() { return cEventNameIDTerminalRuleCall_1_0; }
	}
	public class EventConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.EventCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRiseExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFallExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cElapsedExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEveryExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//EventCondition:
		//    Expression | Condition | RiseExpression | FallExpression | ElapsedExpression | EveryExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression | Condition | RiseExpression | FallExpression | ElapsedExpression | EveryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_1() { return cConditionParserRuleCall_1; }
		
		//RiseExpression
		public RuleCall getRiseExpressionParserRuleCall_2() { return cRiseExpressionParserRuleCall_2; }
		
		//FallExpression
		public RuleCall getFallExpressionParserRuleCall_3() { return cFallExpressionParserRuleCall_3; }
		
		//ElapsedExpression
		public RuleCall getElapsedExpressionParserRuleCall_4() { return cElapsedExpressionParserRuleCall_4; }
		
		//EveryExpression
		public RuleCall getEveryExpressionParserRuleCall_5() { return cEveryExpressionParserRuleCall_5; }
	}
	public class RiseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.RiseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRiseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBoolExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBoolExpressionExpressionParserRuleCall_2_0 = (RuleCall)cBoolExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RiseExpression:
		//    'rise' '(' boolExpression=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rise' '(' boolExpression=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'rise'
		public Keyword getRiseKeyword_0() { return cRiseKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//boolExpression=Expression
		public Assignment getBoolExpressionAssignment_2() { return cBoolExpressionAssignment_2; }
		
		//Expression
		public RuleCall getBoolExpressionExpressionParserRuleCall_2_0() { return cBoolExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.FallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBoolExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBoolExpressionExpressionParserRuleCall_2_0 = (RuleCall)cBoolExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FallExpression:
		//    'fall' '(' boolExpression=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'fall' '(' boolExpression=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'fall'
		public Keyword getFallKeyword_0() { return cFallKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//boolExpression=Expression
		public Assignment getBoolExpressionAssignment_2() { return cBoolExpressionAssignment_2; }
		
		//Expression
		public RuleCall getBoolExpressionExpressionParserRuleCall_2_0() { return cBoolExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ElapsedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ElapsedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElapsedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDurationExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDurationExpressionExpressionParserRuleCall_2_0 = (RuleCall)cDurationExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ElapsedExpression:
		//    'elapsed' '(' durationExpression=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'elapsed' '(' durationExpression=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'elapsed'
		public Keyword getElapsedKeyword_0() { return cElapsedKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//durationExpression=Expression
		public Assignment getDurationExpressionAssignment_2() { return cDurationExpressionAssignment_2; }
		
		//Expression
		public RuleCall getDurationExpressionExpressionParserRuleCall_2_0() { return cDurationExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EveryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.EveryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEveryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDurationExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDurationExpressionExpressionParserRuleCall_2_0 = (RuleCall)cDurationExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cOffsetKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cColonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cNextdurationExpressionAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cNextdurationExpressionExpressionParserRuleCall_3_3_0 = (RuleCall)cNextdurationExpressionAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EveryExpression:
		//    'every' '(' durationExpression=Expression (',' 'offset' ':' NextdurationExpression+=Expression)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'every' '(' durationExpression=Expression (',' 'offset' ':' NextdurationExpression+=Expression)? ')'
		public Group getGroup() { return cGroup; }
		
		//'every'
		public Keyword getEveryKeyword_0() { return cEveryKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//durationExpression=Expression
		public Assignment getDurationExpressionAssignment_2() { return cDurationExpressionAssignment_2; }
		
		//Expression
		public RuleCall getDurationExpressionExpressionParserRuleCall_2_0() { return cDurationExpressionExpressionParserRuleCall_2_0; }
		
		//(',' 'offset' ':' NextdurationExpression+=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//'offset'
		public Keyword getOffsetKeyword_3_1() { return cOffsetKeyword_3_1; }
		
		//':'
		public Keyword getColonKeyword_3_2() { return cColonKeyword_3_2; }
		
		//NextdurationExpression+=Expression
		public Assignment getNextdurationExpressionAssignment_3_3() { return cNextdurationExpressionAssignment_3_3; }
		
		//Expression
		public RuleCall getNextdurationExpressionExpressionParserRuleCall_3_3_0() { return cNextdurationExpressionExpressionParserRuleCall_3_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.FieldDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////FieldDeclaration
		//FieldDeclaration:
		//     ParameterDeclaration | VariableDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterDeclaration | VariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationParserRuleCall_0() { return cParameterDeclarationParserRuleCall_0; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_1() { return cVariableDeclarationParserRuleCall_1; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldNameIDTerminalRuleCall_1_0 = (RuleCall)cFieldNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNextfieldNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNextfieldNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNextfieldNameAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeDeclaratorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeDeclaratorTypeDeclaratorParserRuleCall_4_0 = (RuleCall)cTypeDeclaratorAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Assignment cDefaultValueAssignment_5_1_0 = (Assignment)cAlternatives_5_1.eContents().get(0);
		private final RuleCall cDefaultValueExpressionParserRuleCall_5_1_0_0 = (RuleCall)cDefaultValueAssignment_5_1_0.eContents().get(0);
		private final Assignment cSampleExpressionAssignment_5_1_1 = (Assignment)cAlternatives_5_1.eContents().get(1);
		private final RuleCall cSampleExpressionSampleExpressionParserRuleCall_5_1_1_0 = (RuleCall)cSampleExpressionAssignment_5_1_1.eContents().get(0);
		
		////VariableDeclaration
		//VariableDeclaration:
		//    'var' fieldName=ID (',' NextfieldName+=ID)* ':' typeDeclarator=TypeDeclarator
		//    ('=' (defaultValue=Expression|sampleExpression=SampleExpression))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' fieldName=ID (',' NextfieldName+=ID)* ':' typeDeclarator=TypeDeclarator
		//('=' (defaultValue=Expression|sampleExpression=SampleExpression))?
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//fieldName=ID
		public Assignment getFieldNameAssignment_1() { return cFieldNameAssignment_1; }
		
		//ID
		public RuleCall getFieldNameIDTerminalRuleCall_1_0() { return cFieldNameIDTerminalRuleCall_1_0; }
		
		//(',' NextfieldName+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//NextfieldName+=ID
		public Assignment getNextfieldNameAssignment_2_1() { return cNextfieldNameAssignment_2_1; }
		
		//ID
		public RuleCall getNextfieldNameIDTerminalRuleCall_2_1_0() { return cNextfieldNameIDTerminalRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//typeDeclarator=TypeDeclarator
		public Assignment getTypeDeclaratorAssignment_4() { return cTypeDeclaratorAssignment_4; }
		
		//TypeDeclarator
		public RuleCall getTypeDeclaratorTypeDeclaratorParserRuleCall_4_0() { return cTypeDeclaratorTypeDeclaratorParserRuleCall_4_0; }
		
		//('=' (defaultValue=Expression|sampleExpression=SampleExpression))?
		public Group getGroup_5() { return cGroup_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }
		
		//(defaultValue=Expression|sampleExpression=SampleExpression)
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_5_1_0() { return cDefaultValueAssignment_5_1_0; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_5_1_0_0() { return cDefaultValueExpressionParserRuleCall_5_1_0_0; }
		
		//sampleExpression=SampleExpression
		public Assignment getSampleExpressionAssignment_5_1_1() { return cSampleExpressionAssignment_5_1_1; }
		
		//SampleExpression
		public RuleCall getSampleExpressionSampleExpressionParserRuleCall_5_1_1_0() { return cSampleExpressionSampleExpressionParserRuleCall_5_1_1_0; }
	}
	public class SampleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.SampleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSampleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEventSpecificationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEventSpecificationEventSpecificationParserRuleCall_4_0 = (RuleCall)cEventSpecificationAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDefaultValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_5_1_0 = (RuleCall)cDefaultValueAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SampleExpression:
		//    'sample' '(' expression=Expression ',' eventSpecification=EventSpecification
		//    (',' defaultValue=Expression)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'sample' '(' expression=Expression ',' eventSpecification=EventSpecification
		//(',' defaultValue=Expression)? ')'
		public Group getGroup() { return cGroup; }
		
		//'sample'
		public Keyword getSampleKeyword_0() { return cSampleKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//eventSpecification=EventSpecification
		public Assignment getEventSpecificationAssignment_4() { return cEventSpecificationAssignment_4; }
		
		//EventSpecification
		public RuleCall getEventSpecificationEventSpecificationParserRuleCall_4_0() { return cEventSpecificationEventSpecificationParserRuleCall_4_0; }
		
		//(',' defaultValue=Expression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_5_1() { return cDefaultValueAssignment_5_1; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_5_1_0() { return cDefaultValueExpressionParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class BehaviorSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.BehaviorSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOnDirectiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoDirectiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Behavior Specification
		//BehaviorSpecification:
		//    OnDirective | DoDirective
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OnDirective | DoDirective
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OnDirective
		public RuleCall getOnDirectiveParserRuleCall_0() { return cOnDirectiveParserRuleCall_0; }
		
		//DoDirective
		public RuleCall getDoDirectiveParserRuleCall_1() { return cDoDirectiveParserRuleCall_1; }
	}
	public class OnDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.OnDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventSpecificationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventSpecificationIDTerminalRuleCall_1_0 = (RuleCall)cEventSpecificationAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cOnMemberAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOnMemberOnDirectiveMemberParserRuleCall_4_0 = (RuleCall)cOnMemberAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		////OnDirective
		//OnDirective:
		//    'on' eventSpecification=ID ':'
		//    BEGIN
		//        (onMember+=OnDirectiveMember)*
		//    END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' eventSpecification=ID ':'
		//BEGIN
		//    (onMember+=OnDirectiveMember)*
		//END
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//eventSpecification=ID
		public Assignment getEventSpecificationAssignment_1() { return cEventSpecificationAssignment_1; }
		
		//ID
		public RuleCall getEventSpecificationIDTerminalRuleCall_1_0() { return cEventSpecificationIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//(onMember+=OnDirectiveMember)*
		public Assignment getOnMemberAssignment_4() { return cOnMemberAssignment_4; }
		
		//OnDirectiveMember
		public RuleCall getOnMemberOnDirectiveMemberParserRuleCall_4_0() { return cOnMemberOnDirectiveMemberParserRuleCall_4_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class OnDirectiveMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.OnDirectiveMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCallDirectiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEmitDirectiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OnDirectiveMember:
		//    CallDirective | EmitDirective
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CallDirective | EmitDirective
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CallDirective
		public RuleCall getCallDirectiveParserRuleCall_0() { return cCallDirectiveParserRuleCall_0; }
		
		//EmitDirective
		public RuleCall getEmitDirectiveParserRuleCall_1() { return cEmitDirectiveParserRuleCall_1; }
	}
	public class CallDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.CallDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodInvocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodInvocationMethodInvocationParserRuleCall_1_0 = (RuleCall)cMethodInvocationAssignment_1.eContents().get(0);
		
		//CallDirective:
		//    'call' methodInvocation=MethodInvocation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'call' methodInvocation=MethodInvocation
		public Group getGroup() { return cGroup; }
		
		//'call'
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }
		
		//methodInvocation=MethodInvocation
		public Assignment getMethodInvocationAssignment_1() { return cMethodInvocationAssignment_1; }
		
		//MethodInvocation
		public RuleCall getMethodInvocationMethodInvocationParserRuleCall_1_0() { return cMethodInvocationMethodInvocationParserRuleCall_1_0; }
	}
	public class EmitDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.EmitDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventNameIDTerminalRuleCall_1_0 = (RuleCall)cEventNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgumentListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentListArgumentListParserRuleCall_3_0 = (RuleCall)cArgumentListAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EmitDirective:
		//    'emit' eventName=ID '(' argumentList=ArgumentList ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'emit' eventName=ID '(' argumentList=ArgumentList ')'
		public Group getGroup() { return cGroup; }
		
		//'emit'
		public Keyword getEmitKeyword_0() { return cEmitKeyword_0; }
		
		//eventName=ID
		public Assignment getEventNameAssignment_1() { return cEventNameAssignment_1; }
		
		//ID
		public RuleCall getEventNameIDTerminalRuleCall_1_0() { return cEventNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//argumentList=ArgumentList
		public Assignment getArgumentListAssignment_3() { return cArgumentListAssignment_3; }
		
		//ArgumentList
		public RuleCall getArgumentListArgumentListParserRuleCall_3_0() { return cArgumentListArgumentListParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class WaitDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.WaitDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventSpecificationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventSpecificationEventSpecificationParserRuleCall_1_0 = (RuleCall)cEventSpecificationAssignment_1.eContents().get(0);
		
		//WaitDirective:
		//    'wait' eventSpecification=EventSpecification
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'wait' eventSpecification=EventSpecification
		public Group getGroup() { return cGroup; }
		
		//'wait'
		public Keyword getWaitKeyword_0() { return cWaitKeyword_0; }
		
		//eventSpecification=EventSpecification
		public Assignment getEventSpecificationAssignment_1() { return cEventSpecificationAssignment_1; }
		
		//EventSpecification
		public RuleCall getEventSpecificationEventSpecificationParserRuleCall_1_0() { return cEventSpecificationEventSpecificationParserRuleCall_1_0; }
	}
	public class DoDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.DoDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDoMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDoMembersDoDirectiveMemberParserRuleCall_1_0 = (RuleCall)cDoMembersAssignment_1.eContents().get(0);
		
		////DoDirective
		//DoDirective:
		//    'do' doMembers=DoDirectiveMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'do' doMembers=DoDirectiveMember
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//doMembers=DoDirectiveMember
		public Assignment getDoMembersAssignment_1() { return cDoMembersAssignment_1; }
		
		//DoDirectiveMember
		public RuleCall getDoMembersDoDirectiveMemberParserRuleCall_1_0() { return cDoMembersDoDirectiveMemberParserRuleCall_1_0; }
	}
	public class DoDirectiveMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.DoDirectiveMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLabelNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLabelNameIDTerminalRuleCall_0_0_0 = (RuleCall)cLabelNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cCompositionAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cCompositionCompositionParserRuleCall_1_0_0 = (RuleCall)cCompositionAssignment_1_0.eContents().get(0);
		private final Assignment cEmitDirectiveAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cEmitDirectiveEmitDirectiveParserRuleCall_1_1_0 = (RuleCall)cEmitDirectiveAssignment_1_1.eContents().get(0);
		private final Assignment cCallDirectiveAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cCallDirectiveCallDirectiveParserRuleCall_1_2_0 = (RuleCall)cCallDirectiveAssignment_1_2.eContents().get(0);
		private final Assignment cWaitDirectiveAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cWaitDirectiveWaitDirectiveParserRuleCall_1_3_0 = (RuleCall)cWaitDirectiveAssignment_1_3.eContents().get(0);
		private final Assignment cBehaviorInvocationAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cBehaviorInvocationBehaviorInvocationParserRuleCall_1_4_0 = (RuleCall)cBehaviorInvocationAssignment_1_4.eContents().get(0);
		
		//DoDirectiveMember:
		//    (labelName=ID ':')? (composition=Composition
		//    | emitDirective=EmitDirective | callDirective=CallDirective
		//    | waitDirective=WaitDirective | behaviorInvocation=BehaviorInvocation
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(labelName=ID ':')? (composition=Composition
		//| emitDirective=EmitDirective | callDirective=CallDirective
		//| waitDirective=WaitDirective | behaviorInvocation=BehaviorInvocation
		//)
		public Group getGroup() { return cGroup; }
		
		//(labelName=ID ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//labelName=ID
		public Assignment getLabelNameAssignment_0_0() { return cLabelNameAssignment_0_0; }
		
		//ID
		public RuleCall getLabelNameIDTerminalRuleCall_0_0_0() { return cLabelNameIDTerminalRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//(composition=Composition
		//   | emitDirective=EmitDirective | callDirective=CallDirective
		//   | waitDirective=WaitDirective | behaviorInvocation=BehaviorInvocation
		//   )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//composition=Composition
		public Assignment getCompositionAssignment_1_0() { return cCompositionAssignment_1_0; }
		
		//Composition
		public RuleCall getCompositionCompositionParserRuleCall_1_0_0() { return cCompositionCompositionParserRuleCall_1_0_0; }
		
		//emitDirective=EmitDirective
		public Assignment getEmitDirectiveAssignment_1_1() { return cEmitDirectiveAssignment_1_1; }
		
		//EmitDirective
		public RuleCall getEmitDirectiveEmitDirectiveParserRuleCall_1_1_0() { return cEmitDirectiveEmitDirectiveParserRuleCall_1_1_0; }
		
		//callDirective=CallDirective
		public Assignment getCallDirectiveAssignment_1_2() { return cCallDirectiveAssignment_1_2; }
		
		//CallDirective
		public RuleCall getCallDirectiveCallDirectiveParserRuleCall_1_2_0() { return cCallDirectiveCallDirectiveParserRuleCall_1_2_0; }
		
		//waitDirective=WaitDirective
		public Assignment getWaitDirectiveAssignment_1_3() { return cWaitDirectiveAssignment_1_3; }
		
		//WaitDirective
		public RuleCall getWaitDirectiveWaitDirectiveParserRuleCall_1_3_0() { return cWaitDirectiveWaitDirectiveParserRuleCall_1_3_0; }
		
		//behaviorInvocation=BehaviorInvocation
		public Assignment getBehaviorInvocationAssignment_1_4() { return cBehaviorInvocationAssignment_1_4; }
		
		//BehaviorInvocation
		public RuleCall getBehaviorInvocationBehaviorInvocationParserRuleCall_1_4_0() { return cBehaviorInvocationBehaviorInvocationParserRuleCall_1_4_0; }
	}
	public class CompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.Composition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCompositionOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCompositionOpCompositionOptionsParserRuleCall_0_0 = (RuleCall)cCompositionOpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentListArgumentListParserRuleCall_1_1_0 = (RuleCall)cArgumentListAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cDoMembersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cDoMembersDoDirectiveMemberParserRuleCall_4_0_0 = (RuleCall)cDoMembersAssignment_4_0.eContents().get(0);
		private final Assignment cWithDeclarationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWithDeclarationBehaviorWithDeclarationParserRuleCall_4_1_0 = (RuleCall)cWithDeclarationAssignment_4_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Composition:
		//    compositionOp = CompositionOptions ('(' argumentList=ArgumentList ')')? ':'
		//    BEGIN
		//        (doMembers+=DoDirectiveMember (withDeclaration+=BehaviorWithDeclaration)?)*
		//    END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//compositionOp = CompositionOptions ('(' argumentList=ArgumentList ')')? ':'
		//BEGIN
		//    (doMembers+=DoDirectiveMember (withDeclaration+=BehaviorWithDeclaration)?)*
		//END
		public Group getGroup() { return cGroup; }
		
		//compositionOp = CompositionOptions
		public Assignment getCompositionOpAssignment_0() { return cCompositionOpAssignment_0; }
		
		//CompositionOptions
		public RuleCall getCompositionOpCompositionOptionsParserRuleCall_0_0() { return cCompositionOpCompositionOptionsParserRuleCall_0_0; }
		
		//('(' argumentList=ArgumentList ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//argumentList=ArgumentList
		public Assignment getArgumentListAssignment_1_1() { return cArgumentListAssignment_1_1; }
		
		//ArgumentList
		public RuleCall getArgumentListArgumentListParserRuleCall_1_1_0() { return cArgumentListArgumentListParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//(doMembers+=DoDirectiveMember (withDeclaration+=BehaviorWithDeclaration)?)*
		public Group getGroup_4() { return cGroup_4; }
		
		//doMembers+=DoDirectiveMember
		public Assignment getDoMembersAssignment_4_0() { return cDoMembersAssignment_4_0; }
		
		//DoDirectiveMember
		public RuleCall getDoMembersDoDirectiveMemberParserRuleCall_4_0_0() { return cDoMembersDoDirectiveMemberParserRuleCall_4_0_0; }
		
		//(withDeclaration+=BehaviorWithDeclaration)?
		public Assignment getWithDeclarationAssignment_4_1() { return cWithDeclarationAssignment_4_1; }
		
		//BehaviorWithDeclaration
		public RuleCall getWithDeclarationBehaviorWithDeclarationParserRuleCall_4_1_0() { return cWithDeclarationBehaviorWithDeclarationParserRuleCall_4_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class CompositionOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.CompositionOptions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSerialKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOne_ofKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cParallelKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//CompositionOptions:
		//    'serial' | 'one_of' | 'parallel'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'serial' | 'one_of' | 'parallel'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'serial'
		public Keyword getSerialKeyword_0() { return cSerialKeyword_0; }
		
		//'one_of'
		public Keyword getOne_ofKeyword_1() { return cOne_ofKeyword_1; }
		
		//'parallel'
		public Keyword getParallelKeyword_2() { return cParallelKeyword_2; }
	}
	public class BehaviorInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.BehaviorInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActorExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActorExpressionExpressionParserRuleCall_0_0 = (RuleCall)cActorExpressionAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentListArgumentListParserRuleCall_2_0 = (RuleCall)cArgumentListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BehaviorInvocation:
		//    actorExpression=Expression '(' (argumentList=ArgumentList)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//actorExpression=Expression '(' (argumentList=ArgumentList)? ')'
		public Group getGroup() { return cGroup; }
		
		//actorExpression=Expression
		public Assignment getActorExpressionAssignment_0() { return cActorExpressionAssignment_0; }
		
		//Expression
		public RuleCall getActorExpressionExpressionParserRuleCall_0_0() { return cActorExpressionExpressionParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(argumentList=ArgumentList)?
		public Assignment getArgumentListAssignment_2() { return cArgumentListAssignment_2; }
		
		//ArgumentList
		public RuleCall getArgumentListArgumentListParserRuleCall_2_0() { return cArgumentListArgumentListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParameterWithDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ParameterWithDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cParameterWithMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterWithMembersConstraintDeclarationParserRuleCall_3_0 = (RuleCall)cParameterWithMembersAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		////ParameterWith
		//ParameterWithDeclaration:
		//    'with' ':'
		//    BEGIN
		//        (parameterWithMembers+=ConstraintDeclaration)*
		//    END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'with' ':'
		//BEGIN
		//    (parameterWithMembers+=ConstraintDeclaration)*
		//END
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//(parameterWithMembers+=ConstraintDeclaration)*
		public Assignment getParameterWithMembersAssignment_3() { return cParameterWithMembersAssignment_3; }
		
		//ConstraintDeclaration
		public RuleCall getParameterWithMembersConstraintDeclarationParserRuleCall_3_0() { return cParameterWithMembersConstraintDeclarationParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class BehaviorWithDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.BehaviorWithDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cBehaviorWithMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBehaviorWithMembersBehaviorWithMemberParserRuleCall_3_0 = (RuleCall)cBehaviorWithMembersAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		////BehaviorWith
		//BehaviorWithDeclaration:
		//    'with' ':'
		//    BEGIN
		//        (behaviorWithMembers+=BehaviorWithMember)*
		//    END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'with' ':'
		//BEGIN
		//    (behaviorWithMembers+=BehaviorWithMember)*
		//END
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//(behaviorWithMembers+=BehaviorWithMember)*
		public Assignment getBehaviorWithMembersAssignment_3() { return cBehaviorWithMembersAssignment_3; }
		
		//BehaviorWithMember
		public RuleCall getBehaviorWithMembersBehaviorWithMemberParserRuleCall_3_0() { return cBehaviorWithMembersBehaviorWithMemberParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class BehaviorWithMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.BehaviorWithMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstraintDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBehaviorInvocationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUntilDirectiveParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BehaviorWithMember:
		//    ConstraintDeclaration | BehaviorInvocation | UntilDirective
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConstraintDeclaration | BehaviorInvocation | UntilDirective
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConstraintDeclaration
		public RuleCall getConstraintDeclarationParserRuleCall_0() { return cConstraintDeclarationParserRuleCall_0; }
		
		//BehaviorInvocation
		public RuleCall getBehaviorInvocationParserRuleCall_1() { return cBehaviorInvocationParserRuleCall_1; }
		
		//UntilDirective
		public RuleCall getUntilDirectiveParserRuleCall_2() { return cUntilDirectiveParserRuleCall_2; }
	}
	public class ConstraintDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ConstraintDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKeepConstraintDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRemoveDefaultDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConstraintDeclaration:
		//    KeepConstraintDeclaration | RemoveDefaultDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//KeepConstraintDeclaration | RemoveDefaultDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//KeepConstraintDeclaration
		public RuleCall getKeepConstraintDeclarationParserRuleCall_0() { return cKeepConstraintDeclarationParserRuleCall_0; }
		
		//RemoveDefaultDeclaration
		public RuleCall getRemoveDefaultDeclarationParserRuleCall_1() { return cRemoveDefaultDeclarationParserRuleCall_1; }
	}
	public class KeepConstraintDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.KeepConstraintDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKeepKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstraintQualifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintQualifierConstraintQualifierParserRuleCall_2_0 = (RuleCall)cConstraintQualifierAssignment_2.eContents().get(0);
		private final Assignment cConstraintExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintExpressionExpressionParserRuleCall_3_0 = (RuleCall)cConstraintExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//KeepConstraintDeclaration:
		//    'keep' '(' (constraintQualifier=ConstraintQualifier)? constraintExpression=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'keep' '(' (constraintQualifier=ConstraintQualifier)? constraintExpression=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'keep'
		public Keyword getKeepKeyword_0() { return cKeepKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(constraintQualifier=ConstraintQualifier)?
		public Assignment getConstraintQualifierAssignment_2() { return cConstraintQualifierAssignment_2; }
		
		//ConstraintQualifier
		public RuleCall getConstraintQualifierConstraintQualifierParserRuleCall_2_0() { return cConstraintQualifierConstraintQualifierParserRuleCall_2_0; }
		
		//constraintExpression=Expression
		public Assignment getConstraintExpressionAssignment_3() { return cConstraintExpressionAssignment_3; }
		
		//Expression
		public RuleCall getConstraintExpressionExpressionParserRuleCall_3_0() { return cConstraintExpressionExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ConstraintQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ConstraintQualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHardKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ConstraintQualifier:
		//    'default' | 'hard'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'default' | 'hard'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'default'
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }
		
		//'hard'
		public Keyword getHardKeyword_1() { return cHardKeyword_1; }
	}
	public class RemoveDefaultDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.RemoveDefaultDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemove_defaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterReferenceParameterReferenceParserRuleCall_2_0 = (RuleCall)cParameterReferenceAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RemoveDefaultDeclaration:
		//    'remove_default' '(' parameterReference=ParameterReference ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'remove_default' '(' parameterReference=ParameterReference ')'
		public Group getGroup() { return cGroup; }
		
		//'remove_default'
		public Keyword getRemove_defaultKeyword_0() { return cRemove_defaultKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameterReference=ParameterReference
		public Assignment getParameterReferenceAssignment_2() { return cParameterReferenceAssignment_2; }
		
		//ParameterReference
		public RuleCall getParameterReferenceParameterReferenceParserRuleCall_2_0() { return cParameterReferenceParameterReferenceParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class UntilDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.UntilDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUntilKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventSpecificationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventSpecificationEventSpecificationParserRuleCall_1_0 = (RuleCall)cEventSpecificationAssignment_1.eContents().get(0);
		
		//UntilDirective:
		//    'until' eventSpecification=EventSpecification
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'until' eventSpecification=EventSpecification
		public Group getGroup() { return cGroup; }
		
		//'until'
		public Keyword getUntilKeyword_0() { return cUntilKeyword_0; }
		
		//eventSpecification=EventSpecification
		public Assignment getEventSpecificationAssignment_1() { return cEventSpecificationAssignment_1; }
		
		//EventSpecification
		public RuleCall getEventSpecificationEventSpecificationParserRuleCall_1_0() { return cEventSpecificationEventSpecificationParserRuleCall_1_0; }
	}
	public class ArgumentListSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ArgumentListSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentSpecificationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentSpecificationArgumentSpecificationParserRuleCall_0_0 = (RuleCall)cArgumentSpecificationAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentSpecificationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentSpecificationArgumentSpecificationParserRuleCall_1_1_0 = (RuleCall)cArgumentSpecificationAssignment_1_1.eContents().get(0);
		
		////Argument List
		//ArgumentListSpecification:
		//    argumentSpecification+=ArgumentSpecification (',' argumentSpecification+=ArgumentSpecification)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//argumentSpecification+=ArgumentSpecification (',' argumentSpecification+=ArgumentSpecification)
		public Group getGroup() { return cGroup; }
		
		//argumentSpecification+=ArgumentSpecification
		public Assignment getArgumentSpecificationAssignment_0() { return cArgumentSpecificationAssignment_0; }
		
		//ArgumentSpecification
		public RuleCall getArgumentSpecificationArgumentSpecificationParserRuleCall_0_0() { return cArgumentSpecificationArgumentSpecificationParserRuleCall_0_0; }
		
		//(',' argumentSpecification+=ArgumentSpecification)
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//argumentSpecification+=ArgumentSpecification
		public Assignment getArgumentSpecificationAssignment_1_1() { return cArgumentSpecificationAssignment_1_1; }
		
		//ArgumentSpecification
		public RuleCall getArgumentSpecificationArgumentSpecificationParserRuleCall_1_1_0() { return cArgumentSpecificationArgumentSpecificationParserRuleCall_1_1_0; }
	}
	public class ArgumentSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ArgumentSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentNameIDTerminalRuleCall_0_0 = (RuleCall)cArgumentNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeDeclaratorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDeclaratorTypeDeclaratorParserRuleCall_2_0 = (RuleCall)cTypeDeclaratorAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_3_1_0 = (RuleCall)cDefaultValueAssignment_3_1.eContents().get(0);
		
		//ArgumentSpecification:
		//    argumentName=ID ':' typeDeclarator=TypeDeclarator ('=' defaultValue=Expression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//argumentName=ID ':' typeDeclarator=TypeDeclarator ('=' defaultValue=Expression)?
		public Group getGroup() { return cGroup; }
		
		//argumentName=ID
		public Assignment getArgumentNameAssignment_0() { return cArgumentNameAssignment_0; }
		
		//ID
		public RuleCall getArgumentNameIDTerminalRuleCall_0_0() { return cArgumentNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//typeDeclarator=TypeDeclarator
		public Assignment getTypeDeclaratorAssignment_2() { return cTypeDeclaratorAssignment_2; }
		
		//TypeDeclarator
		public RuleCall getTypeDeclaratorTypeDeclaratorParserRuleCall_2_0() { return cTypeDeclaratorTypeDeclaratorParserRuleCall_2_0; }
		
		//('=' defaultValue=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_3_1() { return cDefaultValueAssignment_3_1; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_3_1_0() { return cDefaultValueExpressionParserRuleCall_3_1_0; }
	}
	public class ArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ArgumentList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPositionalArgumentsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPositionalArgumentsExpressionParserRuleCall_0_0_0 = (RuleCall)cPositionalArgumentsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cPositionalArgumentsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cPositionalArgumentsExpressionParserRuleCall_0_1_1_0 = (RuleCall)cPositionalArgumentsAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cNamedArgumentsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cNamedArgumentsNamedArgumentParserRuleCall_0_2_1_0 = (RuleCall)cNamedArgumentsAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNamedArgumentsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNamedArgumentsNamedArgumentParserRuleCall_1_0_0 = (RuleCall)cNamedArgumentsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNamedArgumentsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNamedArgumentsNamedArgumentParserRuleCall_1_1_1_0 = (RuleCall)cNamedArgumentsAssignment_1_1_1.eContents().get(0);
		
		//ArgumentList:
		//    positionalArguments+=Expression (',' positionalArguments+=Expression)*
		//    (',' namedArguments+=NamedArgument)* |
		//    namedArguments+=NamedArgument (',' namedArguments+=NamedArgument)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//positionalArguments+=Expression (',' positionalArguments+=Expression)*
		//(',' namedArguments+=NamedArgument)* |
		//namedArguments+=NamedArgument (',' namedArguments+=NamedArgument)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//positionalArguments+=Expression (',' positionalArguments+=Expression)*
		//(',' namedArguments+=NamedArgument)*
		public Group getGroup_0() { return cGroup_0; }
		
		//positionalArguments+=Expression
		public Assignment getPositionalArgumentsAssignment_0_0() { return cPositionalArgumentsAssignment_0_0; }
		
		//Expression
		public RuleCall getPositionalArgumentsExpressionParserRuleCall_0_0_0() { return cPositionalArgumentsExpressionParserRuleCall_0_0_0; }
		
		//(',' positionalArguments+=Expression)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//','
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }
		
		//positionalArguments+=Expression
		public Assignment getPositionalArgumentsAssignment_0_1_1() { return cPositionalArgumentsAssignment_0_1_1; }
		
		//Expression
		public RuleCall getPositionalArgumentsExpressionParserRuleCall_0_1_1_0() { return cPositionalArgumentsExpressionParserRuleCall_0_1_1_0; }
		
		//(',' namedArguments+=NamedArgument)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//namedArguments+=NamedArgument
		public Assignment getNamedArgumentsAssignment_0_2_1() { return cNamedArgumentsAssignment_0_2_1; }
		
		//NamedArgument
		public RuleCall getNamedArgumentsNamedArgumentParserRuleCall_0_2_1_0() { return cNamedArgumentsNamedArgumentParserRuleCall_0_2_1_0; }
		
		//namedArguments+=NamedArgument (',' namedArguments+=NamedArgument)*
		public Group getGroup_1() { return cGroup_1; }
		
		//namedArguments+=NamedArgument
		public Assignment getNamedArgumentsAssignment_1_0() { return cNamedArgumentsAssignment_1_0; }
		
		//NamedArgument
		public RuleCall getNamedArgumentsNamedArgumentParserRuleCall_1_0_0() { return cNamedArgumentsNamedArgumentParserRuleCall_1_0_0; }
		
		//(',' namedArguments+=NamedArgument)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//namedArguments+=NamedArgument
		public Assignment getNamedArgumentsAssignment_1_1_1() { return cNamedArgumentsAssignment_1_1_1; }
		
		//NamedArgument
		public RuleCall getNamedArgumentsNamedArgumentParserRuleCall_1_1_1_0() { return cNamedArgumentsNamedArgumentParserRuleCall_1_1_1_0; }
	}
	public class NamedArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.NamedArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cArgumentNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cArgumentNameIDTerminalRuleCall_0_0_0 = (RuleCall)cArgumentNameAssignment_0_0.eContents().get(0);
		private final Keyword cOffsetKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgumentListAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgumentListArgumentListParserRuleCall_3_1_0 = (RuleCall)cArgumentListAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//NamedArgument:
		//    (argumentName=ID | 'offset') ':' expression=Expression ('(' (argumentList=ArgumentList)? ')')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(argumentName=ID | 'offset') ':' expression=Expression ('(' (argumentList=ArgumentList)? ')')?
		public Group getGroup() { return cGroup; }
		
		//(argumentName=ID | 'offset')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//argumentName=ID
		public Assignment getArgumentNameAssignment_0_0() { return cArgumentNameAssignment_0_0; }
		
		//ID
		public RuleCall getArgumentNameIDTerminalRuleCall_0_0_0() { return cArgumentNameIDTerminalRuleCall_0_0_0; }
		
		//'offset'
		public Keyword getOffsetKeyword_0_1() { return cOffsetKeyword_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//('(' (argumentList=ArgumentList)? ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//(argumentList=ArgumentList)?
		public Assignment getArgumentListAssignment_3_1() { return cArgumentListAssignment_3_1; }
		
		//ArgumentList
		public RuleCall getArgumentListArgumentListParserRuleCall_3_1_0() { return cArgumentListArgumentListParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class PostfixExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.PostfixExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrimaryExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrimaryExpPrimaryExpParserRuleCall_0_0 = (RuleCall)cPrimaryExpAssignment_0.eContents().get(0);
		private final Assignment cTailAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTailPostfixExpTailParserRuleCall_1_0 = (RuleCall)cTailAssignment_1.eContents().get(0);
		
		////PostfixExp
		//PostfixExp:
		//    primaryExp=PrimaryExp (tail+=PostfixExpTail)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//primaryExp=PrimaryExp (tail+=PostfixExpTail)*
		public Group getGroup() { return cGroup; }
		
		//primaryExp=PrimaryExp
		public Assignment getPrimaryExpAssignment_0() { return cPrimaryExpAssignment_0; }
		
		//PrimaryExp
		public RuleCall getPrimaryExpPrimaryExpParserRuleCall_0_0() { return cPrimaryExpPrimaryExpParserRuleCall_0_0; }
		
		//(tail+=PostfixExpTail)*
		public Assignment getTailAssignment_1() { return cTailAssignment_1; }
		
		//PostfixExpTail
		public RuleCall getTailPostfixExpTailParserRuleCall_1_0() { return cTailPostfixExpTailParserRuleCall_1_0; }
	}
	public class PostfixExpTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.PostfixExpTail");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCastExpTailParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeTestTailParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFieldAccessTailParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PostfixExpTail:
		//    CastExpTail | TypeTestTail | FieldAccessTail
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CastExpTail | TypeTestTail | FieldAccessTail
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CastExpTail
		public RuleCall getCastExpTailParserRuleCall_0() { return cCastExpTailParserRuleCall_0; }
		
		//TypeTestTail
		public RuleCall getTypeTestTailParserRuleCall_1() { return cTypeTestTailParserRuleCall_1; }
		
		//FieldAccessTail
		public RuleCall getFieldAccessTailParserRuleCall_2() { return cFieldAccessTailParserRuleCall_2; }
	}
	public class CastExpTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.CastExpTail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeDeclaratorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDeclaratorTypeDeclaratorParserRuleCall_3_0 = (RuleCall)cTypeDeclaratorAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CastExpTail:
		//    '.' 'as' '(' typeDeclarator+=TypeDeclarator ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' 'as' '(' typeDeclarator+=TypeDeclarator ')'
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//'as'
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//typeDeclarator+=TypeDeclarator
		public Assignment getTypeDeclaratorAssignment_3() { return cTypeDeclaratorAssignment_3; }
		
		//TypeDeclarator
		public RuleCall getTypeDeclaratorTypeDeclaratorParserRuleCall_3_0() { return cTypeDeclaratorTypeDeclaratorParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TypeTestTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.TypeTestTail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeDeclaratorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDeclaratorTypeDeclaratorParserRuleCall_3_0 = (RuleCall)cTypeDeclaratorAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TypeTestTail:
		//    '.' 'is' '(' typeDeclarator+=TypeDeclarator ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' 'is' '(' typeDeclarator+=TypeDeclarator ')'
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//typeDeclarator+=TypeDeclarator
		public Assignment getTypeDeclaratorAssignment_3() { return cTypeDeclaratorAssignment_3; }
		
		//TypeDeclarator
		public RuleCall getTypeDeclaratorTypeDeclaratorParserRuleCall_3_0() { return cTypeDeclaratorTypeDeclaratorParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ElementAccessTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ElementAccessTail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ElementAccessTail:
		//    '[' expression+=Expression ']' //Couldn't integrate without generating fatal errors
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' expression+=Expression ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class FieldAccessTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.FieldAccessTail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldNameIDTerminalRuleCall_1_0 = (RuleCall)cFieldNameAssignment_1.eContents().get(0);
		
		//FieldAccessTail:
		//    '.' fieldName+=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' fieldName+=ID
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//fieldName+=ID
		public Assignment getFieldNameAssignment_1() { return cFieldNameAssignment_1; }
		
		//ID
		public RuleCall getFieldNameIDTerminalRuleCall_1_0() { return cFieldNameIDTerminalRuleCall_1_0; }
	}
	public class MethodInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.MethodInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPostfixExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentListArgumentListParserRuleCall_2_0 = (RuleCall)cArgumentListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MethodInvocation:
		//    PostfixExp '(' (argumentList+=ArgumentList)? ')' //Generate Warnings: Repetition of the format in some cases
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PostfixExp '(' (argumentList+=ArgumentList)? ')'
		public Group getGroup() { return cGroup; }
		
		//PostfixExp
		public RuleCall getPostfixExpParserRuleCall_0() { return cPostfixExpParserRuleCall_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(argumentList+=ArgumentList)?
		public Assignment getArgumentListAssignment_2() { return cArgumentListAssignment_2; }
		
		//ArgumentList
		public RuleCall getArgumentListArgumentListParserRuleCall_2_0() { return cArgumentListArgumentListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParameterReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ParameterReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPostfixExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldNameIDTerminalRuleCall_2_0 = (RuleCall)cFieldNameAssignment_2.eContents().get(0);
		
		//ParameterReference:
		//    (PostfixExp '.' fieldName+=ID) //Generate Warnings: Repetition of the format in some cases
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(PostfixExp '.' fieldName+=ID)
		public Group getGroup() { return cGroup; }
		
		//PostfixExp
		public RuleCall getPostfixExpParserRuleCall_0() { return cPostfixExpParserRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//fieldName+=ID
		public Assignment getFieldNameAssignment_2() { return cFieldNameAssignment_2; }
		
		//ID
		public RuleCall getFieldNameIDTerminalRuleCall_2_0() { return cFieldNameIDTerminalRuleCall_2_0; }
	}
	public class PrimaryExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.PrimaryExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cItKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cValueExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListConstructorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRangeConstructorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		////Assistence
		//PrimaryExp:
		//     'it' | ValueExp | ListConstructor | RangeConstructor
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'it' | ValueExp | ListConstructor | RangeConstructor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'it'
		public Keyword getItKeyword_0() { return cItKeyword_0; }
		
		//ValueExp
		public RuleCall getValueExpParserRuleCall_1() { return cValueExpParserRuleCall_1; }
		
		//ListConstructor
		public RuleCall getListConstructorParserRuleCall_2() { return cListConstructorParserRuleCall_2; }
		
		//RangeConstructor
		public RuleCall getRangeConstructorParserRuleCall_3() { return cRangeConstructorParserRuleCall_3; }
	}
	public class ValueExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ValueExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBOOLTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPhysicalTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumValueReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ValueExp:
		//    BOOL | PhysicalType | STRING | EnumValueReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BOOL | PhysicalType | STRING | EnumValueReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BOOL
		public RuleCall getBOOLTerminalRuleCall_0() { return cBOOLTerminalRuleCall_0; }
		
		//PhysicalType
		public RuleCall getPhysicalTypeParserRuleCall_1() { return cPhysicalTypeParserRuleCall_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//EnumValueReference
		public RuleCall getEnumValueReferenceParserRuleCall_3() { return cEnumValueReferenceParserRuleCall_3; }
	}
	public class PhysicalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.PhysicalType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNumberIntegerAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cNumberIntegerINTEGERTerminalRuleCall_0_0_0 = (RuleCall)cNumberIntegerAssignment_0_0.eContents().get(0);
		private final Assignment cNumberFloatAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cNumberFloatFLOATTerminalRuleCall_0_1_0 = (RuleCall)cNumberFloatAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cUnitBaseNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cUnitBaseNameSIBaseUnitNameParserRuleCall_1_0_0 = (RuleCall)cUnitBaseNameAssignment_1_0.eContents().get(0);
		private final Assignment cUnitNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cUnitNameIDTerminalRuleCall_1_1_0 = (RuleCall)cUnitNameAssignment_1_1.eContents().get(0);
		
		//PhysicalType:
		//    (numberInteger = INTEGER | numberFloat = FLOAT) (unitBaseName=SIBaseUnitName |unitName=ID)? //Generate Warnings: Due to ID considers all text
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(numberInteger = INTEGER | numberFloat = FLOAT) (unitBaseName=SIBaseUnitName |unitName=ID)?
		public Group getGroup() { return cGroup; }
		
		//(numberInteger = INTEGER | numberFloat = FLOAT)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//numberInteger = INTEGER
		public Assignment getNumberIntegerAssignment_0_0() { return cNumberIntegerAssignment_0_0; }
		
		//INTEGER
		public RuleCall getNumberIntegerINTEGERTerminalRuleCall_0_0_0() { return cNumberIntegerINTEGERTerminalRuleCall_0_0_0; }
		
		//numberFloat = FLOAT
		public Assignment getNumberFloatAssignment_0_1() { return cNumberFloatAssignment_0_1; }
		
		//FLOAT
		public RuleCall getNumberFloatFLOATTerminalRuleCall_0_1_0() { return cNumberFloatFLOATTerminalRuleCall_0_1_0; }
		
		//(unitBaseName=SIBaseUnitName |unitName=ID)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//unitBaseName=SIBaseUnitName
		public Assignment getUnitBaseNameAssignment_1_0() { return cUnitBaseNameAssignment_1_0; }
		
		//SIBaseUnitName
		public RuleCall getUnitBaseNameSIBaseUnitNameParserRuleCall_1_0_0() { return cUnitBaseNameSIBaseUnitNameParserRuleCall_1_0_0; }
		
		//unitName=ID
		public Assignment getUnitNameAssignment_1_1() { return cUnitNameAssignment_1_1; }
		
		//ID
		public RuleCall getUnitNameIDTerminalRuleCall_1_1_0() { return cUnitNameIDTerminalRuleCall_1_1_0; }
	}
	public class ListConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.ListConstructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsValueExpParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsValueExpParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// List constructor
		//ListConstructor:
		//    '[' elements+=ValueExp (',' elements+=ValueExp)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' elements+=ValueExp (',' elements+=ValueExp)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//elements+=ValueExp
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//ValueExp
		public RuleCall getElementsValueExpParserRuleCall_1_0() { return cElementsValueExpParserRuleCall_1_0; }
		
		//(',' elements+=ValueExp)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//elements+=ValueExp
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }
		
		//ValueExp
		public RuleCall getElementsValueExpParserRuleCall_2_1_0() { return cElementsValueExpParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class RangeConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.RangeConstructor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cRangeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cStartAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cStartValueExpParserRuleCall_0_2_0 = (RuleCall)cStartAssignment_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cEndAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cEndValueExpParserRuleCall_0_4_0 = (RuleCall)cEndAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStartAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStartValueExpParserRuleCall_1_1_0 = (RuleCall)cStartAssignment_1_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cEndAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cEndValueExpParserRuleCall_1_3_0 = (RuleCall)cEndAssignment_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//// Range constructor
		//RangeConstructor:
		//    'range' '(' start=ValueExp ',' end=ValueExp ')' |
		//    '[' start=ValueExp '..' end=ValueExp ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'range' '(' start=ValueExp ',' end=ValueExp ')' |
		//'[' start=ValueExp '..' end=ValueExp ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'range' '(' start=ValueExp ',' end=ValueExp ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'range'
		public Keyword getRangeKeyword_0_0() { return cRangeKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//start=ValueExp
		public Assignment getStartAssignment_0_2() { return cStartAssignment_0_2; }
		
		//ValueExp
		public RuleCall getStartValueExpParserRuleCall_0_2_0() { return cStartValueExpParserRuleCall_0_2_0; }
		
		//','
		public Keyword getCommaKeyword_0_3() { return cCommaKeyword_0_3; }
		
		//end=ValueExp
		public Assignment getEndAssignment_0_4() { return cEndAssignment_0_4; }
		
		//ValueExp
		public RuleCall getEndValueExpParserRuleCall_0_4_0() { return cEndValueExpParserRuleCall_0_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }
		
		//'[' start=ValueExp '..' end=ValueExp ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//start=ValueExp
		public Assignment getStartAssignment_1_1() { return cStartAssignment_1_1; }
		
		//ValueExp
		public RuleCall getStartValueExpParserRuleCall_1_1_0() { return cStartValueExpParserRuleCall_1_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_2() { return cFullStopFullStopKeyword_1_2; }
		
		//end=ValueExp
		public Assignment getEndAssignment_1_3() { return cEndAssignment_1_3; }
		
		//ValueExp
		public RuleCall getEndValueExpParserRuleCall_1_3_0() { return cEndValueExpParserRuleCall_1_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionExpressionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTrueResultAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTrueResultExpressionParserRuleCall_2_0 = (RuleCall)cTrueResultAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFalseResultAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFalseResultExpressionParserRuleCall_4_0 = (RuleCall)cFalseResultAssignment_4.eContents().get(0);
		
		//Condition:
		//    condition = Expression '?' trueResult=Expression ':' falseResult=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//condition = Expression '?' trueResult=Expression ':' falseResult=Expression
		public Group getGroup() { return cGroup; }
		
		//condition = Expression
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_0_0() { return cConditionExpressionParserRuleCall_0_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
		
		//trueResult=Expression
		public Assignment getTrueResultAssignment_2() { return cTrueResultAssignment_2; }
		
		//Expression
		public RuleCall getTrueResultExpressionParserRuleCall_2_0() { return cTrueResultExpressionParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//falseResult=Expression
		public Assignment getFalseResultAssignment_4() { return cFalseResultAssignment_4; }
		
		//Expression
		public RuleCall getFalseResultExpressionParserRuleCall_4_0() { return cFalseResultExpressionParserRuleCall_4_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.Expression");
		private final RuleCall cRelationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//     Relation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Relation
		public RuleCall getRelationParserRuleCall() { return cRelationParserRuleCall; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSumParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRelationalOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRelationalOpRelationalOpParserRuleCall_2_0_0 = (RuleCall)cRelationalOpAssignment_2_0.eContents().get(0);
		private final Assignment cNextSumAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNextSumSumParserRuleCall_2_1_0 = (RuleCall)cNextSumAssignment_2_1.eContents().get(0);
		
		//Relation:
		//    ('not')? Sum (relationalOp+=RelationalOp nextSum+=Sum)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('not')? Sum (relationalOp+=RelationalOp nextSum+=Sum)*
		public Group getGroup() { return cGroup; }
		
		//('not')?
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//Sum
		public RuleCall getSumParserRuleCall_1() { return cSumParserRuleCall_1; }
		
		//(relationalOp+=RelationalOp nextSum+=Sum)*
		public Group getGroup_2() { return cGroup_2; }
		
		//relationalOp+=RelationalOp
		public Assignment getRelationalOpAssignment_2_0() { return cRelationalOpAssignment_2_0; }
		
		//RelationalOp
		public RuleCall getRelationalOpRelationalOpParserRuleCall_2_0_0() { return cRelationalOpRelationalOpParserRuleCall_2_0_0; }
		
		//nextSum+=Sum
		public Assignment getNextSumAssignment_2_1() { return cNextSumAssignment_2_1; }
		
		//Sum
		public RuleCall getNextSumSumParserRuleCall_2_1_0() { return cNextSumSumParserRuleCall_2_1_0; }
	}
	public class RelationalOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.RelationalOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cInKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAndKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cOrKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cEqualsSignGreaterThanSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//RelationalOp:
		//    '==' | '!=' | '<' | '<=' | '>' | '>=' | 'in' | 'and' | 'or' | '=>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'==' | '!=' | '<' | '<=' | '>' | '>=' | 'in' | 'and' | 'or' | '=>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_5() { return cGreaterThanSignEqualsSignKeyword_5; }
		
		//'in'
		public Keyword getInKeyword_6() { return cInKeyword_6; }
		
		//'and'
		public Keyword getAndKeyword_7() { return cAndKeyword_7; }
		
		//'or'
		public Keyword getOrKeyword_8() { return cOrKeyword_8; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_9() { return cEqualsSignGreaterThanSignKeyword_9; }
	}
	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAdditiveOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAdditiveOpAdditiveOpParserRuleCall_1_0_0 = (RuleCall)cAdditiveOpAssignment_1_0.eContents().get(0);
		private final Assignment cNextTermAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextTermTermParserRuleCall_1_1_0 = (RuleCall)cNextTermAssignment_1_1.eContents().get(0);
		
		//Sum:
		//    Term (additiveOp+=AdditiveOp nextTerm+=Term)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Term (additiveOp+=AdditiveOp nextTerm+=Term)*
		public Group getGroup() { return cGroup; }
		
		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }
		
		//(additiveOp+=AdditiveOp nextTerm+=Term)*
		public Group getGroup_1() { return cGroup_1; }
		
		//additiveOp+=AdditiveOp
		public Assignment getAdditiveOpAssignment_1_0() { return cAdditiveOpAssignment_1_0; }
		
		//AdditiveOp
		public RuleCall getAdditiveOpAdditiveOpParserRuleCall_1_0_0() { return cAdditiveOpAdditiveOpParserRuleCall_1_0_0; }
		
		//nextTerm+=Term
		public Assignment getNextTermAssignment_1_1() { return cNextTermAssignment_1_1; }
		
		//Term
		public RuleCall getNextTermTermParserRuleCall_1_1_0() { return cNextTermTermParserRuleCall_1_1_0; }
	}
	public class AdditiveOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.AdditiveOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AdditiveOp:
		//    '+' | '-' //Generate Warnings: Due to repetition of the format +2, -0x45
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cMultiplicativeOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cMultiplicativeOpMultiplicativeOpParserRuleCall_1_0_0 = (RuleCall)cMultiplicativeOpAssignment_1_0.eContents().get(0);
		private final Assignment cNextFactorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextFactorFactorParserRuleCall_1_1_0 = (RuleCall)cNextFactorAssignment_1_1.eContents().get(0);
		
		//Term:
		//    Factor (multiplicativeOp+=MultiplicativeOp nextFactor+=Factor)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor (multiplicativeOp+=MultiplicativeOp nextFactor+=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//(multiplicativeOp+=MultiplicativeOp nextFactor+=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//multiplicativeOp+=MultiplicativeOp
		public Assignment getMultiplicativeOpAssignment_1_0() { return cMultiplicativeOpAssignment_1_0; }
		
		//MultiplicativeOp
		public RuleCall getMultiplicativeOpMultiplicativeOpParserRuleCall_1_0_0() { return cMultiplicativeOpMultiplicativeOpParserRuleCall_1_0_0; }
		
		//nextFactor+=Factor
		public Assignment getNextFactorAssignment_1_1() { return cNextFactorAssignment_1_1; }
		
		//Factor
		public RuleCall getNextFactorFactorParserRuleCall_1_1_0() { return cNextFactorFactorParserRuleCall_1_1_0; }
	}
	public class MultiplicativeOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.MultiplicativeOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//MultiplicativeOp:
		//    '*' | '/' | '%'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/' | '%'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPostfixExpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Factor:
		//    ('-')? PostfixExp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('-')? PostfixExp
		public Group getGroup() { return cGroup; }
		
		//('-')?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//PostfixExp
		public RuleCall getPostfixExpParserRuleCall_1() { return cPostfixExpParserRuleCall_1; }
	}
	
	
	private final OscFileElements pOscFile;
	private final PreludeStatementElements pPreludeStatement;
	private final ImportStatementElements pImportStatement;
	private final ImportReferenceElements pImportReference;
	private final StructuredIDElements pStructuredID;
	private final OscDeclarationElements pOscDeclaration;
	private final PhysicalTypeDeclarationElements pPhysicalTypeDeclaration;
	private final UnitDeclarationElements pUnitDeclaration;
	private final SIBaseUnitSpecifierElements pSIBaseUnitSpecifier;
	private final SIBaseExponentListElements pSIBaseExponentList;
	private final SIBaseExponentElements pSIBaseExponent;
	private final SIUnitSpecifierElements pSIUnitSpecifier;
	private final SIUnitFactorElements pSIUnitFactor;
	private final SIUnitOffsetElements pSIUnitOffset;
	private final SIBaseUnitNameElements pSIBaseUnitName;
	private final TypeExtensionElements pTypeExtension;
	private final EnumTypeExtensionElements pEnumTypeExtension;
	private final StructuredTypeExtensionElements pStructuredTypeExtension;
	private final ExtensionMemberDeclarationElements pExtensionMemberDeclaration;
	private final GlobalParameterDeclarationElements pGlobalParameterDeclaration;
	private final ParameterDeclarationElements pParameterDeclaration;
	private final TypeDeclaratorElements pTypeDeclarator;
	private final NonAggregateTypeDeclaratorElements pNonAggregateTypeDeclarator;
	private final ListTypeDeclaratorElements pListTypeDeclarator;
	private final PrimitiveTypeElements pPrimitiveType;
	private final EnumDeclarationElements pEnumDeclaration;
	private final EnumMemberDeclarationElements pEnumMemberDeclaration;
	private final EnumValueReferenceElements pEnumValueReference;
	private final ModifierDeclarationElements pModifierDeclaration;
	private final ActionDeclarationElements pActionDeclaration;
	private final ActorDeclarationElements pActorDeclaration;
	private final StructDeclarationElements pStructDeclaration;
	private final ScenarioDeclarationElements pScenarioDeclaration;
	private final MemberDeclarationElements pMemberDeclaration;
	private final CoverageDeclarationElements pCoverageDeclaration;
	private final MethodDeclarationElements pMethodDeclaration;
	private final MethodImplementationElements pMethodImplementation;
	private final EventDeclarationElements pEventDeclaration;
	private final EventSpecificationElements pEventSpecification;
	private final EventReferenceElements pEventReference;
	private final EventPathElements pEventPath;
	private final EventConditionElements pEventCondition;
	private final RiseExpressionElements pRiseExpression;
	private final FallExpressionElements pFallExpression;
	private final ElapsedExpressionElements pElapsedExpression;
	private final EveryExpressionElements pEveryExpression;
	private final FieldDeclarationElements pFieldDeclaration;
	private final VariableDeclarationElements pVariableDeclaration;
	private final SampleExpressionElements pSampleExpression;
	private final BehaviorSpecificationElements pBehaviorSpecification;
	private final OnDirectiveElements pOnDirective;
	private final OnDirectiveMemberElements pOnDirectiveMember;
	private final CallDirectiveElements pCallDirective;
	private final EmitDirectiveElements pEmitDirective;
	private final WaitDirectiveElements pWaitDirective;
	private final DoDirectiveElements pDoDirective;
	private final DoDirectiveMemberElements pDoDirectiveMember;
	private final CompositionElements pComposition;
	private final CompositionOptionsElements pCompositionOptions;
	private final BehaviorInvocationElements pBehaviorInvocation;
	private final ParameterWithDeclarationElements pParameterWithDeclaration;
	private final BehaviorWithDeclarationElements pBehaviorWithDeclaration;
	private final BehaviorWithMemberElements pBehaviorWithMember;
	private final ConstraintDeclarationElements pConstraintDeclaration;
	private final KeepConstraintDeclarationElements pKeepConstraintDeclaration;
	private final ConstraintQualifierElements pConstraintQualifier;
	private final RemoveDefaultDeclarationElements pRemoveDefaultDeclaration;
	private final UntilDirectiveElements pUntilDirective;
	private final ArgumentListSpecificationElements pArgumentListSpecification;
	private final ArgumentSpecificationElements pArgumentSpecification;
	private final ArgumentListElements pArgumentList;
	private final NamedArgumentElements pNamedArgument;
	private final PostfixExpElements pPostfixExp;
	private final PostfixExpTailElements pPostfixExpTail;
	private final CastExpTailElements pCastExpTail;
	private final TypeTestTailElements pTypeTestTail;
	private final ElementAccessTailElements pElementAccessTail;
	private final FieldAccessTailElements pFieldAccessTail;
	private final MethodInvocationElements pMethodInvocation;
	private final ParameterReferenceElements pParameterReference;
	private final PrimaryExpElements pPrimaryExp;
	private final ValueExpElements pValueExp;
	private final PhysicalTypeElements pPhysicalType;
	private final ListConstructorElements pListConstructor;
	private final RangeConstructorElements pRangeConstructor;
	private final ConditionElements pCondition;
	private final ExpressionElements pExpression;
	private final RelationElements pRelation;
	private final RelationalOpElements pRelationalOp;
	private final SumElements pSum;
	private final AdditiveOpElements pAdditiveOp;
	private final TermElements pTerm;
	private final MultiplicativeOpElements pMultiplicativeOp;
	private final FactorElements pFactor;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	private final TerminalRule tBOOL;
	private final TerminalRule tINTEGER;
	private final TerminalRule tFLOAT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OpenScenarioGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pOscFile = new OscFileElements();
		this.pPreludeStatement = new PreludeStatementElements();
		this.pImportStatement = new ImportStatementElements();
		this.pImportReference = new ImportReferenceElements();
		this.pStructuredID = new StructuredIDElements();
		this.pOscDeclaration = new OscDeclarationElements();
		this.pPhysicalTypeDeclaration = new PhysicalTypeDeclarationElements();
		this.pUnitDeclaration = new UnitDeclarationElements();
		this.pSIBaseUnitSpecifier = new SIBaseUnitSpecifierElements();
		this.pSIBaseExponentList = new SIBaseExponentListElements();
		this.pSIBaseExponent = new SIBaseExponentElements();
		this.pSIUnitSpecifier = new SIUnitSpecifierElements();
		this.pSIUnitFactor = new SIUnitFactorElements();
		this.pSIUnitOffset = new SIUnitOffsetElements();
		this.pSIBaseUnitName = new SIBaseUnitNameElements();
		this.pTypeExtension = new TypeExtensionElements();
		this.pEnumTypeExtension = new EnumTypeExtensionElements();
		this.pStructuredTypeExtension = new StructuredTypeExtensionElements();
		this.pExtensionMemberDeclaration = new ExtensionMemberDeclarationElements();
		this.pGlobalParameterDeclaration = new GlobalParameterDeclarationElements();
		this.pParameterDeclaration = new ParameterDeclarationElements();
		this.pTypeDeclarator = new TypeDeclaratorElements();
		this.pNonAggregateTypeDeclarator = new NonAggregateTypeDeclaratorElements();
		this.pListTypeDeclarator = new ListTypeDeclaratorElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pEnumDeclaration = new EnumDeclarationElements();
		this.pEnumMemberDeclaration = new EnumMemberDeclarationElements();
		this.pEnumValueReference = new EnumValueReferenceElements();
		this.pModifierDeclaration = new ModifierDeclarationElements();
		this.pActionDeclaration = new ActionDeclarationElements();
		this.pActorDeclaration = new ActorDeclarationElements();
		this.pStructDeclaration = new StructDeclarationElements();
		this.pScenarioDeclaration = new ScenarioDeclarationElements();
		this.pMemberDeclaration = new MemberDeclarationElements();
		this.pCoverageDeclaration = new CoverageDeclarationElements();
		this.pMethodDeclaration = new MethodDeclarationElements();
		this.pMethodImplementation = new MethodImplementationElements();
		this.pEventDeclaration = new EventDeclarationElements();
		this.pEventSpecification = new EventSpecificationElements();
		this.pEventReference = new EventReferenceElements();
		this.pEventPath = new EventPathElements();
		this.pEventCondition = new EventConditionElements();
		this.pRiseExpression = new RiseExpressionElements();
		this.pFallExpression = new FallExpressionElements();
		this.pElapsedExpression = new ElapsedExpressionElements();
		this.pEveryExpression = new EveryExpressionElements();
		this.pFieldDeclaration = new FieldDeclarationElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pSampleExpression = new SampleExpressionElements();
		this.pBehaviorSpecification = new BehaviorSpecificationElements();
		this.pOnDirective = new OnDirectiveElements();
		this.pOnDirectiveMember = new OnDirectiveMemberElements();
		this.pCallDirective = new CallDirectiveElements();
		this.pEmitDirective = new EmitDirectiveElements();
		this.pWaitDirective = new WaitDirectiveElements();
		this.pDoDirective = new DoDirectiveElements();
		this.pDoDirectiveMember = new DoDirectiveMemberElements();
		this.pComposition = new CompositionElements();
		this.pCompositionOptions = new CompositionOptionsElements();
		this.pBehaviorInvocation = new BehaviorInvocationElements();
		this.pParameterWithDeclaration = new ParameterWithDeclarationElements();
		this.pBehaviorWithDeclaration = new BehaviorWithDeclarationElements();
		this.pBehaviorWithMember = new BehaviorWithMemberElements();
		this.pConstraintDeclaration = new ConstraintDeclarationElements();
		this.pKeepConstraintDeclaration = new KeepConstraintDeclarationElements();
		this.pConstraintQualifier = new ConstraintQualifierElements();
		this.pRemoveDefaultDeclaration = new RemoveDefaultDeclarationElements();
		this.pUntilDirective = new UntilDirectiveElements();
		this.pArgumentListSpecification = new ArgumentListSpecificationElements();
		this.pArgumentSpecification = new ArgumentSpecificationElements();
		this.pArgumentList = new ArgumentListElements();
		this.pNamedArgument = new NamedArgumentElements();
		this.pPostfixExp = new PostfixExpElements();
		this.pPostfixExpTail = new PostfixExpTailElements();
		this.pCastExpTail = new CastExpTailElements();
		this.pTypeTestTail = new TypeTestTailElements();
		this.pElementAccessTail = new ElementAccessTailElements();
		this.pFieldAccessTail = new FieldAccessTailElements();
		this.pMethodInvocation = new MethodInvocationElements();
		this.pParameterReference = new ParameterReferenceElements();
		this.pPrimaryExp = new PrimaryExpElements();
		this.pValueExp = new ValueExpElements();
		this.pPhysicalType = new PhysicalTypeElements();
		this.pListConstructor = new ListConstructorElements();
		this.pRangeConstructor = new RangeConstructorElements();
		this.pCondition = new ConditionElements();
		this.pExpression = new ExpressionElements();
		this.pRelation = new RelationElements();
		this.pRelationalOp = new RelationalOpElements();
		this.pSum = new SumElements();
		this.pAdditiveOp = new AdditiveOpElements();
		this.pTerm = new TermElements();
		this.pMultiplicativeOp = new MultiplicativeOpElements();
		this.pFactor = new FactorElements();
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.END");
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.BOOL");
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.INTEGER");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.FLOAT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.SL_COMMENT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.bmwgroup.openscenario.OpenScenario.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.bmwgroup.openscenario.OpenScenario".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//OscFile:
	//    preludeStatements+=PreludeStatement*
	//    oscDeclarations+=OscDeclaration*
	//;
	public OscFileElements getOscFileAccess() {
		return pOscFile;
	}
	
	public ParserRule getOscFileRule() {
		return getOscFileAccess().getRule();
	}
	
	//PreludeStatement:
	//    ImportStatement
	//;
	public PreludeStatementElements getPreludeStatementAccess() {
		return pPreludeStatement;
	}
	
	public ParserRule getPreludeStatementRule() {
		return getPreludeStatementAccess().getRule();
	}
	
	//ImportStatement:
	//    'import' importReference=ImportReference
	//;
	public ImportStatementElements getImportStatementAccess() {
		return pImportStatement;
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}
	
	//ImportReference:
	//    STRING | StructuredID
	//;
	public ImportReferenceElements getImportReferenceAccess() {
		return pImportReference;
	}
	
	public ParserRule getImportReferenceRule() {
		return getImportReferenceAccess().getRule();
	}
	
	//StructuredID:
	//    identifier+=ID ('.' identifier+=ID)*
	//;
	public StructuredIDElements getStructuredIDAccess() {
		return pStructuredID;
	}
	
	public ParserRule getStructuredIDRule() {
		return getStructuredIDAccess().getRule();
	}
	
	//OscDeclaration:
	//    ScenarioDeclaration | StructDeclaration | ActorDeclaration | ActionDeclaration
	//    | ModifierDeclaration | EnumDeclaration | GlobalParameterDeclaration | TypeExtension
	//    | UnitDeclaration | PhysicalTypeDeclaration
	//;
	public OscDeclarationElements getOscDeclarationAccess() {
		return pOscDeclaration;
	}
	
	public ParserRule getOscDeclarationRule() {
		return getOscDeclarationAccess().getRule();
	}
	
	////PhysicalTypeDeclaration
	//PhysicalTypeDeclaration:
	//    'type' physicalTypeName=ID 'is' baseUnitSpecifier=SIBaseUnitSpecifier
	//;
	public PhysicalTypeDeclarationElements getPhysicalTypeDeclarationAccess() {
		return pPhysicalTypeDeclaration;
	}
	
	public ParserRule getPhysicalTypeDeclarationRule() {
		return getPhysicalTypeDeclarationAccess().getRule();
	}
	
	//// Unit declaration
	//UnitDeclaration:
	//    'unit' unitName=ID 'of' physicalTypeName=ID 'is' unitSpecifier=SIUnitSpecifier;
	public UnitDeclarationElements getUnitDeclarationAccess() {
		return pUnitDeclaration;
	}
	
	public ParserRule getUnitDeclarationRule() {
		return getUnitDeclarationAccess().getRule();
	}
	
	//SIBaseUnitSpecifier:
	//    'SI' '(' SIBaseExponentList=SIBaseExponentList ')';
	public SIBaseUnitSpecifierElements getSIBaseUnitSpecifierAccess() {
		return pSIBaseUnitSpecifier;
	}
	
	public ParserRule getSIBaseUnitSpecifierRule() {
		return getSIBaseUnitSpecifierAccess().getRule();
	}
	
	//SIBaseExponentList:
	//    SIBaseExponentList=SIBaseExponent (',' NextSIBaseExponentList+=SIBaseExponent)*
	//;
	public SIBaseExponentListElements getSIBaseExponentListAccess() {
		return pSIBaseExponentList;
	}
	
	public ParserRule getSIBaseExponentListRule() {
		return getSIBaseExponentListAccess().getRule();
	}
	
	//SIBaseExponent:
	//    unit=SIBaseUnitName ':' number=INTEGER;
	public SIBaseExponentElements getSIBaseExponentAccess() {
		return pSIBaseExponent;
	}
	
	public ParserRule getSIBaseExponentRule() {
		return getSIBaseExponentAccess().getRule();
	}
	
	//SIUnitSpecifier:
	//    'SI' '(' SIBaseExponentList=SIBaseExponentList (',' SIfactor=SIUnitFactor)? (',' SIUnit=SIUnitOffset)? ')';
	public SIUnitSpecifierElements getSIUnitSpecifierAccess() {
		return pSIUnitSpecifier;
	}
	
	public ParserRule getSIUnitSpecifierRule() {
		return getSIUnitSpecifierAccess().getRule();
	}
	
	//SIUnitFactor:
	//    'factor' ':' (FLOAT | INTEGER);
	public SIUnitFactorElements getSIUnitFactorAccess() {
		return pSIUnitFactor;
	}
	
	public ParserRule getSIUnitFactorRule() {
		return getSIUnitFactorAccess().getRule();
	}
	
	//SIUnitOffset:
	//    'offset' ':' (FLOAT | INTEGER);
	public SIUnitOffsetElements getSIUnitOffsetAccess() {
		return pSIUnitOffset;
	}
	
	public ParserRule getSIUnitOffsetRule() {
		return getSIUnitOffsetAccess().getRule();
	}
	
	//SIBaseUnitName:
	//    'kg' | 'm' | 's' | 'A' | 'K' | 'mol' | 'cd' | 'rad' | 'kph';
	public SIBaseUnitNameElements getSIBaseUnitNameAccess() {
		return pSIBaseUnitName;
	}
	
	public ParserRule getSIBaseUnitNameRule() {
		return getSIBaseUnitNameAccess().getRule();
	}
	
	//// Type extension
	//TypeExtension:
	//    EnumTypeExtension | StructuredTypeExtension;
	public TypeExtensionElements getTypeExtensionAccess() {
		return pTypeExtension;
	}
	
	public ParserRule getTypeExtensionRule() {
		return getTypeExtensionAccess().getRule();
	}
	
	//EnumTypeExtension:
	//    'extend' enumName=ID ':' '[' enumMemberDecls+=EnumMemberDeclaration (',' enumMemberDecls+=EnumMemberDeclaration)* ']';
	public EnumTypeExtensionElements getEnumTypeExtensionAccess() {
		return pEnumTypeExtension;
	}
	
	public ParserRule getEnumTypeExtensionRule() {
		return getEnumTypeExtensionAccess().getRule();
	}
	
	//StructuredTypeExtension:
	//    'extend' extendableTypeName=ID ':'
	//    BEGIN
	//        (extensionMemberDecls+=ExtensionMemberDeclaration)*
	//    END
	//;
	public StructuredTypeExtensionElements getStructuredTypeExtensionAccess() {
		return pStructuredTypeExtension;
	}
	
	public ParserRule getStructuredTypeExtensionRule() {
		return getStructuredTypeExtensionAccess().getRule();
	}
	
	//ExtensionMemberDeclaration:
	//     MemberDeclaration | BehaviorSpecification;
	public ExtensionMemberDeclarationElements getExtensionMemberDeclarationAccess() {
		return pExtensionMemberDeclaration;
	}
	
	public ParserRule getExtensionMemberDeclarationRule() {
		return getExtensionMemberDeclarationAccess().getRule();
	}
	
	////GlobalParameterDeclaration
	//GlobalParameterDeclaration:
	//    'global' parameterDeclaration=ParameterDeclaration
	//;
	public GlobalParameterDeclarationElements getGlobalParameterDeclarationAccess() {
		return pGlobalParameterDeclaration;
	}
	
	public ParserRule getGlobalParameterDeclarationRule() {
		return getGlobalParameterDeclarationAccess().getRule();
	}
	
	//ParameterDeclaration:
	//    fieldName=ID (',' NextfieldName+=ID)* ':' typeDeclarator=TypeDeclarator
	//    ('=' defaultValue=Expression)? (withDeclaration=ParameterWithDeclaration)?
	//;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return pParameterDeclaration;
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}
	
	//TypeDeclarator:
	//    NonAggregateTypeDeclarator | ListTypeDeclarator
	//;
	public TypeDeclaratorElements getTypeDeclaratorAccess() {
		return pTypeDeclarator;
	}
	
	public ParserRule getTypeDeclaratorRule() {
		return getTypeDeclaratorAccess().getRule();
	}
	
	//NonAggregateTypeDeclarator:
	//    PrimitiveType | ID
	//;
	public NonAggregateTypeDeclaratorElements getNonAggregateTypeDeclaratorAccess() {
		return pNonAggregateTypeDeclarator;
	}
	
	public ParserRule getNonAggregateTypeDeclaratorRule() {
		return getNonAggregateTypeDeclaratorAccess().getRule();
	}
	
	//ListTypeDeclarator:
	//    'list' 'of' NonAggregateTypeDeclarator
	//;
	public ListTypeDeclaratorElements getListTypeDeclaratorAccess() {
		return pListTypeDeclarator;
	}
	
	public ParserRule getListTypeDeclaratorRule() {
		return getListTypeDeclaratorAccess().getRule();
	}
	
	//PrimitiveType:
	//    'int' | 'uint' | 'float' | 'bool' | 'string'
	//;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	////EnumDeclaration
	//EnumDeclaration:
	//    'enum' enumName=ID ':' '[' enumMemberDecls+=EnumMemberDeclaration (',' enumMemberDecls+=EnumMemberDeclaration)* ']'
	//;
	public EnumDeclarationElements getEnumDeclarationAccess() {
		return pEnumDeclaration;
	}
	
	public ParserRule getEnumDeclarationRule() {
		return getEnumDeclarationAccess().getRule();
	}
	
	//EnumMemberDeclaration:
	//    enumMemberName=ID ( '=' enumMemberValue= INTEGER )?
	//;
	public EnumMemberDeclarationElements getEnumMemberDeclarationAccess() {
		return pEnumMemberDeclaration;
	}
	
	public ParserRule getEnumMemberDeclarationRule() {
		return getEnumMemberDeclarationAccess().getRule();
	}
	
	//EnumValueReference:
	//    (enumName=ID '!')? enumMemberName=ID
	//;
	public EnumValueReferenceElements getEnumValueReferenceAccess() {
		return pEnumValueReference;
	}
	
	public ParserRule getEnumValueReferenceRule() {
		return getEnumValueReferenceAccess().getRule();
	}
	
	////ModifierDeclaration
	//ModifierDeclaration:
	//    'modifier' (actorName=ID '.')? modifierName=ID
	//    ('of' qualifiedBehaviorName=ID)? ':'
	//    BEGIN
	//        (ScenarioMemberDecl+=MemberDeclaration | BehaviorSpecification+=OnDirective)*
	//    END
	//;
	public ModifierDeclarationElements getModifierDeclarationAccess() {
		return pModifierDeclaration;
	}
	
	public ParserRule getModifierDeclarationRule() {
		return getModifierDeclarationAccess().getRule();
	}
	
	////ActionDeclaration
	//ActionDeclaration:
	//    'action' name=ID
	//    ('inherits' baseActionName=ID
	//     ('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?)? ':'
	//     BEGIN
	//         (ActionMemberDecl+=MemberDeclaration)*
	//     END
	//;
	public ActionDeclarationElements getActionDeclarationAccess() {
		return pActionDeclaration;
	}
	
	public ParserRule getActionDeclarationRule() {
		return getActionDeclarationAccess().getRule();
	}
	
	////ActorDeclaration
	//ActorDeclaration:
	//    'actor' name=ID
	//    ('inherits' baseActorName=ID
	//     ('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?)? (':'
	//     BEGIN
	//         (ActorMemberDecl+=MemberDeclaration)*
	//     END )?
	//;
	public ActorDeclarationElements getActorDeclarationAccess() {
		return pActorDeclaration;
	}
	
	public ParserRule getActorDeclarationRule() {
		return getActorDeclarationAccess().getRule();
	}
	
	////StructDeclaration
	//StructDeclaration:
	//    'struct' name=ID
	//    ('inherits' baseStructName=ID
	//     ('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?)? ':'
	//     BEGIN
	//         (StructMemberDecl+=MemberDeclaration)*
	//     END
	//;
	public StructDeclarationElements getStructDeclarationAccess() {
		return pStructDeclaration;
	}
	
	public ParserRule getStructDeclarationRule() {
		return getStructDeclarationAccess().getRule();
	}
	
	////Scenario Declaration
	//ScenarioDeclaration:
	//    'scenario' name=ID
	//    ('inherits' baseScenarioName=ID
	//     ('(' fieldName=ID '==' (enumReference = EnumValueReference | BOOL) ')')?)? ':'
	//     BEGIN
	//         (ScenarioMemberDecl+=MemberDeclaration | BehaviorSpecification+=BehaviorSpecification)*
	//     END
	//;
	public ScenarioDeclarationElements getScenarioDeclarationAccess() {
		return pScenarioDeclaration;
	}
	
	public ParserRule getScenarioDeclarationRule() {
		return getScenarioDeclarationAccess().getRule();
	}
	
	////MemberDeclaration
	//MemberDeclaration:
	//    FieldDeclaration | EventDeclaration | MethodDeclaration |
	//    CoverageDeclaration | ConstraintDeclaration
	//;
	public MemberDeclarationElements getMemberDeclarationAccess() {
		return pMemberDeclaration;
	}
	
	public ParserRule getMemberDeclarationRule() {
		return getMemberDeclarationAccess().getRule();
	}
	
	////CoverageDeclaration
	//CoverageDeclaration:
	//    ('cover' | 'record') '(' argumentList=ArgumentList ')'
	//;
	public CoverageDeclarationElements getCoverageDeclarationAccess() {
		return pCoverageDeclaration;
	}
	
	public ParserRule getCoverageDeclarationRule() {
		return getCoverageDeclarationAccess().getRule();
	}
	
	////MethodDeclaration
	//MethodDeclaration:
	//    'def' methodName=ID '(' (argumentListSpecification=ArgumentListSpecification)? ')'
	//    ('->' returnType=TypeDeclarator)? methodImplementation=MethodImplementation
	//;
	public MethodDeclarationElements getMethodDeclarationAccess() {
		return pMethodDeclaration;
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}
	
	//MethodImplementation:
	//    'is' ('only')?
	//    ('expression' expression=Expression | 'undefined' |
	//    'external' structuredID=StructuredID '(' (argumentList=ArgumentList)? ')')
	//;
	public MethodImplementationElements getMethodImplementationAccess() {
		return pMethodImplementation;
	}
	
	public ParserRule getMethodImplementationRule() {
		return getMethodImplementationAccess().getRule();
	}
	
	////EventDeclaration
	//EventDeclaration:
	//    'event' eventName=ID
	//    ('(' (params+=ArgumentListSpecification (',' params+=ArgumentListSpecification)*)? ')')?
	//    ('is' eventSpecification=EventSpecification)?
	//;
	public EventDeclarationElements getEventDeclarationAccess() {
		return pEventDeclaration;
	}
	
	public ParserRule getEventDeclarationRule() {
		return getEventDeclarationAccess().getRule();
	}
	
	//EventSpecification:
	//    eventReference=EventReference (('as' eventFieldName=ID)? 'if' eventCondition=EventCondition)? |
	//    eventCondition=EventCondition
	//;
	public EventSpecificationElements getEventSpecificationAccess() {
		return pEventSpecification;
	}
	
	public ParserRule getEventSpecificationRule() {
		return getEventSpecificationAccess().getRule();
	}
	
	//EventReference:
	//    '@' eventPath=EventPath;
	public EventReferenceElements getEventReferenceAccess() {
		return pEventReference;
	}
	
	public ParserRule getEventReferenceRule() {
		return getEventReferenceAccess().getRule();
	}
	
	//EventPath:
	//    (expression=Expression '.')? eventName=ID;
	public EventPathElements getEventPathAccess() {
		return pEventPath;
	}
	
	public ParserRule getEventPathRule() {
		return getEventPathAccess().getRule();
	}
	
	//EventCondition:
	//    Expression | Condition | RiseExpression | FallExpression | ElapsedExpression | EveryExpression
	//;
	public EventConditionElements getEventConditionAccess() {
		return pEventCondition;
	}
	
	public ParserRule getEventConditionRule() {
		return getEventConditionAccess().getRule();
	}
	
	//RiseExpression:
	//    'rise' '(' boolExpression=Expression ')'
	//;
	public RiseExpressionElements getRiseExpressionAccess() {
		return pRiseExpression;
	}
	
	public ParserRule getRiseExpressionRule() {
		return getRiseExpressionAccess().getRule();
	}
	
	//FallExpression:
	//    'fall' '(' boolExpression=Expression ')'
	//;
	public FallExpressionElements getFallExpressionAccess() {
		return pFallExpression;
	}
	
	public ParserRule getFallExpressionRule() {
		return getFallExpressionAccess().getRule();
	}
	
	//ElapsedExpression:
	//    'elapsed' '(' durationExpression=Expression ')'
	//;
	public ElapsedExpressionElements getElapsedExpressionAccess() {
		return pElapsedExpression;
	}
	
	public ParserRule getElapsedExpressionRule() {
		return getElapsedExpressionAccess().getRule();
	}
	
	//EveryExpression:
	//    'every' '(' durationExpression=Expression (',' 'offset' ':' NextdurationExpression+=Expression)? ')'
	//;
	public EveryExpressionElements getEveryExpressionAccess() {
		return pEveryExpression;
	}
	
	public ParserRule getEveryExpressionRule() {
		return getEveryExpressionAccess().getRule();
	}
	
	////FieldDeclaration
	//FieldDeclaration:
	//     ParameterDeclaration | VariableDeclaration;
	public FieldDeclarationElements getFieldDeclarationAccess() {
		return pFieldDeclaration;
	}
	
	public ParserRule getFieldDeclarationRule() {
		return getFieldDeclarationAccess().getRule();
	}
	
	////VariableDeclaration
	//VariableDeclaration:
	//    'var' fieldName=ID (',' NextfieldName+=ID)* ':' typeDeclarator=TypeDeclarator
	//    ('=' (defaultValue=Expression|sampleExpression=SampleExpression))?
	//;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//SampleExpression:
	//    'sample' '(' expression=Expression ',' eventSpecification=EventSpecification
	//    (',' defaultValue=Expression)? ')'
	//;
	public SampleExpressionElements getSampleExpressionAccess() {
		return pSampleExpression;
	}
	
	public ParserRule getSampleExpressionRule() {
		return getSampleExpressionAccess().getRule();
	}
	
	//// Behavior Specification
	//BehaviorSpecification:
	//    OnDirective | DoDirective
	//;
	public BehaviorSpecificationElements getBehaviorSpecificationAccess() {
		return pBehaviorSpecification;
	}
	
	public ParserRule getBehaviorSpecificationRule() {
		return getBehaviorSpecificationAccess().getRule();
	}
	
	////OnDirective
	//OnDirective:
	//    'on' eventSpecification=ID ':'
	//    BEGIN
	//        (onMember+=OnDirectiveMember)*
	//    END
	//;
	public OnDirectiveElements getOnDirectiveAccess() {
		return pOnDirective;
	}
	
	public ParserRule getOnDirectiveRule() {
		return getOnDirectiveAccess().getRule();
	}
	
	//OnDirectiveMember:
	//    CallDirective | EmitDirective
	//;
	public OnDirectiveMemberElements getOnDirectiveMemberAccess() {
		return pOnDirectiveMember;
	}
	
	public ParserRule getOnDirectiveMemberRule() {
		return getOnDirectiveMemberAccess().getRule();
	}
	
	//CallDirective:
	//    'call' methodInvocation=MethodInvocation
	//;
	public CallDirectiveElements getCallDirectiveAccess() {
		return pCallDirective;
	}
	
	public ParserRule getCallDirectiveRule() {
		return getCallDirectiveAccess().getRule();
	}
	
	//EmitDirective:
	//    'emit' eventName=ID '(' argumentList=ArgumentList ')'
	//;
	public EmitDirectiveElements getEmitDirectiveAccess() {
		return pEmitDirective;
	}
	
	public ParserRule getEmitDirectiveRule() {
		return getEmitDirectiveAccess().getRule();
	}
	
	//WaitDirective:
	//    'wait' eventSpecification=EventSpecification
	//;
	public WaitDirectiveElements getWaitDirectiveAccess() {
		return pWaitDirective;
	}
	
	public ParserRule getWaitDirectiveRule() {
		return getWaitDirectiveAccess().getRule();
	}
	
	////DoDirective
	//DoDirective:
	//    'do' doMembers=DoDirectiveMember
	//;
	public DoDirectiveElements getDoDirectiveAccess() {
		return pDoDirective;
	}
	
	public ParserRule getDoDirectiveRule() {
		return getDoDirectiveAccess().getRule();
	}
	
	//DoDirectiveMember:
	//    (labelName=ID ':')? (composition=Composition
	//    | emitDirective=EmitDirective | callDirective=CallDirective
	//    | waitDirective=WaitDirective | behaviorInvocation=BehaviorInvocation
	//    )
	//;
	public DoDirectiveMemberElements getDoDirectiveMemberAccess() {
		return pDoDirectiveMember;
	}
	
	public ParserRule getDoDirectiveMemberRule() {
		return getDoDirectiveMemberAccess().getRule();
	}
	
	//Composition:
	//    compositionOp = CompositionOptions ('(' argumentList=ArgumentList ')')? ':'
	//    BEGIN
	//        (doMembers+=DoDirectiveMember (withDeclaration+=BehaviorWithDeclaration)?)*
	//    END
	//;
	public CompositionElements getCompositionAccess() {
		return pComposition;
	}
	
	public ParserRule getCompositionRule() {
		return getCompositionAccess().getRule();
	}
	
	//CompositionOptions:
	//    'serial' | 'one_of' | 'parallel'
	//;
	public CompositionOptionsElements getCompositionOptionsAccess() {
		return pCompositionOptions;
	}
	
	public ParserRule getCompositionOptionsRule() {
		return getCompositionOptionsAccess().getRule();
	}
	
	//BehaviorInvocation:
	//    actorExpression=Expression '(' (argumentList=ArgumentList)? ')'
	//;
	public BehaviorInvocationElements getBehaviorInvocationAccess() {
		return pBehaviorInvocation;
	}
	
	public ParserRule getBehaviorInvocationRule() {
		return getBehaviorInvocationAccess().getRule();
	}
	
	////ParameterWith
	//ParameterWithDeclaration:
	//    'with' ':'
	//    BEGIN
	//        (parameterWithMembers+=ConstraintDeclaration)*
	//    END
	//;
	public ParameterWithDeclarationElements getParameterWithDeclarationAccess() {
		return pParameterWithDeclaration;
	}
	
	public ParserRule getParameterWithDeclarationRule() {
		return getParameterWithDeclarationAccess().getRule();
	}
	
	////BehaviorWith
	//BehaviorWithDeclaration:
	//    'with' ':'
	//    BEGIN
	//        (behaviorWithMembers+=BehaviorWithMember)*
	//    END
	//;
	public BehaviorWithDeclarationElements getBehaviorWithDeclarationAccess() {
		return pBehaviorWithDeclaration;
	}
	
	public ParserRule getBehaviorWithDeclarationRule() {
		return getBehaviorWithDeclarationAccess().getRule();
	}
	
	//BehaviorWithMember:
	//    ConstraintDeclaration | BehaviorInvocation | UntilDirective
	//;
	public BehaviorWithMemberElements getBehaviorWithMemberAccess() {
		return pBehaviorWithMember;
	}
	
	public ParserRule getBehaviorWithMemberRule() {
		return getBehaviorWithMemberAccess().getRule();
	}
	
	//ConstraintDeclaration:
	//    KeepConstraintDeclaration | RemoveDefaultDeclaration
	//;
	public ConstraintDeclarationElements getConstraintDeclarationAccess() {
		return pConstraintDeclaration;
	}
	
	public ParserRule getConstraintDeclarationRule() {
		return getConstraintDeclarationAccess().getRule();
	}
	
	//KeepConstraintDeclaration:
	//    'keep' '(' (constraintQualifier=ConstraintQualifier)? constraintExpression=Expression ')'
	//;
	public KeepConstraintDeclarationElements getKeepConstraintDeclarationAccess() {
		return pKeepConstraintDeclaration;
	}
	
	public ParserRule getKeepConstraintDeclarationRule() {
		return getKeepConstraintDeclarationAccess().getRule();
	}
	
	//ConstraintQualifier:
	//    'default' | 'hard'
	//;
	public ConstraintQualifierElements getConstraintQualifierAccess() {
		return pConstraintQualifier;
	}
	
	public ParserRule getConstraintQualifierRule() {
		return getConstraintQualifierAccess().getRule();
	}
	
	//RemoveDefaultDeclaration:
	//    'remove_default' '(' parameterReference=ParameterReference ')'
	//;
	public RemoveDefaultDeclarationElements getRemoveDefaultDeclarationAccess() {
		return pRemoveDefaultDeclaration;
	}
	
	public ParserRule getRemoveDefaultDeclarationRule() {
		return getRemoveDefaultDeclarationAccess().getRule();
	}
	
	//UntilDirective:
	//    'until' eventSpecification=EventSpecification
	//;
	public UntilDirectiveElements getUntilDirectiveAccess() {
		return pUntilDirective;
	}
	
	public ParserRule getUntilDirectiveRule() {
		return getUntilDirectiveAccess().getRule();
	}
	
	////Argument List
	//ArgumentListSpecification:
	//    argumentSpecification+=ArgumentSpecification (',' argumentSpecification+=ArgumentSpecification)
	//;
	public ArgumentListSpecificationElements getArgumentListSpecificationAccess() {
		return pArgumentListSpecification;
	}
	
	public ParserRule getArgumentListSpecificationRule() {
		return getArgumentListSpecificationAccess().getRule();
	}
	
	//ArgumentSpecification:
	//    argumentName=ID ':' typeDeclarator=TypeDeclarator ('=' defaultValue=Expression)?
	//;
	public ArgumentSpecificationElements getArgumentSpecificationAccess() {
		return pArgumentSpecification;
	}
	
	public ParserRule getArgumentSpecificationRule() {
		return getArgumentSpecificationAccess().getRule();
	}
	
	//ArgumentList:
	//    positionalArguments+=Expression (',' positionalArguments+=Expression)*
	//    (',' namedArguments+=NamedArgument)* |
	//    namedArguments+=NamedArgument (',' namedArguments+=NamedArgument)*
	//;
	public ArgumentListElements getArgumentListAccess() {
		return pArgumentList;
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}
	
	//NamedArgument:
	//    (argumentName=ID | 'offset') ':' expression=Expression ('(' (argumentList=ArgumentList)? ')')?
	//;
	public NamedArgumentElements getNamedArgumentAccess() {
		return pNamedArgument;
	}
	
	public ParserRule getNamedArgumentRule() {
		return getNamedArgumentAccess().getRule();
	}
	
	////PostfixExp
	//PostfixExp:
	//    primaryExp=PrimaryExp (tail+=PostfixExpTail)*
	//;
	public PostfixExpElements getPostfixExpAccess() {
		return pPostfixExp;
	}
	
	public ParserRule getPostfixExpRule() {
		return getPostfixExpAccess().getRule();
	}
	
	//PostfixExpTail:
	//    CastExpTail | TypeTestTail | FieldAccessTail
	//;
	public PostfixExpTailElements getPostfixExpTailAccess() {
		return pPostfixExpTail;
	}
	
	public ParserRule getPostfixExpTailRule() {
		return getPostfixExpTailAccess().getRule();
	}
	
	//CastExpTail:
	//    '.' 'as' '(' typeDeclarator+=TypeDeclarator ')'
	//;
	public CastExpTailElements getCastExpTailAccess() {
		return pCastExpTail;
	}
	
	public ParserRule getCastExpTailRule() {
		return getCastExpTailAccess().getRule();
	}
	
	//TypeTestTail:
	//    '.' 'is' '(' typeDeclarator+=TypeDeclarator ')'
	//;
	public TypeTestTailElements getTypeTestTailAccess() {
		return pTypeTestTail;
	}
	
	public ParserRule getTypeTestTailRule() {
		return getTypeTestTailAccess().getRule();
	}
	
	//ElementAccessTail:
	//    '[' expression+=Expression ']' //Couldn't integrate without generating fatal errors
	//;
	public ElementAccessTailElements getElementAccessTailAccess() {
		return pElementAccessTail;
	}
	
	public ParserRule getElementAccessTailRule() {
		return getElementAccessTailAccess().getRule();
	}
	
	//FieldAccessTail:
	//    '.' fieldName+=ID
	//;
	public FieldAccessTailElements getFieldAccessTailAccess() {
		return pFieldAccessTail;
	}
	
	public ParserRule getFieldAccessTailRule() {
		return getFieldAccessTailAccess().getRule();
	}
	
	//MethodInvocation:
	//    PostfixExp '(' (argumentList+=ArgumentList)? ')' //Generate Warnings: Repetition of the format in some cases
	//;
	public MethodInvocationElements getMethodInvocationAccess() {
		return pMethodInvocation;
	}
	
	public ParserRule getMethodInvocationRule() {
		return getMethodInvocationAccess().getRule();
	}
	
	//ParameterReference:
	//    (PostfixExp '.' fieldName+=ID) //Generate Warnings: Repetition of the format in some cases
	//;
	public ParameterReferenceElements getParameterReferenceAccess() {
		return pParameterReference;
	}
	
	public ParserRule getParameterReferenceRule() {
		return getParameterReferenceAccess().getRule();
	}
	
	////Assistence
	//PrimaryExp:
	//     'it' | ValueExp | ListConstructor | RangeConstructor
	//;
	public PrimaryExpElements getPrimaryExpAccess() {
		return pPrimaryExp;
	}
	
	public ParserRule getPrimaryExpRule() {
		return getPrimaryExpAccess().getRule();
	}
	
	//ValueExp:
	//    BOOL | PhysicalType | STRING | EnumValueReference
	//;
	public ValueExpElements getValueExpAccess() {
		return pValueExp;
	}
	
	public ParserRule getValueExpRule() {
		return getValueExpAccess().getRule();
	}
	
	//PhysicalType:
	//    (numberInteger = INTEGER | numberFloat = FLOAT) (unitBaseName=SIBaseUnitName |unitName=ID)? //Generate Warnings: Due to ID considers all text
	//;
	public PhysicalTypeElements getPhysicalTypeAccess() {
		return pPhysicalType;
	}
	
	public ParserRule getPhysicalTypeRule() {
		return getPhysicalTypeAccess().getRule();
	}
	
	//// List constructor
	//ListConstructor:
	//    '[' elements+=ValueExp (',' elements+=ValueExp)* ']';
	public ListConstructorElements getListConstructorAccess() {
		return pListConstructor;
	}
	
	public ParserRule getListConstructorRule() {
		return getListConstructorAccess().getRule();
	}
	
	//// Range constructor
	//RangeConstructor:
	//    'range' '(' start=ValueExp ',' end=ValueExp ')' |
	//    '[' start=ValueExp '..' end=ValueExp ']';
	public RangeConstructorElements getRangeConstructorAccess() {
		return pRangeConstructor;
	}
	
	public ParserRule getRangeConstructorRule() {
		return getRangeConstructorAccess().getRule();
	}
	
	//Condition:
	//    condition = Expression '?' trueResult=Expression ':' falseResult=Expression
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Expression:
	//     Relation
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Relation:
	//    ('not')? Sum (relationalOp+=RelationalOp nextSum+=Sum)*
	//;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//RelationalOp:
	//    '==' | '!=' | '<' | '<=' | '>' | '>=' | 'in' | 'and' | 'or' | '=>'
	//;
	public RelationalOpElements getRelationalOpAccess() {
		return pRelationalOp;
	}
	
	public ParserRule getRelationalOpRule() {
		return getRelationalOpAccess().getRule();
	}
	
	//Sum:
	//    Term (additiveOp+=AdditiveOp nextTerm+=Term)*
	//;
	public SumElements getSumAccess() {
		return pSum;
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}
	
	//AdditiveOp:
	//    '+' | '-' //Generate Warnings: Due to repetition of the format +2, -0x45
	//;
	public AdditiveOpElements getAdditiveOpAccess() {
		return pAdditiveOp;
	}
	
	public ParserRule getAdditiveOpRule() {
		return getAdditiveOpAccess().getRule();
	}
	
	//Term:
	//    Factor (multiplicativeOp+=MultiplicativeOp nextFactor+=Factor)*
	//;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//MultiplicativeOp:
	//    '*' | '/' | '%'
	//;
	public MultiplicativeOpElements getMultiplicativeOpAccess() {
		return pMultiplicativeOp;
	}
	
	public ParserRule getMultiplicativeOpRule() {
		return getMultiplicativeOpAccess().getRule();
	}
	
	//Factor:
	//    ('-')? PostfixExp
	//;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//terminal BEGIN: 'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END: 'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal BOOL: 'true'|'false';
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//terminal INTEGER: ('-')? INT | ('0x' ('0'..'9' | 'a'..'f' | 'A'..'F')+);
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//terminal FLOAT:('+' | '-')? INT '.' INT (('e' | 'E') ('+' | '-')? ('0'..'9'+))?;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//@Override
	//terminal SL_COMMENT: '#' !('\n'|'\r')* ('\r'? '\n')?
	//;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//@Override
	//terminal STRING:
	//            '"' ( '\\' . | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . | !('\\'|"'") )* "'" |
	//            "'''" ( '\\' . | !('\\'|"'") )* "'''" |
	//            '"""' ( '\\' . | !('\\'|'"') )* '"""'
	//;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
