/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.openScenario.impl;

import de.bmwgroup.openscenario.openScenario.Expression;
import de.bmwgroup.openscenario.openScenario.FieldDeclaration;
import de.bmwgroup.openscenario.openScenario.OpenScenarioPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Field Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.FieldDeclarationImpl#getFieldName <em>Field Name</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.FieldDeclarationImpl#getNextfieldName <em>Nextfield Name</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.FieldDeclarationImpl#getTypeDeclarator <em>Type Declarator</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.FieldDeclarationImpl#getDefaultValue <em>Default Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FieldDeclarationImpl extends MemberDeclarationImpl implements FieldDeclaration
{
  /**
   * The default value of the '{@link #getFieldName() <em>Field Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFieldName()
   * @generated
   * @ordered
   */
  protected static final String FIELD_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFieldName() <em>Field Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFieldName()
   * @generated
   * @ordered
   */
  protected String fieldName = FIELD_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getNextfieldName() <em>Nextfield Name</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNextfieldName()
   * @generated
   * @ordered
   */
  protected EList<String> nextfieldName;

  /**
   * The default value of the '{@link #getTypeDeclarator() <em>Type Declarator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeDeclarator()
   * @generated
   * @ordered
   */
  protected static final String TYPE_DECLARATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTypeDeclarator() <em>Type Declarator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeDeclarator()
   * @generated
   * @ordered
   */
  protected String typeDeclarator = TYPE_DECLARATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getDefaultValue() <em>Default Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultValue()
   * @generated
   * @ordered
   */
  protected Expression defaultValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FieldDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.FIELD_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFieldName()
  {
    return fieldName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFieldName(String newFieldName)
  {
    String oldFieldName = fieldName;
    fieldName = newFieldName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.FIELD_DECLARATION__FIELD_NAME, oldFieldName, fieldName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getNextfieldName()
  {
    if (nextfieldName == null)
    {
      nextfieldName = new EDataTypeEList<String>(String.class, this, OpenScenarioPackage.FIELD_DECLARATION__NEXTFIELD_NAME);
    }
    return nextfieldName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTypeDeclarator()
  {
    return typeDeclarator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTypeDeclarator(String newTypeDeclarator)
  {
    String oldTypeDeclarator = typeDeclarator;
    typeDeclarator = newTypeDeclarator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.FIELD_DECLARATION__TYPE_DECLARATOR, oldTypeDeclarator, typeDeclarator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getDefaultValue()
  {
    return defaultValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDefaultValue(Expression newDefaultValue, NotificationChain msgs)
  {
    Expression oldDefaultValue = defaultValue;
    defaultValue = newDefaultValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.FIELD_DECLARATION__DEFAULT_VALUE, oldDefaultValue, newDefaultValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefaultValue(Expression newDefaultValue)
  {
    if (newDefaultValue != defaultValue)
    {
      NotificationChain msgs = null;
      if (defaultValue != null)
        msgs = ((InternalEObject)defaultValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.FIELD_DECLARATION__DEFAULT_VALUE, null, msgs);
      if (newDefaultValue != null)
        msgs = ((InternalEObject)newDefaultValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.FIELD_DECLARATION__DEFAULT_VALUE, null, msgs);
      msgs = basicSetDefaultValue(newDefaultValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.FIELD_DECLARATION__DEFAULT_VALUE, newDefaultValue, newDefaultValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.FIELD_DECLARATION__DEFAULT_VALUE:
        return basicSetDefaultValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.FIELD_DECLARATION__FIELD_NAME:
        return getFieldName();
      case OpenScenarioPackage.FIELD_DECLARATION__NEXTFIELD_NAME:
        return getNextfieldName();
      case OpenScenarioPackage.FIELD_DECLARATION__TYPE_DECLARATOR:
        return getTypeDeclarator();
      case OpenScenarioPackage.FIELD_DECLARATION__DEFAULT_VALUE:
        return getDefaultValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.FIELD_DECLARATION__FIELD_NAME:
        setFieldName((String)newValue);
        return;
      case OpenScenarioPackage.FIELD_DECLARATION__NEXTFIELD_NAME:
        getNextfieldName().clear();
        getNextfieldName().addAll((Collection<? extends String>)newValue);
        return;
      case OpenScenarioPackage.FIELD_DECLARATION__TYPE_DECLARATOR:
        setTypeDeclarator((String)newValue);
        return;
      case OpenScenarioPackage.FIELD_DECLARATION__DEFAULT_VALUE:
        setDefaultValue((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.FIELD_DECLARATION__FIELD_NAME:
        setFieldName(FIELD_NAME_EDEFAULT);
        return;
      case OpenScenarioPackage.FIELD_DECLARATION__NEXTFIELD_NAME:
        getNextfieldName().clear();
        return;
      case OpenScenarioPackage.FIELD_DECLARATION__TYPE_DECLARATOR:
        setTypeDeclarator(TYPE_DECLARATOR_EDEFAULT);
        return;
      case OpenScenarioPackage.FIELD_DECLARATION__DEFAULT_VALUE:
        setDefaultValue((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.FIELD_DECLARATION__FIELD_NAME:
        return FIELD_NAME_EDEFAULT == null ? fieldName != null : !FIELD_NAME_EDEFAULT.equals(fieldName);
      case OpenScenarioPackage.FIELD_DECLARATION__NEXTFIELD_NAME:
        return nextfieldName != null && !nextfieldName.isEmpty();
      case OpenScenarioPackage.FIELD_DECLARATION__TYPE_DECLARATOR:
        return TYPE_DECLARATOR_EDEFAULT == null ? typeDeclarator != null : !TYPE_DECLARATOR_EDEFAULT.equals(typeDeclarator);
      case OpenScenarioPackage.FIELD_DECLARATION__DEFAULT_VALUE:
        return defaultValue != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (fieldName: ");
    result.append(fieldName);
    result.append(", NextfieldName: ");
    result.append(nextfieldName);
    result.append(", typeDeclarator: ");
    result.append(typeDeclarator);
    result.append(')');
    return result.toString();
  }

} //FieldDeclarationImpl
