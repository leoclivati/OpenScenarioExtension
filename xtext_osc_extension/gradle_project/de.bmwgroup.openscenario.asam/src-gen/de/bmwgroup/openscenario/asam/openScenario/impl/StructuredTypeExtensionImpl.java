/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.asam.openScenario.impl;

import de.bmwgroup.openscenario.asam.openScenario.ExtensionMemberDeclaration;
import de.bmwgroup.openscenario.asam.openScenario.OpenScenarioPackage;
import de.bmwgroup.openscenario.asam.openScenario.StructuredTypeExtension;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Structured Type Extension</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.StructuredTypeExtensionImpl#getExtendableTypeName <em>Extendable Type Name</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.StructuredTypeExtensionImpl#getExtensionMemberDecls <em>Extension Member Decls</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StructuredTypeExtensionImpl extends TypeExtensionImpl implements StructuredTypeExtension
{
  /**
   * The default value of the '{@link #getExtendableTypeName() <em>Extendable Type Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtendableTypeName()
   * @generated
   * @ordered
   */
  protected static final String EXTENDABLE_TYPE_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExtendableTypeName() <em>Extendable Type Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtendableTypeName()
   * @generated
   * @ordered
   */
  protected String extendableTypeName = EXTENDABLE_TYPE_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getExtensionMemberDecls() <em>Extension Member Decls</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtensionMemberDecls()
   * @generated
   * @ordered
   */
  protected EList<ExtensionMemberDeclaration> extensionMemberDecls;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StructuredTypeExtensionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.STRUCTURED_TYPE_EXTENSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExtendableTypeName()
  {
    return extendableTypeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExtendableTypeName(String newExtendableTypeName)
  {
    String oldExtendableTypeName = extendableTypeName;
    extendableTypeName = newExtendableTypeName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.STRUCTURED_TYPE_EXTENSION__EXTENDABLE_TYPE_NAME, oldExtendableTypeName, extendableTypeName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ExtensionMemberDeclaration> getExtensionMemberDecls()
  {
    if (extensionMemberDecls == null)
    {
      extensionMemberDecls = new EObjectContainmentEList<ExtensionMemberDeclaration>(ExtensionMemberDeclaration.class, this, OpenScenarioPackage.STRUCTURED_TYPE_EXTENSION__EXTENSION_MEMBER_DECLS);
    }
    return extensionMemberDecls;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.STRUCTURED_TYPE_EXTENSION__EXTENSION_MEMBER_DECLS:
        return ((InternalEList<?>)getExtensionMemberDecls()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.STRUCTURED_TYPE_EXTENSION__EXTENDABLE_TYPE_NAME:
        return getExtendableTypeName();
      case OpenScenarioPackage.STRUCTURED_TYPE_EXTENSION__EXTENSION_MEMBER_DECLS:
        return getExtensionMemberDecls();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.STRUCTURED_TYPE_EXTENSION__EXTENDABLE_TYPE_NAME:
        setExtendableTypeName((String)newValue);
        return;
      case OpenScenarioPackage.STRUCTURED_TYPE_EXTENSION__EXTENSION_MEMBER_DECLS:
        getExtensionMemberDecls().clear();
        getExtensionMemberDecls().addAll((Collection<? extends ExtensionMemberDeclaration>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.STRUCTURED_TYPE_EXTENSION__EXTENDABLE_TYPE_NAME:
        setExtendableTypeName(EXTENDABLE_TYPE_NAME_EDEFAULT);
        return;
      case OpenScenarioPackage.STRUCTURED_TYPE_EXTENSION__EXTENSION_MEMBER_DECLS:
        getExtensionMemberDecls().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.STRUCTURED_TYPE_EXTENSION__EXTENDABLE_TYPE_NAME:
        return EXTENDABLE_TYPE_NAME_EDEFAULT == null ? extendableTypeName != null : !EXTENDABLE_TYPE_NAME_EDEFAULT.equals(extendableTypeName);
      case OpenScenarioPackage.STRUCTURED_TYPE_EXTENSION__EXTENSION_MEMBER_DECLS:
        return extensionMemberDecls != null && !extensionMemberDecls.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (extendableTypeName: ");
    result.append(extendableTypeName);
    result.append(')');
    return result.toString();
  }

} //StructuredTypeExtensionImpl
