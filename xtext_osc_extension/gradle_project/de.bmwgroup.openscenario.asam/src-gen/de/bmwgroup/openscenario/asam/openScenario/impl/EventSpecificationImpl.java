/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.asam.openScenario.impl;

import de.bmwgroup.openscenario.asam.openScenario.EventCondition;
import de.bmwgroup.openscenario.asam.openScenario.EventReference;
import de.bmwgroup.openscenario.asam.openScenario.EventSpecification;
import de.bmwgroup.openscenario.asam.openScenario.OpenScenarioPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Event Specification</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.EventSpecificationImpl#getEventReference <em>Event Reference</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.EventSpecificationImpl#getEventFieldName <em>Event Field Name</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.EventSpecificationImpl#getEventCondition <em>Event Condition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EventSpecificationImpl extends MinimalEObjectImpl.Container implements EventSpecification
{
  /**
   * The cached value of the '{@link #getEventReference() <em>Event Reference</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventReference()
   * @generated
   * @ordered
   */
  protected EventReference eventReference;

  /**
   * The default value of the '{@link #getEventFieldName() <em>Event Field Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventFieldName()
   * @generated
   * @ordered
   */
  protected static final String EVENT_FIELD_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEventFieldName() <em>Event Field Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventFieldName()
   * @generated
   * @ordered
   */
  protected String eventFieldName = EVENT_FIELD_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getEventCondition() <em>Event Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventCondition()
   * @generated
   * @ordered
   */
  protected EventCondition eventCondition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EventSpecificationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.EVENT_SPECIFICATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventReference getEventReference()
  {
    return eventReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEventReference(EventReference newEventReference, NotificationChain msgs)
  {
    EventReference oldEventReference = eventReference;
    eventReference = newEventReference;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_REFERENCE, oldEventReference, newEventReference);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEventReference(EventReference newEventReference)
  {
    if (newEventReference != eventReference)
    {
      NotificationChain msgs = null;
      if (eventReference != null)
        msgs = ((InternalEObject)eventReference).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_REFERENCE, null, msgs);
      if (newEventReference != null)
        msgs = ((InternalEObject)newEventReference).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_REFERENCE, null, msgs);
      msgs = basicSetEventReference(newEventReference, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_REFERENCE, newEventReference, newEventReference));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEventFieldName()
  {
    return eventFieldName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEventFieldName(String newEventFieldName)
  {
    String oldEventFieldName = eventFieldName;
    eventFieldName = newEventFieldName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_FIELD_NAME, oldEventFieldName, eventFieldName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventCondition getEventCondition()
  {
    return eventCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEventCondition(EventCondition newEventCondition, NotificationChain msgs)
  {
    EventCondition oldEventCondition = eventCondition;
    eventCondition = newEventCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_CONDITION, oldEventCondition, newEventCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEventCondition(EventCondition newEventCondition)
  {
    if (newEventCondition != eventCondition)
    {
      NotificationChain msgs = null;
      if (eventCondition != null)
        msgs = ((InternalEObject)eventCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_CONDITION, null, msgs);
      if (newEventCondition != null)
        msgs = ((InternalEObject)newEventCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_CONDITION, null, msgs);
      msgs = basicSetEventCondition(newEventCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_CONDITION, newEventCondition, newEventCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_REFERENCE:
        return basicSetEventReference(null, msgs);
      case OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_CONDITION:
        return basicSetEventCondition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_REFERENCE:
        return getEventReference();
      case OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_FIELD_NAME:
        return getEventFieldName();
      case OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_CONDITION:
        return getEventCondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_REFERENCE:
        setEventReference((EventReference)newValue);
        return;
      case OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_FIELD_NAME:
        setEventFieldName((String)newValue);
        return;
      case OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_CONDITION:
        setEventCondition((EventCondition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_REFERENCE:
        setEventReference((EventReference)null);
        return;
      case OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_FIELD_NAME:
        setEventFieldName(EVENT_FIELD_NAME_EDEFAULT);
        return;
      case OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_CONDITION:
        setEventCondition((EventCondition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_REFERENCE:
        return eventReference != null;
      case OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_FIELD_NAME:
        return EVENT_FIELD_NAME_EDEFAULT == null ? eventFieldName != null : !EVENT_FIELD_NAME_EDEFAULT.equals(eventFieldName);
      case OpenScenarioPackage.EVENT_SPECIFICATION__EVENT_CONDITION:
        return eventCondition != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (eventFieldName: ");
    result.append(eventFieldName);
    result.append(')');
    return result.toString();
  }

} //EventSpecificationImpl
