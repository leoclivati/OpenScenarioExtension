/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.openScenario.impl;

import de.bmwgroup.openscenario.openScenario.OnDirective;
import de.bmwgroup.openscenario.openScenario.OnDirectiveMember;
import de.bmwgroup.openscenario.openScenario.OpenScenarioPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>On Directive</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.OnDirectiveImpl#getEventSpecification <em>Event Specification</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.OnDirectiveImpl#getOnMember <em>On Member</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OnDirectiveImpl extends BehaviorSpecificationImpl implements OnDirective
{
  /**
   * The default value of the '{@link #getEventSpecification() <em>Event Specification</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventSpecification()
   * @generated
   * @ordered
   */
  protected static final String EVENT_SPECIFICATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEventSpecification() <em>Event Specification</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventSpecification()
   * @generated
   * @ordered
   */
  protected String eventSpecification = EVENT_SPECIFICATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getOnMember() <em>On Member</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOnMember()
   * @generated
   * @ordered
   */
  protected EList<OnDirectiveMember> onMember;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OnDirectiveImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.ON_DIRECTIVE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEventSpecification()
  {
    return eventSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEventSpecification(String newEventSpecification)
  {
    String oldEventSpecification = eventSpecification;
    eventSpecification = newEventSpecification;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.ON_DIRECTIVE__EVENT_SPECIFICATION, oldEventSpecification, eventSpecification));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<OnDirectiveMember> getOnMember()
  {
    if (onMember == null)
    {
      onMember = new EObjectContainmentEList<OnDirectiveMember>(OnDirectiveMember.class, this, OpenScenarioPackage.ON_DIRECTIVE__ON_MEMBER);
    }
    return onMember;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.ON_DIRECTIVE__ON_MEMBER:
        return ((InternalEList<?>)getOnMember()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.ON_DIRECTIVE__EVENT_SPECIFICATION:
        return getEventSpecification();
      case OpenScenarioPackage.ON_DIRECTIVE__ON_MEMBER:
        return getOnMember();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.ON_DIRECTIVE__EVENT_SPECIFICATION:
        setEventSpecification((String)newValue);
        return;
      case OpenScenarioPackage.ON_DIRECTIVE__ON_MEMBER:
        getOnMember().clear();
        getOnMember().addAll((Collection<? extends OnDirectiveMember>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.ON_DIRECTIVE__EVENT_SPECIFICATION:
        setEventSpecification(EVENT_SPECIFICATION_EDEFAULT);
        return;
      case OpenScenarioPackage.ON_DIRECTIVE__ON_MEMBER:
        getOnMember().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.ON_DIRECTIVE__EVENT_SPECIFICATION:
        return EVENT_SPECIFICATION_EDEFAULT == null ? eventSpecification != null : !EVENT_SPECIFICATION_EDEFAULT.equals(eventSpecification);
      case OpenScenarioPackage.ON_DIRECTIVE__ON_MEMBER:
        return onMember != null && !onMember.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (eventSpecification: ");
    result.append(eventSpecification);
    result.append(')');
    return result.toString();
  }

} //OnDirectiveImpl
