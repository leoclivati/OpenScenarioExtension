/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.asam.openScenario.impl;

import de.bmwgroup.openscenario.asam.openScenario.Expression;
import de.bmwgroup.openscenario.asam.openScenario.KeepConstraintDeclaration;
import de.bmwgroup.openscenario.asam.openScenario.OpenScenarioPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Keep Constraint Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.KeepConstraintDeclarationImpl#getConstraintQualifier <em>Constraint Qualifier</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.KeepConstraintDeclarationImpl#getConstraintExpression <em>Constraint Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class KeepConstraintDeclarationImpl extends ConstraintDeclarationImpl implements KeepConstraintDeclaration
{
  /**
   * The default value of the '{@link #getConstraintQualifier() <em>Constraint Qualifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraintQualifier()
   * @generated
   * @ordered
   */
  protected static final String CONSTRAINT_QUALIFIER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConstraintQualifier() <em>Constraint Qualifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraintQualifier()
   * @generated
   * @ordered
   */
  protected String constraintQualifier = CONSTRAINT_QUALIFIER_EDEFAULT;

  /**
   * The cached value of the '{@link #getConstraintExpression() <em>Constraint Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraintExpression()
   * @generated
   * @ordered
   */
  protected Expression constraintExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected KeepConstraintDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.KEEP_CONSTRAINT_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConstraintQualifier()
  {
    return constraintQualifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstraintQualifier(String newConstraintQualifier)
  {
    String oldConstraintQualifier = constraintQualifier;
    constraintQualifier = newConstraintQualifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.KEEP_CONSTRAINT_DECLARATION__CONSTRAINT_QUALIFIER, oldConstraintQualifier, constraintQualifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getConstraintExpression()
  {
    return constraintExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConstraintExpression(Expression newConstraintExpression, NotificationChain msgs)
  {
    Expression oldConstraintExpression = constraintExpression;
    constraintExpression = newConstraintExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.KEEP_CONSTRAINT_DECLARATION__CONSTRAINT_EXPRESSION, oldConstraintExpression, newConstraintExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstraintExpression(Expression newConstraintExpression)
  {
    if (newConstraintExpression != constraintExpression)
    {
      NotificationChain msgs = null;
      if (constraintExpression != null)
        msgs = ((InternalEObject)constraintExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.KEEP_CONSTRAINT_DECLARATION__CONSTRAINT_EXPRESSION, null, msgs);
      if (newConstraintExpression != null)
        msgs = ((InternalEObject)newConstraintExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.KEEP_CONSTRAINT_DECLARATION__CONSTRAINT_EXPRESSION, null, msgs);
      msgs = basicSetConstraintExpression(newConstraintExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.KEEP_CONSTRAINT_DECLARATION__CONSTRAINT_EXPRESSION, newConstraintExpression, newConstraintExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.KEEP_CONSTRAINT_DECLARATION__CONSTRAINT_EXPRESSION:
        return basicSetConstraintExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.KEEP_CONSTRAINT_DECLARATION__CONSTRAINT_QUALIFIER:
        return getConstraintQualifier();
      case OpenScenarioPackage.KEEP_CONSTRAINT_DECLARATION__CONSTRAINT_EXPRESSION:
        return getConstraintExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.KEEP_CONSTRAINT_DECLARATION__CONSTRAINT_QUALIFIER:
        setConstraintQualifier((String)newValue);
        return;
      case OpenScenarioPackage.KEEP_CONSTRAINT_DECLARATION__CONSTRAINT_EXPRESSION:
        setConstraintExpression((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.KEEP_CONSTRAINT_DECLARATION__CONSTRAINT_QUALIFIER:
        setConstraintQualifier(CONSTRAINT_QUALIFIER_EDEFAULT);
        return;
      case OpenScenarioPackage.KEEP_CONSTRAINT_DECLARATION__CONSTRAINT_EXPRESSION:
        setConstraintExpression((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.KEEP_CONSTRAINT_DECLARATION__CONSTRAINT_QUALIFIER:
        return CONSTRAINT_QUALIFIER_EDEFAULT == null ? constraintQualifier != null : !CONSTRAINT_QUALIFIER_EDEFAULT.equals(constraintQualifier);
      case OpenScenarioPackage.KEEP_CONSTRAINT_DECLARATION__CONSTRAINT_EXPRESSION:
        return constraintExpression != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (constraintQualifier: ");
    result.append(constraintQualifier);
    result.append(')');
    return result.toString();
  }

} //KeepConstraintDeclarationImpl
