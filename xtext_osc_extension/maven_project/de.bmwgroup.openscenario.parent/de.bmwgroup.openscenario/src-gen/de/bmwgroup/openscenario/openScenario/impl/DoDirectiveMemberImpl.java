/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.openScenario.impl;

import de.bmwgroup.openscenario.openScenario.BehaviorInvocation;
import de.bmwgroup.openscenario.openScenario.CallDirective;
import de.bmwgroup.openscenario.openScenario.Composition;
import de.bmwgroup.openscenario.openScenario.DoDirectiveMember;
import de.bmwgroup.openscenario.openScenario.EmitDirective;
import de.bmwgroup.openscenario.openScenario.OpenScenarioPackage;
import de.bmwgroup.openscenario.openScenario.WaitDirective;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Do Directive Member</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.DoDirectiveMemberImpl#getLabelName <em>Label Name</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.DoDirectiveMemberImpl#getComposition <em>Composition</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.DoDirectiveMemberImpl#getEmitDirective <em>Emit Directive</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.DoDirectiveMemberImpl#getCallDirective <em>Call Directive</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.DoDirectiveMemberImpl#getWaitDirective <em>Wait Directive</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.DoDirectiveMemberImpl#getBehaviorInvocation <em>Behavior Invocation</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DoDirectiveMemberImpl extends MinimalEObjectImpl.Container implements DoDirectiveMember
{
  /**
   * The default value of the '{@link #getLabelName() <em>Label Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabelName()
   * @generated
   * @ordered
   */
  protected static final String LABEL_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLabelName() <em>Label Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabelName()
   * @generated
   * @ordered
   */
  protected String labelName = LABEL_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getComposition() <em>Composition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComposition()
   * @generated
   * @ordered
   */
  protected Composition composition;

  /**
   * The cached value of the '{@link #getEmitDirective() <em>Emit Directive</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmitDirective()
   * @generated
   * @ordered
   */
  protected EmitDirective emitDirective;

  /**
   * The cached value of the '{@link #getCallDirective() <em>Call Directive</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCallDirective()
   * @generated
   * @ordered
   */
  protected CallDirective callDirective;

  /**
   * The cached value of the '{@link #getWaitDirective() <em>Wait Directive</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWaitDirective()
   * @generated
   * @ordered
   */
  protected WaitDirective waitDirective;

  /**
   * The cached value of the '{@link #getBehaviorInvocation() <em>Behavior Invocation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBehaviorInvocation()
   * @generated
   * @ordered
   */
  protected BehaviorInvocation behaviorInvocation;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DoDirectiveMemberImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.DO_DIRECTIVE_MEMBER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLabelName()
  {
    return labelName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLabelName(String newLabelName)
  {
    String oldLabelName = labelName;
    labelName = newLabelName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.DO_DIRECTIVE_MEMBER__LABEL_NAME, oldLabelName, labelName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Composition getComposition()
  {
    return composition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetComposition(Composition newComposition, NotificationChain msgs)
  {
    Composition oldComposition = composition;
    composition = newComposition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.DO_DIRECTIVE_MEMBER__COMPOSITION, oldComposition, newComposition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComposition(Composition newComposition)
  {
    if (newComposition != composition)
    {
      NotificationChain msgs = null;
      if (composition != null)
        msgs = ((InternalEObject)composition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.DO_DIRECTIVE_MEMBER__COMPOSITION, null, msgs);
      if (newComposition != null)
        msgs = ((InternalEObject)newComposition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.DO_DIRECTIVE_MEMBER__COMPOSITION, null, msgs);
      msgs = basicSetComposition(newComposition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.DO_DIRECTIVE_MEMBER__COMPOSITION, newComposition, newComposition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EmitDirective getEmitDirective()
  {
    return emitDirective;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEmitDirective(EmitDirective newEmitDirective, NotificationChain msgs)
  {
    EmitDirective oldEmitDirective = emitDirective;
    emitDirective = newEmitDirective;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.DO_DIRECTIVE_MEMBER__EMIT_DIRECTIVE, oldEmitDirective, newEmitDirective);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEmitDirective(EmitDirective newEmitDirective)
  {
    if (newEmitDirective != emitDirective)
    {
      NotificationChain msgs = null;
      if (emitDirective != null)
        msgs = ((InternalEObject)emitDirective).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.DO_DIRECTIVE_MEMBER__EMIT_DIRECTIVE, null, msgs);
      if (newEmitDirective != null)
        msgs = ((InternalEObject)newEmitDirective).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.DO_DIRECTIVE_MEMBER__EMIT_DIRECTIVE, null, msgs);
      msgs = basicSetEmitDirective(newEmitDirective, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.DO_DIRECTIVE_MEMBER__EMIT_DIRECTIVE, newEmitDirective, newEmitDirective));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CallDirective getCallDirective()
  {
    return callDirective;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCallDirective(CallDirective newCallDirective, NotificationChain msgs)
  {
    CallDirective oldCallDirective = callDirective;
    callDirective = newCallDirective;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.DO_DIRECTIVE_MEMBER__CALL_DIRECTIVE, oldCallDirective, newCallDirective);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCallDirective(CallDirective newCallDirective)
  {
    if (newCallDirective != callDirective)
    {
      NotificationChain msgs = null;
      if (callDirective != null)
        msgs = ((InternalEObject)callDirective).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.DO_DIRECTIVE_MEMBER__CALL_DIRECTIVE, null, msgs);
      if (newCallDirective != null)
        msgs = ((InternalEObject)newCallDirective).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.DO_DIRECTIVE_MEMBER__CALL_DIRECTIVE, null, msgs);
      msgs = basicSetCallDirective(newCallDirective, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.DO_DIRECTIVE_MEMBER__CALL_DIRECTIVE, newCallDirective, newCallDirective));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WaitDirective getWaitDirective()
  {
    return waitDirective;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWaitDirective(WaitDirective newWaitDirective, NotificationChain msgs)
  {
    WaitDirective oldWaitDirective = waitDirective;
    waitDirective = newWaitDirective;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.DO_DIRECTIVE_MEMBER__WAIT_DIRECTIVE, oldWaitDirective, newWaitDirective);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWaitDirective(WaitDirective newWaitDirective)
  {
    if (newWaitDirective != waitDirective)
    {
      NotificationChain msgs = null;
      if (waitDirective != null)
        msgs = ((InternalEObject)waitDirective).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.DO_DIRECTIVE_MEMBER__WAIT_DIRECTIVE, null, msgs);
      if (newWaitDirective != null)
        msgs = ((InternalEObject)newWaitDirective).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.DO_DIRECTIVE_MEMBER__WAIT_DIRECTIVE, null, msgs);
      msgs = basicSetWaitDirective(newWaitDirective, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.DO_DIRECTIVE_MEMBER__WAIT_DIRECTIVE, newWaitDirective, newWaitDirective));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BehaviorInvocation getBehaviorInvocation()
  {
    return behaviorInvocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBehaviorInvocation(BehaviorInvocation newBehaviorInvocation, NotificationChain msgs)
  {
    BehaviorInvocation oldBehaviorInvocation = behaviorInvocation;
    behaviorInvocation = newBehaviorInvocation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.DO_DIRECTIVE_MEMBER__BEHAVIOR_INVOCATION, oldBehaviorInvocation, newBehaviorInvocation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBehaviorInvocation(BehaviorInvocation newBehaviorInvocation)
  {
    if (newBehaviorInvocation != behaviorInvocation)
    {
      NotificationChain msgs = null;
      if (behaviorInvocation != null)
        msgs = ((InternalEObject)behaviorInvocation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.DO_DIRECTIVE_MEMBER__BEHAVIOR_INVOCATION, null, msgs);
      if (newBehaviorInvocation != null)
        msgs = ((InternalEObject)newBehaviorInvocation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.DO_DIRECTIVE_MEMBER__BEHAVIOR_INVOCATION, null, msgs);
      msgs = basicSetBehaviorInvocation(newBehaviorInvocation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.DO_DIRECTIVE_MEMBER__BEHAVIOR_INVOCATION, newBehaviorInvocation, newBehaviorInvocation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__COMPOSITION:
        return basicSetComposition(null, msgs);
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__EMIT_DIRECTIVE:
        return basicSetEmitDirective(null, msgs);
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__CALL_DIRECTIVE:
        return basicSetCallDirective(null, msgs);
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__WAIT_DIRECTIVE:
        return basicSetWaitDirective(null, msgs);
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__BEHAVIOR_INVOCATION:
        return basicSetBehaviorInvocation(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__LABEL_NAME:
        return getLabelName();
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__COMPOSITION:
        return getComposition();
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__EMIT_DIRECTIVE:
        return getEmitDirective();
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__CALL_DIRECTIVE:
        return getCallDirective();
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__WAIT_DIRECTIVE:
        return getWaitDirective();
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__BEHAVIOR_INVOCATION:
        return getBehaviorInvocation();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__LABEL_NAME:
        setLabelName((String)newValue);
        return;
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__COMPOSITION:
        setComposition((Composition)newValue);
        return;
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__EMIT_DIRECTIVE:
        setEmitDirective((EmitDirective)newValue);
        return;
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__CALL_DIRECTIVE:
        setCallDirective((CallDirective)newValue);
        return;
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__WAIT_DIRECTIVE:
        setWaitDirective((WaitDirective)newValue);
        return;
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__BEHAVIOR_INVOCATION:
        setBehaviorInvocation((BehaviorInvocation)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__LABEL_NAME:
        setLabelName(LABEL_NAME_EDEFAULT);
        return;
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__COMPOSITION:
        setComposition((Composition)null);
        return;
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__EMIT_DIRECTIVE:
        setEmitDirective((EmitDirective)null);
        return;
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__CALL_DIRECTIVE:
        setCallDirective((CallDirective)null);
        return;
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__WAIT_DIRECTIVE:
        setWaitDirective((WaitDirective)null);
        return;
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__BEHAVIOR_INVOCATION:
        setBehaviorInvocation((BehaviorInvocation)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__LABEL_NAME:
        return LABEL_NAME_EDEFAULT == null ? labelName != null : !LABEL_NAME_EDEFAULT.equals(labelName);
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__COMPOSITION:
        return composition != null;
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__EMIT_DIRECTIVE:
        return emitDirective != null;
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__CALL_DIRECTIVE:
        return callDirective != null;
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__WAIT_DIRECTIVE:
        return waitDirective != null;
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER__BEHAVIOR_INVOCATION:
        return behaviorInvocation != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (labelName: ");
    result.append(labelName);
    result.append(')');
    return result.toString();
  }

} //DoDirectiveMemberImpl
