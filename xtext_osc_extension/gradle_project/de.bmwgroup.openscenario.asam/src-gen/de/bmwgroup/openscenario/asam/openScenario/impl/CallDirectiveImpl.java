/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.asam.openScenario.impl;

import de.bmwgroup.openscenario.asam.openScenario.CallDirective;
import de.bmwgroup.openscenario.asam.openScenario.MethodInvocation;
import de.bmwgroup.openscenario.asam.openScenario.OpenScenarioPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Call Directive</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.CallDirectiveImpl#getMethodInvocation <em>Method Invocation</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CallDirectiveImpl extends OnDirectiveMemberImpl implements CallDirective
{
  /**
   * The cached value of the '{@link #getMethodInvocation() <em>Method Invocation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethodInvocation()
   * @generated
   * @ordered
   */
  protected MethodInvocation methodInvocation;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CallDirectiveImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.CALL_DIRECTIVE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodInvocation getMethodInvocation()
  {
    return methodInvocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMethodInvocation(MethodInvocation newMethodInvocation, NotificationChain msgs)
  {
    MethodInvocation oldMethodInvocation = methodInvocation;
    methodInvocation = newMethodInvocation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.CALL_DIRECTIVE__METHOD_INVOCATION, oldMethodInvocation, newMethodInvocation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMethodInvocation(MethodInvocation newMethodInvocation)
  {
    if (newMethodInvocation != methodInvocation)
    {
      NotificationChain msgs = null;
      if (methodInvocation != null)
        msgs = ((InternalEObject)methodInvocation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.CALL_DIRECTIVE__METHOD_INVOCATION, null, msgs);
      if (newMethodInvocation != null)
        msgs = ((InternalEObject)newMethodInvocation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.CALL_DIRECTIVE__METHOD_INVOCATION, null, msgs);
      msgs = basicSetMethodInvocation(newMethodInvocation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.CALL_DIRECTIVE__METHOD_INVOCATION, newMethodInvocation, newMethodInvocation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.CALL_DIRECTIVE__METHOD_INVOCATION:
        return basicSetMethodInvocation(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.CALL_DIRECTIVE__METHOD_INVOCATION:
        return getMethodInvocation();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.CALL_DIRECTIVE__METHOD_INVOCATION:
        setMethodInvocation((MethodInvocation)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.CALL_DIRECTIVE__METHOD_INVOCATION:
        setMethodInvocation((MethodInvocation)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.CALL_DIRECTIVE__METHOD_INVOCATION:
        return methodInvocation != null;
    }
    return super.eIsSet(featureID);
  }

} //CallDirectiveImpl
