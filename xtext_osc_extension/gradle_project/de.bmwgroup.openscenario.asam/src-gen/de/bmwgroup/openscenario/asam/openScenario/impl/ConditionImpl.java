/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.asam.openScenario.impl;

import de.bmwgroup.openscenario.asam.openScenario.Condition;
import de.bmwgroup.openscenario.asam.openScenario.Expression;
import de.bmwgroup.openscenario.asam.openScenario.OpenScenarioPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.ConditionImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.ConditionImpl#getTrueResult <em>True Result</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.asam.openScenario.impl.ConditionImpl#getFalseResult <em>False Result</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionImpl extends EventConditionImpl implements Condition
{
  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Expression condition;

  /**
   * The cached value of the '{@link #getTrueResult() <em>True Result</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrueResult()
   * @generated
   * @ordered
   */
  protected Expression trueResult;

  /**
   * The cached value of the '{@link #getFalseResult() <em>False Result</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFalseResult()
   * @generated
   * @ordered
   */
  protected Expression falseResult;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Expression newCondition, NotificationChain msgs)
  {
    Expression oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.CONDITION__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(Expression newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.CONDITION__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.CONDITION__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.CONDITION__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getTrueResult()
  {
    return trueResult;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTrueResult(Expression newTrueResult, NotificationChain msgs)
  {
    Expression oldTrueResult = trueResult;
    trueResult = newTrueResult;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.CONDITION__TRUE_RESULT, oldTrueResult, newTrueResult);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTrueResult(Expression newTrueResult)
  {
    if (newTrueResult != trueResult)
    {
      NotificationChain msgs = null;
      if (trueResult != null)
        msgs = ((InternalEObject)trueResult).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.CONDITION__TRUE_RESULT, null, msgs);
      if (newTrueResult != null)
        msgs = ((InternalEObject)newTrueResult).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.CONDITION__TRUE_RESULT, null, msgs);
      msgs = basicSetTrueResult(newTrueResult, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.CONDITION__TRUE_RESULT, newTrueResult, newTrueResult));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getFalseResult()
  {
    return falseResult;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFalseResult(Expression newFalseResult, NotificationChain msgs)
  {
    Expression oldFalseResult = falseResult;
    falseResult = newFalseResult;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.CONDITION__FALSE_RESULT, oldFalseResult, newFalseResult);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFalseResult(Expression newFalseResult)
  {
    if (newFalseResult != falseResult)
    {
      NotificationChain msgs = null;
      if (falseResult != null)
        msgs = ((InternalEObject)falseResult).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.CONDITION__FALSE_RESULT, null, msgs);
      if (newFalseResult != null)
        msgs = ((InternalEObject)newFalseResult).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.CONDITION__FALSE_RESULT, null, msgs);
      msgs = basicSetFalseResult(newFalseResult, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.CONDITION__FALSE_RESULT, newFalseResult, newFalseResult));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.CONDITION__CONDITION:
        return basicSetCondition(null, msgs);
      case OpenScenarioPackage.CONDITION__TRUE_RESULT:
        return basicSetTrueResult(null, msgs);
      case OpenScenarioPackage.CONDITION__FALSE_RESULT:
        return basicSetFalseResult(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.CONDITION__CONDITION:
        return getCondition();
      case OpenScenarioPackage.CONDITION__TRUE_RESULT:
        return getTrueResult();
      case OpenScenarioPackage.CONDITION__FALSE_RESULT:
        return getFalseResult();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.CONDITION__CONDITION:
        setCondition((Expression)newValue);
        return;
      case OpenScenarioPackage.CONDITION__TRUE_RESULT:
        setTrueResult((Expression)newValue);
        return;
      case OpenScenarioPackage.CONDITION__FALSE_RESULT:
        setFalseResult((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.CONDITION__CONDITION:
        setCondition((Expression)null);
        return;
      case OpenScenarioPackage.CONDITION__TRUE_RESULT:
        setTrueResult((Expression)null);
        return;
      case OpenScenarioPackage.CONDITION__FALSE_RESULT:
        setFalseResult((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.CONDITION__CONDITION:
        return condition != null;
      case OpenScenarioPackage.CONDITION__TRUE_RESULT:
        return trueResult != null;
      case OpenScenarioPackage.CONDITION__FALSE_RESULT:
        return falseResult != null;
    }
    return super.eIsSet(featureID);
  }

} //ConditionImpl
