/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.openScenario.util;

import de.bmwgroup.openscenario.openScenario.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see de.bmwgroup.openscenario.openScenario.OpenScenarioPackage
 * @generated
 */
public class OpenScenarioSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static OpenScenarioPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OpenScenarioSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = OpenScenarioPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case OpenScenarioPackage.OSC_FILE:
      {
        OscFile oscFile = (OscFile)theEObject;
        T result = caseOscFile(oscFile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.PRELUDE_STATEMENT:
      {
        PreludeStatement preludeStatement = (PreludeStatement)theEObject;
        T result = casePreludeStatement(preludeStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.IMPORT_STATEMENT:
      {
        ImportStatement importStatement = (ImportStatement)theEObject;
        T result = caseImportStatement(importStatement);
        if (result == null) result = casePreludeStatement(importStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.IMPORT_REFERENCE:
      {
        ImportReference importReference = (ImportReference)theEObject;
        T result = caseImportReference(importReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.STRUCTURED_ID:
      {
        StructuredID structuredID = (StructuredID)theEObject;
        T result = caseStructuredID(structuredID);
        if (result == null) result = caseImportReference(structuredID);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.OSC_DECLARATION:
      {
        OscDeclaration oscDeclaration = (OscDeclaration)theEObject;
        T result = caseOscDeclaration(oscDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.PHYSICAL_TYPE_DECLARATION:
      {
        PhysicalTypeDeclaration physicalTypeDeclaration = (PhysicalTypeDeclaration)theEObject;
        T result = casePhysicalTypeDeclaration(physicalTypeDeclaration);
        if (result == null) result = caseOscDeclaration(physicalTypeDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.UNIT_DECLARATION:
      {
        UnitDeclaration unitDeclaration = (UnitDeclaration)theEObject;
        T result = caseUnitDeclaration(unitDeclaration);
        if (result == null) result = caseOscDeclaration(unitDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.SI_BASE_UNIT_SPECIFIER:
      {
        SIBaseUnitSpecifier siBaseUnitSpecifier = (SIBaseUnitSpecifier)theEObject;
        T result = caseSIBaseUnitSpecifier(siBaseUnitSpecifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.SI_BASE_EXPONENT_LIST:
      {
        SIBaseExponentList siBaseExponentList = (SIBaseExponentList)theEObject;
        T result = caseSIBaseExponentList(siBaseExponentList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.SI_BASE_EXPONENT:
      {
        SIBaseExponent siBaseExponent = (SIBaseExponent)theEObject;
        T result = caseSIBaseExponent(siBaseExponent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.SI_UNIT_SPECIFIER:
      {
        SIUnitSpecifier siUnitSpecifier = (SIUnitSpecifier)theEObject;
        T result = caseSIUnitSpecifier(siUnitSpecifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.TYPE_EXTENSION:
      {
        TypeExtension typeExtension = (TypeExtension)theEObject;
        T result = caseTypeExtension(typeExtension);
        if (result == null) result = caseOscDeclaration(typeExtension);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.ENUM_TYPE_EXTENSION:
      {
        EnumTypeExtension enumTypeExtension = (EnumTypeExtension)theEObject;
        T result = caseEnumTypeExtension(enumTypeExtension);
        if (result == null) result = caseTypeExtension(enumTypeExtension);
        if (result == null) result = caseOscDeclaration(enumTypeExtension);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.STRUCTURED_TYPE_EXTENSION:
      {
        StructuredTypeExtension structuredTypeExtension = (StructuredTypeExtension)theEObject;
        T result = caseStructuredTypeExtension(structuredTypeExtension);
        if (result == null) result = caseTypeExtension(structuredTypeExtension);
        if (result == null) result = caseOscDeclaration(structuredTypeExtension);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.EXTENSION_MEMBER_DECLARATION:
      {
        ExtensionMemberDeclaration extensionMemberDeclaration = (ExtensionMemberDeclaration)theEObject;
        T result = caseExtensionMemberDeclaration(extensionMemberDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.GLOBAL_PARAMETER_DECLARATION:
      {
        GlobalParameterDeclaration globalParameterDeclaration = (GlobalParameterDeclaration)theEObject;
        T result = caseGlobalParameterDeclaration(globalParameterDeclaration);
        if (result == null) result = caseOscDeclaration(globalParameterDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.PARAMETER_DECLARATION:
      {
        ParameterDeclaration parameterDeclaration = (ParameterDeclaration)theEObject;
        T result = caseParameterDeclaration(parameterDeclaration);
        if (result == null) result = caseFieldDeclaration(parameterDeclaration);
        if (result == null) result = caseMemberDeclaration(parameterDeclaration);
        if (result == null) result = caseExtensionMemberDeclaration(parameterDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.ENUM_DECLARATION:
      {
        EnumDeclaration enumDeclaration = (EnumDeclaration)theEObject;
        T result = caseEnumDeclaration(enumDeclaration);
        if (result == null) result = caseOscDeclaration(enumDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.ENUM_MEMBER_DECLARATION:
      {
        EnumMemberDeclaration enumMemberDeclaration = (EnumMemberDeclaration)theEObject;
        T result = caseEnumMemberDeclaration(enumMemberDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.ENUM_VALUE_REFERENCE:
      {
        EnumValueReference enumValueReference = (EnumValueReference)theEObject;
        T result = caseEnumValueReference(enumValueReference);
        if (result == null) result = caseValueExp(enumValueReference);
        if (result == null) result = casePrimaryExp(enumValueReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.MODIFIER_DECLARATION:
      {
        ModifierDeclaration modifierDeclaration = (ModifierDeclaration)theEObject;
        T result = caseModifierDeclaration(modifierDeclaration);
        if (result == null) result = caseOscDeclaration(modifierDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.ACTION_DECLARATION:
      {
        ActionDeclaration actionDeclaration = (ActionDeclaration)theEObject;
        T result = caseActionDeclaration(actionDeclaration);
        if (result == null) result = caseOscDeclaration(actionDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.ACTOR_DECLARATION:
      {
        ActorDeclaration actorDeclaration = (ActorDeclaration)theEObject;
        T result = caseActorDeclaration(actorDeclaration);
        if (result == null) result = caseOscDeclaration(actorDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.STRUCT_DECLARATION:
      {
        StructDeclaration structDeclaration = (StructDeclaration)theEObject;
        T result = caseStructDeclaration(structDeclaration);
        if (result == null) result = caseOscDeclaration(structDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.SCENARIO_DECLARATION:
      {
        ScenarioDeclaration scenarioDeclaration = (ScenarioDeclaration)theEObject;
        T result = caseScenarioDeclaration(scenarioDeclaration);
        if (result == null) result = caseOscDeclaration(scenarioDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.MEMBER_DECLARATION:
      {
        MemberDeclaration memberDeclaration = (MemberDeclaration)theEObject;
        T result = caseMemberDeclaration(memberDeclaration);
        if (result == null) result = caseExtensionMemberDeclaration(memberDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.COVERAGE_DECLARATION:
      {
        CoverageDeclaration coverageDeclaration = (CoverageDeclaration)theEObject;
        T result = caseCoverageDeclaration(coverageDeclaration);
        if (result == null) result = caseMemberDeclaration(coverageDeclaration);
        if (result == null) result = caseExtensionMemberDeclaration(coverageDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.METHOD_DECLARATION:
      {
        MethodDeclaration methodDeclaration = (MethodDeclaration)theEObject;
        T result = caseMethodDeclaration(methodDeclaration);
        if (result == null) result = caseMemberDeclaration(methodDeclaration);
        if (result == null) result = caseExtensionMemberDeclaration(methodDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.METHOD_IMPLEMENTATION:
      {
        MethodImplementation methodImplementation = (MethodImplementation)theEObject;
        T result = caseMethodImplementation(methodImplementation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.EVENT_DECLARATION:
      {
        EventDeclaration eventDeclaration = (EventDeclaration)theEObject;
        T result = caseEventDeclaration(eventDeclaration);
        if (result == null) result = caseMemberDeclaration(eventDeclaration);
        if (result == null) result = caseExtensionMemberDeclaration(eventDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.EVENT_SPECIFICATION:
      {
        EventSpecification eventSpecification = (EventSpecification)theEObject;
        T result = caseEventSpecification(eventSpecification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.EVENT_REFERENCE:
      {
        EventReference eventReference = (EventReference)theEObject;
        T result = caseEventReference(eventReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.EVENT_PATH:
      {
        EventPath eventPath = (EventPath)theEObject;
        T result = caseEventPath(eventPath);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.EVENT_CONDITION:
      {
        EventCondition eventCondition = (EventCondition)theEObject;
        T result = caseEventCondition(eventCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.RISE_EXPRESSION:
      {
        RiseExpression riseExpression = (RiseExpression)theEObject;
        T result = caseRiseExpression(riseExpression);
        if (result == null) result = caseEventCondition(riseExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.FALL_EXPRESSION:
      {
        FallExpression fallExpression = (FallExpression)theEObject;
        T result = caseFallExpression(fallExpression);
        if (result == null) result = caseEventCondition(fallExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.ELAPSED_EXPRESSION:
      {
        ElapsedExpression elapsedExpression = (ElapsedExpression)theEObject;
        T result = caseElapsedExpression(elapsedExpression);
        if (result == null) result = caseEventCondition(elapsedExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.EVERY_EXPRESSION:
      {
        EveryExpression everyExpression = (EveryExpression)theEObject;
        T result = caseEveryExpression(everyExpression);
        if (result == null) result = caseEventCondition(everyExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.FIELD_DECLARATION:
      {
        FieldDeclaration fieldDeclaration = (FieldDeclaration)theEObject;
        T result = caseFieldDeclaration(fieldDeclaration);
        if (result == null) result = caseMemberDeclaration(fieldDeclaration);
        if (result == null) result = caseExtensionMemberDeclaration(fieldDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.VARIABLE_DECLARATION:
      {
        VariableDeclaration variableDeclaration = (VariableDeclaration)theEObject;
        T result = caseVariableDeclaration(variableDeclaration);
        if (result == null) result = caseFieldDeclaration(variableDeclaration);
        if (result == null) result = caseMemberDeclaration(variableDeclaration);
        if (result == null) result = caseExtensionMemberDeclaration(variableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.SAMPLE_EXPRESSION:
      {
        SampleExpression sampleExpression = (SampleExpression)theEObject;
        T result = caseSampleExpression(sampleExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.BEHAVIOR_SPECIFICATION:
      {
        BehaviorSpecification behaviorSpecification = (BehaviorSpecification)theEObject;
        T result = caseBehaviorSpecification(behaviorSpecification);
        if (result == null) result = caseExtensionMemberDeclaration(behaviorSpecification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.ON_DIRECTIVE:
      {
        OnDirective onDirective = (OnDirective)theEObject;
        T result = caseOnDirective(onDirective);
        if (result == null) result = caseBehaviorSpecification(onDirective);
        if (result == null) result = caseExtensionMemberDeclaration(onDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.ON_DIRECTIVE_MEMBER:
      {
        OnDirectiveMember onDirectiveMember = (OnDirectiveMember)theEObject;
        T result = caseOnDirectiveMember(onDirectiveMember);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.CALL_DIRECTIVE:
      {
        CallDirective callDirective = (CallDirective)theEObject;
        T result = caseCallDirective(callDirective);
        if (result == null) result = caseOnDirectiveMember(callDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.EMIT_DIRECTIVE:
      {
        EmitDirective emitDirective = (EmitDirective)theEObject;
        T result = caseEmitDirective(emitDirective);
        if (result == null) result = caseOnDirectiveMember(emitDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.WAIT_DIRECTIVE:
      {
        WaitDirective waitDirective = (WaitDirective)theEObject;
        T result = caseWaitDirective(waitDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.DO_DIRECTIVE:
      {
        DoDirective doDirective = (DoDirective)theEObject;
        T result = caseDoDirective(doDirective);
        if (result == null) result = caseBehaviorSpecification(doDirective);
        if (result == null) result = caseExtensionMemberDeclaration(doDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.DO_DIRECTIVE_MEMBER:
      {
        DoDirectiveMember doDirectiveMember = (DoDirectiveMember)theEObject;
        T result = caseDoDirectiveMember(doDirectiveMember);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.COMPOSITION:
      {
        Composition composition = (Composition)theEObject;
        T result = caseComposition(composition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.BEHAVIOR_INVOCATION:
      {
        BehaviorInvocation behaviorInvocation = (BehaviorInvocation)theEObject;
        T result = caseBehaviorInvocation(behaviorInvocation);
        if (result == null) result = caseBehaviorWithMember(behaviorInvocation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.PARAMETER_WITH_DECLARATION:
      {
        ParameterWithDeclaration parameterWithDeclaration = (ParameterWithDeclaration)theEObject;
        T result = caseParameterWithDeclaration(parameterWithDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.BEHAVIOR_WITH_DECLARATION:
      {
        BehaviorWithDeclaration behaviorWithDeclaration = (BehaviorWithDeclaration)theEObject;
        T result = caseBehaviorWithDeclaration(behaviorWithDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.BEHAVIOR_WITH_MEMBER:
      {
        BehaviorWithMember behaviorWithMember = (BehaviorWithMember)theEObject;
        T result = caseBehaviorWithMember(behaviorWithMember);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.CONSTRAINT_DECLARATION:
      {
        ConstraintDeclaration constraintDeclaration = (ConstraintDeclaration)theEObject;
        T result = caseConstraintDeclaration(constraintDeclaration);
        if (result == null) result = caseMemberDeclaration(constraintDeclaration);
        if (result == null) result = caseBehaviorWithMember(constraintDeclaration);
        if (result == null) result = caseExtensionMemberDeclaration(constraintDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.KEEP_CONSTRAINT_DECLARATION:
      {
        KeepConstraintDeclaration keepConstraintDeclaration = (KeepConstraintDeclaration)theEObject;
        T result = caseKeepConstraintDeclaration(keepConstraintDeclaration);
        if (result == null) result = caseConstraintDeclaration(keepConstraintDeclaration);
        if (result == null) result = caseMemberDeclaration(keepConstraintDeclaration);
        if (result == null) result = caseBehaviorWithMember(keepConstraintDeclaration);
        if (result == null) result = caseExtensionMemberDeclaration(keepConstraintDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.REMOVE_DEFAULT_DECLARATION:
      {
        RemoveDefaultDeclaration removeDefaultDeclaration = (RemoveDefaultDeclaration)theEObject;
        T result = caseRemoveDefaultDeclaration(removeDefaultDeclaration);
        if (result == null) result = caseConstraintDeclaration(removeDefaultDeclaration);
        if (result == null) result = caseMemberDeclaration(removeDefaultDeclaration);
        if (result == null) result = caseBehaviorWithMember(removeDefaultDeclaration);
        if (result == null) result = caseExtensionMemberDeclaration(removeDefaultDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.UNTIL_DIRECTIVE:
      {
        UntilDirective untilDirective = (UntilDirective)theEObject;
        T result = caseUntilDirective(untilDirective);
        if (result == null) result = caseBehaviorWithMember(untilDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.ARGUMENT_LIST_SPECIFICATION:
      {
        ArgumentListSpecification argumentListSpecification = (ArgumentListSpecification)theEObject;
        T result = caseArgumentListSpecification(argumentListSpecification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.ARGUMENT_SPECIFICATION:
      {
        ArgumentSpecification argumentSpecification = (ArgumentSpecification)theEObject;
        T result = caseArgumentSpecification(argumentSpecification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.ARGUMENT_LIST:
      {
        ArgumentList argumentList = (ArgumentList)theEObject;
        T result = caseArgumentList(argumentList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.NAMED_ARGUMENT:
      {
        NamedArgument namedArgument = (NamedArgument)theEObject;
        T result = caseNamedArgument(namedArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.POSTFIX_EXP:
      {
        PostfixExp postfixExp = (PostfixExp)theEObject;
        T result = casePostfixExp(postfixExp);
        if (result == null) result = caseMethodInvocation(postfixExp);
        if (result == null) result = caseParameterReference(postfixExp);
        if (result == null) result = caseFactor(postfixExp);
        if (result == null) result = caseTerm(postfixExp);
        if (result == null) result = caseSum(postfixExp);
        if (result == null) result = caseRelation(postfixExp);
        if (result == null) result = caseExpression(postfixExp);
        if (result == null) result = caseEventCondition(postfixExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.POSTFIX_EXP_TAIL:
      {
        PostfixExpTail postfixExpTail = (PostfixExpTail)theEObject;
        T result = casePostfixExpTail(postfixExpTail);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.CAST_EXP_TAIL:
      {
        CastExpTail castExpTail = (CastExpTail)theEObject;
        T result = caseCastExpTail(castExpTail);
        if (result == null) result = casePostfixExpTail(castExpTail);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.TYPE_TEST_TAIL:
      {
        TypeTestTail typeTestTail = (TypeTestTail)theEObject;
        T result = caseTypeTestTail(typeTestTail);
        if (result == null) result = casePostfixExpTail(typeTestTail);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.ELEMENT_ACCESS_TAIL:
      {
        ElementAccessTail elementAccessTail = (ElementAccessTail)theEObject;
        T result = caseElementAccessTail(elementAccessTail);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.FIELD_ACCESS_TAIL:
      {
        FieldAccessTail fieldAccessTail = (FieldAccessTail)theEObject;
        T result = caseFieldAccessTail(fieldAccessTail);
        if (result == null) result = casePostfixExpTail(fieldAccessTail);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.METHOD_INVOCATION:
      {
        MethodInvocation methodInvocation = (MethodInvocation)theEObject;
        T result = caseMethodInvocation(methodInvocation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.PARAMETER_REFERENCE:
      {
        ParameterReference parameterReference = (ParameterReference)theEObject;
        T result = caseParameterReference(parameterReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.PRIMARY_EXP:
      {
        PrimaryExp primaryExp = (PrimaryExp)theEObject;
        T result = casePrimaryExp(primaryExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.VALUE_EXP:
      {
        ValueExp valueExp = (ValueExp)theEObject;
        T result = caseValueExp(valueExp);
        if (result == null) result = casePrimaryExp(valueExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.PHYSICAL_TYPE:
      {
        PhysicalType physicalType = (PhysicalType)theEObject;
        T result = casePhysicalType(physicalType);
        if (result == null) result = caseValueExp(physicalType);
        if (result == null) result = casePrimaryExp(physicalType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.LIST_CONSTRUCTOR:
      {
        ListConstructor listConstructor = (ListConstructor)theEObject;
        T result = caseListConstructor(listConstructor);
        if (result == null) result = casePrimaryExp(listConstructor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.RANGE_CONSTRUCTOR:
      {
        RangeConstructor rangeConstructor = (RangeConstructor)theEObject;
        T result = caseRangeConstructor(rangeConstructor);
        if (result == null) result = casePrimaryExp(rangeConstructor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.CONDITION:
      {
        Condition condition = (Condition)theEObject;
        T result = caseCondition(condition);
        if (result == null) result = caseEventCondition(condition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = caseEventCondition(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.RELATION:
      {
        Relation relation = (Relation)theEObject;
        T result = caseRelation(relation);
        if (result == null) result = caseExpression(relation);
        if (result == null) result = caseEventCondition(relation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.SUM:
      {
        Sum sum = (Sum)theEObject;
        T result = caseSum(sum);
        if (result == null) result = caseRelation(sum);
        if (result == null) result = caseExpression(sum);
        if (result == null) result = caseEventCondition(sum);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.TERM:
      {
        Term term = (Term)theEObject;
        T result = caseTerm(term);
        if (result == null) result = caseSum(term);
        if (result == null) result = caseRelation(term);
        if (result == null) result = caseExpression(term);
        if (result == null) result = caseEventCondition(term);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OpenScenarioPackage.FACTOR:
      {
        Factor factor = (Factor)theEObject;
        T result = caseFactor(factor);
        if (result == null) result = caseTerm(factor);
        if (result == null) result = caseSum(factor);
        if (result == null) result = caseRelation(factor);
        if (result == null) result = caseExpression(factor);
        if (result == null) result = caseEventCondition(factor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Osc File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Osc File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOscFile(OscFile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Prelude Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Prelude Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePreludeStatement(PreludeStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImportStatement(ImportStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImportReference(ImportReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Structured ID</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Structured ID</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStructuredID(StructuredID object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Osc Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Osc Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOscDeclaration(OscDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Physical Type Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Physical Type Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePhysicalTypeDeclaration(PhysicalTypeDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unit Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unit Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnitDeclaration(UnitDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SI Base Unit Specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SI Base Unit Specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSIBaseUnitSpecifier(SIBaseUnitSpecifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SI Base Exponent List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SI Base Exponent List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSIBaseExponentList(SIBaseExponentList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SI Base Exponent</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SI Base Exponent</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSIBaseExponent(SIBaseExponent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SI Unit Specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SI Unit Specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSIUnitSpecifier(SIUnitSpecifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Extension</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Extension</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeExtension(TypeExtension object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Type Extension</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Type Extension</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumTypeExtension(EnumTypeExtension object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Structured Type Extension</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Structured Type Extension</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStructuredTypeExtension(StructuredTypeExtension object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Extension Member Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Extension Member Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExtensionMemberDeclaration(ExtensionMemberDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Global Parameter Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Global Parameter Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGlobalParameterDeclaration(GlobalParameterDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterDeclaration(ParameterDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumDeclaration(EnumDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Member Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Member Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumMemberDeclaration(EnumMemberDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Value Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Value Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumValueReference(EnumValueReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Modifier Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Modifier Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModifierDeclaration(ModifierDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActionDeclaration(ActionDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Actor Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Actor Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActorDeclaration(ActorDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Struct Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Struct Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStructDeclaration(StructDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scenario Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scenario Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScenarioDeclaration(ScenarioDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Member Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Member Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMemberDeclaration(MemberDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Coverage Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Coverage Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCoverageDeclaration(CoverageDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodDeclaration(MethodDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Implementation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Implementation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodImplementation(MethodImplementation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventDeclaration(EventDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventSpecification(EventSpecification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventReference(EventReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Path</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Path</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventPath(EventPath object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventCondition(EventCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rise Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rise Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRiseExpression(RiseExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fall Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fall Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFallExpression(FallExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Elapsed Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Elapsed Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElapsedExpression(ElapsedExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Every Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Every Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEveryExpression(EveryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldDeclaration(FieldDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableDeclaration(VariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sample Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sample Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSampleExpression(SampleExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Behavior Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Behavior Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBehaviorSpecification(BehaviorSpecification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>On Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>On Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOnDirective(OnDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>On Directive Member</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>On Directive Member</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOnDirectiveMember(OnDirectiveMember object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Call Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Call Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCallDirective(CallDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Emit Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Emit Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEmitDirective(EmitDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Wait Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Wait Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWaitDirective(WaitDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Do Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Do Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDoDirective(DoDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Do Directive Member</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Do Directive Member</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDoDirectiveMember(DoDirectiveMember object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Composition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Composition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComposition(Composition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Behavior Invocation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Behavior Invocation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBehaviorInvocation(BehaviorInvocation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter With Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter With Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterWithDeclaration(ParameterWithDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Behavior With Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Behavior With Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBehaviorWithDeclaration(BehaviorWithDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Behavior With Member</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Behavior With Member</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBehaviorWithMember(BehaviorWithMember object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constraint Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constraint Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstraintDeclaration(ConstraintDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Keep Constraint Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Keep Constraint Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKeepConstraintDeclaration(KeepConstraintDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Remove Default Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Remove Default Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRemoveDefaultDeclaration(RemoveDefaultDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Until Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Until Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUntilDirective(UntilDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Argument List Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Argument List Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArgumentListSpecification(ArgumentListSpecification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Argument Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Argument Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArgumentSpecification(ArgumentSpecification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Argument List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Argument List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArgumentList(ArgumentList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Named Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Named Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNamedArgument(NamedArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Postfix Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Postfix Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePostfixExp(PostfixExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Postfix Exp Tail</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Postfix Exp Tail</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePostfixExpTail(PostfixExpTail object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cast Exp Tail</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cast Exp Tail</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCastExpTail(CastExpTail object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Test Tail</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Test Tail</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeTestTail(TypeTestTail object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Access Tail</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Access Tail</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementAccessTail(ElementAccessTail object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Access Tail</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Access Tail</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldAccessTail(FieldAccessTail object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Invocation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Invocation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodInvocation(MethodInvocation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterReference(ParameterReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimaryExp(PrimaryExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValueExp(ValueExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Physical Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Physical Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePhysicalType(PhysicalType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Constructor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Constructor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListConstructor(ListConstructor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Range Constructor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Range Constructor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRangeConstructor(RangeConstructor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCondition(Condition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelation(Relation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sum</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sum</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSum(Sum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTerm(Term object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Factor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Factor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFactor(Factor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //OpenScenarioSwitch
