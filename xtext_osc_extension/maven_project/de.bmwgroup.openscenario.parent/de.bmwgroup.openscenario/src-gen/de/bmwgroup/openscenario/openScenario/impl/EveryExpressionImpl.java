/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.openScenario.impl;

import de.bmwgroup.openscenario.openScenario.EveryExpression;
import de.bmwgroup.openscenario.openScenario.Expression;
import de.bmwgroup.openscenario.openScenario.OpenScenarioPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Every Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.EveryExpressionImpl#getDurationExpression <em>Duration Expression</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.EveryExpressionImpl#getNextdurationExpression <em>Nextduration Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EveryExpressionImpl extends EventConditionImpl implements EveryExpression
{
  /**
   * The cached value of the '{@link #getDurationExpression() <em>Duration Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDurationExpression()
   * @generated
   * @ordered
   */
  protected Expression durationExpression;

  /**
   * The cached value of the '{@link #getNextdurationExpression() <em>Nextduration Expression</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNextdurationExpression()
   * @generated
   * @ordered
   */
  protected EList<Expression> nextdurationExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EveryExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.EVERY_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getDurationExpression()
  {
    return durationExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDurationExpression(Expression newDurationExpression, NotificationChain msgs)
  {
    Expression oldDurationExpression = durationExpression;
    durationExpression = newDurationExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.EVERY_EXPRESSION__DURATION_EXPRESSION, oldDurationExpression, newDurationExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDurationExpression(Expression newDurationExpression)
  {
    if (newDurationExpression != durationExpression)
    {
      NotificationChain msgs = null;
      if (durationExpression != null)
        msgs = ((InternalEObject)durationExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.EVERY_EXPRESSION__DURATION_EXPRESSION, null, msgs);
      if (newDurationExpression != null)
        msgs = ((InternalEObject)newDurationExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.EVERY_EXPRESSION__DURATION_EXPRESSION, null, msgs);
      msgs = basicSetDurationExpression(newDurationExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.EVERY_EXPRESSION__DURATION_EXPRESSION, newDurationExpression, newDurationExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expression> getNextdurationExpression()
  {
    if (nextdurationExpression == null)
    {
      nextdurationExpression = new EObjectContainmentEList<Expression>(Expression.class, this, OpenScenarioPackage.EVERY_EXPRESSION__NEXTDURATION_EXPRESSION);
    }
    return nextdurationExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVERY_EXPRESSION__DURATION_EXPRESSION:
        return basicSetDurationExpression(null, msgs);
      case OpenScenarioPackage.EVERY_EXPRESSION__NEXTDURATION_EXPRESSION:
        return ((InternalEList<?>)getNextdurationExpression()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVERY_EXPRESSION__DURATION_EXPRESSION:
        return getDurationExpression();
      case OpenScenarioPackage.EVERY_EXPRESSION__NEXTDURATION_EXPRESSION:
        return getNextdurationExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVERY_EXPRESSION__DURATION_EXPRESSION:
        setDurationExpression((Expression)newValue);
        return;
      case OpenScenarioPackage.EVERY_EXPRESSION__NEXTDURATION_EXPRESSION:
        getNextdurationExpression().clear();
        getNextdurationExpression().addAll((Collection<? extends Expression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVERY_EXPRESSION__DURATION_EXPRESSION:
        setDurationExpression((Expression)null);
        return;
      case OpenScenarioPackage.EVERY_EXPRESSION__NEXTDURATION_EXPRESSION:
        getNextdurationExpression().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.EVERY_EXPRESSION__DURATION_EXPRESSION:
        return durationExpression != null;
      case OpenScenarioPackage.EVERY_EXPRESSION__NEXTDURATION_EXPRESSION:
        return nextdurationExpression != null && !nextdurationExpression.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //EveryExpressionImpl
