/*
 * generated by Xtext 2.35.0
 */
lexer grammar InternalOpenScenarioLexer;

@header {
package de.bmwgroup.openscenario.ide.contentassist.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

Remove_default : 'remove_default';

Expression : 'expression';

Undefined : 'undefined';

External : 'external';

Inherits : 'inherits';

Modifier : 'modifier';

Parallel : 'parallel';

Scenario : 'scenario';

Default : 'default';

Elapsed : 'elapsed';

Action : 'action';

Extend : 'extend';

Factor : 'factor';

Global : 'global';

Import : 'import';

Offset : 'offset';

One_of : 'one_of';

Record : 'record';

Sample : 'sample';

Serial : 'serial';

String : 'string';

Struct : 'struct';

Actor : 'actor';

Cover : 'cover';

Event : 'event';

Every : 'every';

Float : 'float';

Range : 'range';

Until : 'until';

Bool : 'bool';

Call : 'call';

Emit : 'emit';

Enum : 'enum';

Fall : 'fall';

Hard : 'hard';

Keep : 'keep';

List : 'list';

Only : 'only';

Rise : 'rise';

Type : 'type';

Uint : 'uint';

Unit : 'unit';

Wait : 'wait';

With : 'with';

And : 'and';

Def : 'def';

Int : 'int';

Kph : 'kph';

Mol : 'mol';

Not : 'not';

Rad : 'rad';

Var : 'var';

ExclamationMarkEqualsSign : '!=';

HyphenMinusGreaterThanSign : '->';

FullStopFullStop : '..';

LessThanSignEqualsSign : '<=';

EqualsSignEqualsSign : '==';

EqualsSignGreaterThanSign : '=>';

GreaterThanSignEqualsSign : '>=';

SI : 'SI';

As : 'as';

Cd : 'cd';

Do : 'do';

If : 'if';

In : 'in';

Is : 'is';

It : 'it';

Kg : 'kg';

Of : 'of';

On : 'on';

Or : 'or';

ExclamationMark : '!';

PercentSign : '%';

LeftParenthesis : '(';

RightParenthesis : ')';

Asterisk : '*';

PlusSign : '+';

Comma : ',';

HyphenMinus : '-';

FullStop : '.';

Solidus : '/';

Colon : ':';

LessThanSign : '<';

EqualsSign : '=';

GreaterThanSign : '>';

QuestionMark : '?';

CommercialAt : '@';

A : 'A';

K : 'K';

LeftSquareBracket : '[';

RightSquareBracket : ']';

M : 'm';

S : 's';

fragment RULE_BEGIN : ;

fragment RULE_END : ;

RULE_BOOL : ('true'|'false');

RULE_INTEGER : ('-'? RULE_INT|'0x' ('0'..'9'|'a'..'f'|'A'..'F')+);

RULE_FLOAT : ('+'|'-')? RULE_INT '.' RULE_INT (('e'|'E') ('+'|'-')? ('0'..'9')+)?;

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\''|'\'\'\'' ('\\' .|~(('\\'|'\'')))* '\'\'\''|'"""' ('\\' .|~(('\\'|'"')))* '"""');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
