/**
 * generated by Xtext 2.35.0
 */
package de.bmwgroup.openscenario.openScenario.impl;

import de.bmwgroup.openscenario.openScenario.OpenScenarioPackage;
import de.bmwgroup.openscenario.openScenario.SIBaseExponentList;
import de.bmwgroup.openscenario.openScenario.SIUnitSpecifier;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>SI Unit Specifier</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.SIUnitSpecifierImpl#getSIBaseExponentList <em>SI Base Exponent List</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.SIUnitSpecifierImpl#getSIfactor <em>SIfactor</em>}</li>
 *   <li>{@link de.bmwgroup.openscenario.openScenario.impl.SIUnitSpecifierImpl#getSIUnit <em>SI Unit</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SIUnitSpecifierImpl extends MinimalEObjectImpl.Container implements SIUnitSpecifier
{
  /**
   * The cached value of the '{@link #getSIBaseExponentList() <em>SI Base Exponent List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSIBaseExponentList()
   * @generated
   * @ordered
   */
  protected SIBaseExponentList siBaseExponentList;

  /**
   * The default value of the '{@link #getSIfactor() <em>SIfactor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSIfactor()
   * @generated
   * @ordered
   */
  protected static final String SIFACTOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSIfactor() <em>SIfactor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSIfactor()
   * @generated
   * @ordered
   */
  protected String sIfactor = SIFACTOR_EDEFAULT;

  /**
   * The default value of the '{@link #getSIUnit() <em>SI Unit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSIUnit()
   * @generated
   * @ordered
   */
  protected static final String SI_UNIT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSIUnit() <em>SI Unit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSIUnit()
   * @generated
   * @ordered
   */
  protected String siUnit = SI_UNIT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SIUnitSpecifierImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenScenarioPackage.Literals.SI_UNIT_SPECIFIER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SIBaseExponentList getSIBaseExponentList()
  {
    return siBaseExponentList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSIBaseExponentList(SIBaseExponentList newSIBaseExponentList, NotificationChain msgs)
  {
    SIBaseExponentList oldSIBaseExponentList = siBaseExponentList;
    siBaseExponentList = newSIBaseExponentList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.SI_UNIT_SPECIFIER__SI_BASE_EXPONENT_LIST, oldSIBaseExponentList, newSIBaseExponentList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSIBaseExponentList(SIBaseExponentList newSIBaseExponentList)
  {
    if (newSIBaseExponentList != siBaseExponentList)
    {
      NotificationChain msgs = null;
      if (siBaseExponentList != null)
        msgs = ((InternalEObject)siBaseExponentList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.SI_UNIT_SPECIFIER__SI_BASE_EXPONENT_LIST, null, msgs);
      if (newSIBaseExponentList != null)
        msgs = ((InternalEObject)newSIBaseExponentList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenScenarioPackage.SI_UNIT_SPECIFIER__SI_BASE_EXPONENT_LIST, null, msgs);
      msgs = basicSetSIBaseExponentList(newSIBaseExponentList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.SI_UNIT_SPECIFIER__SI_BASE_EXPONENT_LIST, newSIBaseExponentList, newSIBaseExponentList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSIfactor()
  {
    return sIfactor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSIfactor(String newSIfactor)
  {
    String oldSIfactor = sIfactor;
    sIfactor = newSIfactor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.SI_UNIT_SPECIFIER__SIFACTOR, oldSIfactor, sIfactor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSIUnit()
  {
    return siUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSIUnit(String newSIUnit)
  {
    String oldSIUnit = siUnit;
    siUnit = newSIUnit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenScenarioPackage.SI_UNIT_SPECIFIER__SI_UNIT, oldSIUnit, siUnit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.SI_UNIT_SPECIFIER__SI_BASE_EXPONENT_LIST:
        return basicSetSIBaseExponentList(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.SI_UNIT_SPECIFIER__SI_BASE_EXPONENT_LIST:
        return getSIBaseExponentList();
      case OpenScenarioPackage.SI_UNIT_SPECIFIER__SIFACTOR:
        return getSIfactor();
      case OpenScenarioPackage.SI_UNIT_SPECIFIER__SI_UNIT:
        return getSIUnit();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.SI_UNIT_SPECIFIER__SI_BASE_EXPONENT_LIST:
        setSIBaseExponentList((SIBaseExponentList)newValue);
        return;
      case OpenScenarioPackage.SI_UNIT_SPECIFIER__SIFACTOR:
        setSIfactor((String)newValue);
        return;
      case OpenScenarioPackage.SI_UNIT_SPECIFIER__SI_UNIT:
        setSIUnit((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.SI_UNIT_SPECIFIER__SI_BASE_EXPONENT_LIST:
        setSIBaseExponentList((SIBaseExponentList)null);
        return;
      case OpenScenarioPackage.SI_UNIT_SPECIFIER__SIFACTOR:
        setSIfactor(SIFACTOR_EDEFAULT);
        return;
      case OpenScenarioPackage.SI_UNIT_SPECIFIER__SI_UNIT:
        setSIUnit(SI_UNIT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenScenarioPackage.SI_UNIT_SPECIFIER__SI_BASE_EXPONENT_LIST:
        return siBaseExponentList != null;
      case OpenScenarioPackage.SI_UNIT_SPECIFIER__SIFACTOR:
        return SIFACTOR_EDEFAULT == null ? sIfactor != null : !SIFACTOR_EDEFAULT.equals(sIfactor);
      case OpenScenarioPackage.SI_UNIT_SPECIFIER__SI_UNIT:
        return SI_UNIT_EDEFAULT == null ? siUnit != null : !SI_UNIT_EDEFAULT.equals(siUnit);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (SIfactor: ");
    result.append(sIfactor);
    result.append(", SIUnit: ");
    result.append(siUnit);
    result.append(')');
    return result.toString();
  }

} //SIUnitSpecifierImpl
